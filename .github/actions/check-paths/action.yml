name: 'Check Changed Paths'
description: 'Check if changed files match specified patterns'
inputs:
  include_patterns:
    description: 'Patterns to include, one per line'
    required: false
    default: ''
  exclude_patterns:
    description: 'Patterns to exclude, one per line'
    required: false
    default: ''
  result_name:
    description: 'Name for the output result'
    required: false
    default: 'match_only'
outputs:
  match_result:
    description: "true if all changed files match include patterns and don't match exclude patterns"
    value: ${{ steps.check-paths.outputs.result }}
runs:
  using: 'composite'
  steps:
    - name: Check changed paths
      id: check-paths
      shell: bash
      run: |
        # Get list of changed files
        if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_target" ]]; then
          echo "PR context detected, comparing against base branch"
          # Fetch the base branch first to ensure we have history
          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} ${{ github.sha }} ||
                          git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD ||
                          git diff --name-only HEAD)
        else
          echo "Non-PR context detected, comparing against previous commit"
          # For push events, try to get changed files using more reliable methods
          CHANGED_FILES=$(git diff --name-only HEAD^ ||
                          git diff --name-only HEAD~1 ||
                          git show --name-only --format="" ||
                          echo "")
        fi

        if [[ -z "$CHANGED_FILES" ]]; then
          echo "Warning: Could not determine changed files. Treating all files as changed."
          CHANGED_FILES=$(find . -type f -not -path "./.git/*" | sed 's|^./||')
        fi

        echo "Changed files: $CHANGED_FILES"

        # Default to true - will change to false if any file doesn't match criteria
        RESULT=true

        # Convert input patterns to arrays
        IFS=$'\n' read -r -a INCLUDE_PATTERNS <<< "${{ inputs.include_patterns }}"
        IFS=$'\n' read -r -a EXCLUDE_PATTERNS <<< "${{ inputs.exclude_patterns }}"

        # Process each changed file
        for file in $CHANGED_FILES; do
          # Check if file matches any include pattern (if provided)
          if [[ ${#INCLUDE_PATTERNS[@]} -gt 0 ]]; then
            INCLUDED=false
            for pattern in "${INCLUDE_PATTERNS[@]}"; do
              if [[ -n "$pattern" && "$file" =~ $pattern ]]; then
                INCLUDED=true
                break
              fi
            done
            if [[ "$INCLUDED" == "false" ]]; then
              echo "File '$file' doesn't match any include pattern"
              RESULT=false
              break
            fi
          fi

          # Check if file matches any exclude pattern (if provided)
          if [[ ${#EXCLUDE_PATTERNS[@]} -gt 0 ]]; then
            for pattern in "${EXCLUDE_PATTERNS[@]}"; do
              if [[ -n "$pattern" && "$file" =~ $pattern ]]; then
                echo "File '$file' matches exclude pattern: $pattern"
                RESULT=false
                break 2
              fi
            done
          fi
        done

        echo "result=$RESULT" >> $GITHUB_OUTPUT
        echo "${{ inputs.result_name }}=$RESULT" >> $GITHUB_OUTPUT
        echo "Final result: $RESULT"
