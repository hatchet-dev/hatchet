syntax = "proto3";

option go_package = "github.com/hatchet-dev/hatchet/internal/services/admin/contracts";

import "google/protobuf/timestamp.proto";

// WorkflowService represents a set of RPCs for managing workflows.
service WorkflowService {
    rpc PutWorkflow(PutWorkflowRequest) returns (WorkflowVersion);
    rpc ScheduleWorkflow(ScheduleWorkflowRequest) returns (WorkflowVersion);
    rpc TriggerWorkflow(TriggerWorkflowRequest) returns (TriggerWorkflowResponse);
    rpc PutRateLimit(PutRateLimitRequest) returns (PutRateLimitResponse);
}

message PutWorkflowRequest {
    CreateWorkflowVersionOpts opts = 1;
}

// CreateWorkflowVersionOpts represents options to create a workflow version.
message CreateWorkflowVersionOpts {
    string name = 1; // (required) the workflow name
    string description = 2; // (optional) the workflow description
    string version = 3; // (required) the workflow version
    repeated string event_triggers = 4; // (optional) event triggers for the workflow
    repeated string cron_triggers = 5; // (optional) cron triggers for the workflow
    repeated google.protobuf.Timestamp scheduled_triggers = 6; // (optional) scheduled triggers for the workflow
    repeated CreateWorkflowJobOpts jobs = 7; // (required) the workflow jobs
    WorkflowConcurrencyOpts concurrency = 8; // (optional) the workflow concurrency options
    optional string schedule_timeout = 9; // (optional) the timeout for the schedule
    optional string cron_input = 10; // (optional) the input for the cron trigger
    optional CreateWorkflowJobOpts on_failure_job = 11; // (optional) the job to run on failure
}

enum ConcurrencyLimitStrategy {
    CANCEL_IN_PROGRESS = 0;
    DROP_NEWEST = 1;
    QUEUE_NEWEST = 2;
    GROUP_ROUND_ROBIN = 3;
}

message WorkflowConcurrencyOpts {
    string action = 1; // (required) the action id for getting the concurrency group
    int32 max_runs = 2; // (optional) the maximum number of concurrent workflow runs, default 1
    ConcurrencyLimitStrategy limit_strategy = 3; // (optional) the strategy to use when the concurrency limit is reached, default CANCEL_IN_PROGRESS
}

// CreateWorkflowJobOpts represents options to create a workflow job.
message CreateWorkflowJobOpts {
    string name = 1; // (required) the job name
    string description = 2; // (optional) the job description
    reserved 3; // (deprecated) timeout
    repeated CreateWorkflowStepOpts steps = 4; // (required) the job steps
}

// CreateWorkflowStepOpts represents options to create a workflow step.
message CreateWorkflowStepOpts {
    string readable_id = 1; // (required) the step name
    string action = 2; // (required) the step action id
    string timeout = 3; // (optional) the step timeout
    string inputs = 4; // (optional) the step inputs, assuming string representation of JSON
    repeated string parents = 5; // (optional) the step parents. if none are passed in, this is a root step
    string user_data = 6; // (optional) the custom step user data, assuming string representation of JSON
    int32 retries = 7; // (optional) the number of retries for the step, default 0
    repeated CreateStepRateLimit rate_limits = 8; // (optional) the rate limits for the step
}

message CreateStepRateLimit {
    string key = 1; // (required) the key for the rate limit
    int32 units = 2; // (required) the number of units this step consumes
}

// ListWorkflowsRequest is the request for ListWorkflows.
message ListWorkflowsRequest {}

message ScheduleWorkflowRequest {
    string name = 1;

    repeated google.protobuf.Timestamp schedules = 2;

    // (optional) the input data for the workflow
    string input = 3;

    // (optional) the parent workflow run id
    optional string parent_id = 4;

    // (optional) the parent step run id
    optional string parent_step_run_id = 5;

    // (optional) the index of the child workflow. if this is set, matches on the index or the
    // child key will be a no-op, even if the schedule has changed.
    optional int32 child_index = 6;

    // (optional) the key for the child. if this is set, matches on the index or the
    // child key will be a no-op, even if the schedule has changed.
    optional string child_key = 7;
}

// WorkflowVersion represents the WorkflowVersion model.
message WorkflowVersion {
    string id = 1;
    google.protobuf.Timestamp created_at = 2;
    google.protobuf.Timestamp updated_at = 3;
    string version = 5;
    int32 order = 6;
    string workflow_id = 7;
}

// WorkflowTriggerEventRef represents the WorkflowTriggerEventRef model.
message WorkflowTriggerEventRef {
    string parent_id = 1;
    string event_key = 2;
}

// WorkflowTriggerCronRef represents the WorkflowTriggerCronRef model.
message WorkflowTriggerCronRef {
    string parent_id = 1;
    string cron = 2;
}

message TriggerWorkflowRequest {
    string name = 1;

    // (optional) the input data for the workflow
    string input = 2;

    // (optional) the parent workflow run id
    optional string parent_id = 3;

    // (optional) the parent step run id
    optional string parent_step_run_id = 4;

    // (optional) the index of the child workflow. if this is set, matches on the index or the
    // child key will return an existing workflow run if the parent id, parent step run id, and
    // child index/key match an existing workflow run.
    optional int32 child_index = 5;

    // (optional) the key for the child. if this is set, matches on the index or the
    // child key will return an existing workflow run if the parent id, parent step run id, and
    // child index/key match an existing workflow run.
    optional string child_key = 6;

    // (optional) additional metadata for the workflow
    optional string additional_metadata = 7;
}

message TriggerWorkflowResponse {
    string workflow_run_id = 1;
}

enum RateLimitDuration {
    SECOND = 0;
    MINUTE = 1;
    HOUR = 2;
}

message PutRateLimitRequest {
    // (required) the global key for the rate limit
    string key = 1;

    // (required) the max limit for the rate limit (per unit of time)
    int32 limit = 2;

    // (required) the duration of time for the rate limit (second|minute|hour)
    RateLimitDuration duration = 3;
}

message PutRateLimitResponse {}
