syntax = "proto3";

option go_package = "github.com/hatchet-dev/hatchet/internal/services/dispatcher/contracts";

import "google/protobuf/timestamp.proto";

service Dispatcher {
    rpc Register(WorkerRegisterRequest) returns (WorkerRegisterResponse) {}

    rpc Listen(WorkerListenRequest) returns (stream AssignedAction) {}

    // ListenV2 is like listen, but implementation does not include heartbeats. This should only used by SDKs
    // against engine version v0.18.1+
    rpc ListenV2(WorkerListenRequest) returns (stream AssignedAction) {}

    // Heartbeat is a method for workers to send heartbeats to the dispatcher
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}

    rpc SubscribeToWorkflowEvents(SubscribeToWorkflowEventsRequest) returns (stream WorkflowEvent) {}

    rpc SendStepActionEvent(StepActionEvent) returns (ActionEventResponse) {}

    rpc SendGroupKeyActionEvent(GroupKeyActionEvent) returns (ActionEventResponse) {}

    rpc PutOverridesData(OverridesData) returns (OverridesDataResponse) {}

    rpc Unsubscribe(WorkerUnsubscribeRequest) returns (WorkerUnsubscribeResponse) {}
}

message WorkerRegisterRequest {
    // the name of the worker
    string workerName = 1;

    // a list of actions that this worker can run
    repeated string actions = 2;

    // (optional) the services for this worker
    repeated string services = 3;

    // (optional) the max number of runs this worker can handle
    optional int32 maxRuns = 4;
}

message WorkerRegisterResponse {
    // the tenant id
    string tenantId = 1;

    // the id of the worker
    string workerId = 2;

    // the name of the worker
    string workerName = 3;
}

enum ActionType {
    START_STEP_RUN = 0;
    CANCEL_STEP_RUN = 1;
    START_GET_GROUP_KEY = 2;
}

message AssignedAction {
    // the tenant id
    string tenantId = 1;

    // the workflow run id (optional)
    string workflowRunId = 2;

    // the get group key run id (optional)
    string getGroupKeyRunId = 3;

    // the job id
    string jobId = 4;

    // the job name
    string jobName = 5;

    // the job run id
    string jobRunId = 6;

    // the step id
    string stepId = 7;

    // the step run id
    string stepRunId = 8;

    // the action id
    string actionId = 9;

    // the action type
    ActionType actionType = 10;

    // the action payload
    string actionPayload = 11;

    // the step name
    string stepName = 12;
}

message WorkerListenRequest {
    // the id of the worker
    string workerId = 1;
}

message WorkerUnsubscribeRequest {
    // the id of the worker
    string workerId = 1;
}

message WorkerUnsubscribeResponse {
    // the tenant id to unsubscribe from
    string tenantId = 1;

    // the id of the worker
    string workerId = 2;
}

enum GroupKeyActionEventType {
    GROUP_KEY_EVENT_TYPE_UNKNOWN = 0;
    GROUP_KEY_EVENT_TYPE_STARTED = 1;
    GROUP_KEY_EVENT_TYPE_COMPLETED = 2;
    GROUP_KEY_EVENT_TYPE_FAILED = 3;
}

message GroupKeyActionEvent {
    // the id of the worker
    string workerId = 1;

    // the id of the job
    string workflowRunId = 2;

    string getGroupKeyRunId = 3;

    // the action id
    string actionId = 4;

    google.protobuf.Timestamp eventTimestamp = 5;

    // the step event type
    GroupKeyActionEventType eventType = 6;

    // the event payload
    string eventPayload = 7;
}

enum StepActionEventType {
    STEP_EVENT_TYPE_UNKNOWN = 0;
    STEP_EVENT_TYPE_STARTED = 1;
    STEP_EVENT_TYPE_COMPLETED = 2;
    STEP_EVENT_TYPE_FAILED = 3;
}

message StepActionEvent {
    // the id of the worker
    string workerId = 1;

    // the id of the job
    string jobId = 2;

    // the job run id
    string jobRunId = 3;

    // the id of the step
    string stepId = 4;

    // the step run id
    string stepRunId = 5;

    // the action id
    string actionId = 6;

    google.protobuf.Timestamp eventTimestamp = 7;

    // the step event type
    StepActionEventType eventType = 8;

    // the event payload
    string eventPayload = 9;
}

message ActionEventResponse {
    // the tenant id
    string tenantId = 1;

    // the id of the worker
    string workerId = 2;
}

message SubscribeToWorkflowEventsRequest {
    // the id of the workflow run
    string workflowRunId = 1;
}

enum ResourceType {
    RESOURCE_TYPE_UNKNOWN = 0;
    RESOURCE_TYPE_STEP_RUN = 1;
    RESOURCE_TYPE_WORKFLOW_RUN = 2;
}

enum ResourceEventType {
    RESOURCE_EVENT_TYPE_UNKNOWN = 0;
    RESOURCE_EVENT_TYPE_STARTED = 1;
    RESOURCE_EVENT_TYPE_COMPLETED = 2;
    RESOURCE_EVENT_TYPE_FAILED = 3;
    RESOURCE_EVENT_TYPE_CANCELLED = 4;
    RESOURCE_EVENT_TYPE_TIMED_OUT = 5;
    RESOURCE_EVENT_TYPE_STREAM = 6;
}

message WorkflowEvent {
    // the id of the workflow run
    string workflowRunId = 1;

    ResourceType resourceType = 2;

    ResourceEventType eventType = 3;

    string resourceId = 4;

    google.protobuf.Timestamp eventTimestamp = 5;

    // the event payload
    string eventPayload = 6;

    // whether this is the last event for the workflow run - server
    // will hang up the connection but clients might want to case
    bool hangup = 7;

    // (optional) the max number of retries this step can handle
    optional int32 stepRetries = 8;

    // (optional) the retry count of this step
    optional int32 retryCount = 9;
}

message OverridesData {
    // the step run id
    string stepRunId = 1;

    // the path of the data to set
    string path = 2;

    // the value to set
    string value = 3;

    // the filename of the caller
    string callerFilename = 4;
}

message OverridesDataResponse {}

message HeartbeatRequest {
    // the id of the worker
    string workerId = 1;

    // heartbeatAt is the time the worker sent the heartbeat
    google.protobuf.Timestamp heartbeatAt = 2;
}

message HeartbeatResponse {}
