// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: filters.sql

package sqlcv1

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFilter = `-- name: CreateFilter :one
INSERT INTO v1_filter (
    tenant_id,
    workflow_id,
    resource_hint,
    expression,
    payload
) VALUES (
    $1::UUID,
    $2::UUID,
    $3::TEXT,
    $4::TEXT,
    $5::JSONB
)
ON CONFLICT (tenant_id, workflow_id, resource_hint, expression) DO UPDATE
SET
    payload = EXCLUDED.payload,
    resource_hint = EXCLUDED.resource_hint,
    expression = EXCLUDED.expression,
    updated_at = NOW()
WHERE v1_filter.tenant_id = $1::UUID
  AND v1_filter.workflow_id = $2::UUID
  AND v1_filter.resource_hint = $3::TEXT
  AND v1_filter.expression = $4::TEXT
RETURNING id, tenant_id, workflow_id, resource_hint, expression, payload, created_at, updated_at
`

type CreateFilterParams struct {
	Tenantid     pgtype.UUID `json:"tenantid"`
	Workflowid   pgtype.UUID `json:"workflowid"`
	Resourcehint string      `json:"resourcehint"`
	Expression   string      `json:"expression"`
	Payload      []byte      `json:"payload"`
}

func (q *Queries) CreateFilter(ctx context.Context, db DBTX, arg CreateFilterParams) (*V1Filter, error) {
	row := db.QueryRow(ctx, createFilter,
		arg.Tenantid,
		arg.Workflowid,
		arg.Resourcehint,
		arg.Expression,
		arg.Payload,
	)
	var i V1Filter
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.WorkflowID,
		&i.ResourceHint,
		&i.Expression,
		&i.Payload,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

