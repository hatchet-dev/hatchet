// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: filters.sql

package sqlcv1

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFilter = `-- name: CreateFilter :one
INSERT INTO v1_filter (
    tenant_id,
    workflow_id,
    scope,
    expression,
    payload
) VALUES (
    $1::UUID,
    $2::UUID,
    $3::TEXT,
    $4::TEXT,
    $5::JSONB
)
ON CONFLICT (tenant_id, workflow_id, scope, expression) DO UPDATE
SET
    payload = EXCLUDED.payload,
    updated_at = NOW()
WHERE v1_filter.tenant_id = $1::UUID
  AND v1_filter.workflow_id = $2::UUID
  AND v1_filter.scope = $3::TEXT
  AND v1_filter.expression = $4::TEXT
RETURNING id, tenant_id, workflow_id, scope, expression, payload, inserted_at, updated_at
`

type CreateFilterParams struct {
	Tenantid   pgtype.UUID `json:"tenantid"`
	Workflowid pgtype.UUID `json:"workflowid"`
	Scope      string      `json:"scope"`
	Expression string      `json:"expression"`
	Payload    []byte      `json:"payload"`
}

func (q *Queries) CreateFilter(ctx context.Context, db DBTX, arg CreateFilterParams) (*V1Filter, error) {
	row := db.QueryRow(ctx, createFilter,
		arg.Tenantid,
		arg.Workflowid,
		arg.Scope,
		arg.Expression,
		arg.Payload,
	)
	var i V1Filter
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.WorkflowID,
		&i.Scope,
		&i.Expression,
		&i.Payload,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteFilter = `-- name: DeleteFilter :one
DELETE FROM v1_filter
WHERE
    tenant_id = $1::UUID
    AND id = $2::UUID
RETURNING id, tenant_id, workflow_id, scope, expression, payload, inserted_at, updated_at
`

type DeleteFilterParams struct {
	Tenantid pgtype.UUID `json:"tenantid"`
	ID       pgtype.UUID `json:"id"`
}

func (q *Queries) DeleteFilter(ctx context.Context, db DBTX, arg DeleteFilterParams) (*V1Filter, error) {
	row := db.QueryRow(ctx, deleteFilter, arg.Tenantid, arg.ID)
	var i V1Filter
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.WorkflowID,
		&i.Scope,
		&i.Expression,
		&i.Payload,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getFilter = `-- name: GetFilter :one
SELECT id, tenant_id, workflow_id, scope, expression, payload, inserted_at, updated_at
FROM v1_filter
WHERE
    tenant_id = $1::UUID
    AND id = $2::UUID
`

type GetFilterParams struct {
	Tenantid pgtype.UUID `json:"tenantid"`
	ID       pgtype.UUID `json:"id"`
}

func (q *Queries) GetFilter(ctx context.Context, db DBTX, arg GetFilterParams) (*V1Filter, error) {
	row := db.QueryRow(ctx, getFilter, arg.Tenantid, arg.ID)
	var i V1Filter
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.WorkflowID,
		&i.Scope,
		&i.Expression,
		&i.Payload,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listFilterCountsForWorkflows = `-- name: ListFilterCountsForWorkflows :many
WITH inputs AS (
    SELECT UNNEST($2::UUID[]) AS workflow_id
)

SELECT workflow_id, COUNT(*)
FROM v1_filter
WHERE
    tenant_id = $1::UUID
    AND workflow_id = ANY($2::UUID[])
GROUP BY workflow_id
`

type ListFilterCountsForWorkflowsParams struct {
	Tenantid    pgtype.UUID   `json:"tenantid"`
	Workflowids []pgtype.UUID `json:"workflowids"`
}

type ListFilterCountsForWorkflowsRow struct {
	WorkflowID pgtype.UUID `json:"workflow_id"`
	Count      int64       `json:"count"`
}

func (q *Queries) ListFilterCountsForWorkflows(ctx context.Context, db DBTX, arg ListFilterCountsForWorkflowsParams) ([]*ListFilterCountsForWorkflowsRow, error) {
	rows, err := db.Query(ctx, listFilterCountsForWorkflows, arg.Tenantid, arg.Workflowids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListFilterCountsForWorkflowsRow
	for rows.Next() {
		var i ListFilterCountsForWorkflowsRow
		if err := rows.Scan(&i.WorkflowID, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
