// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payload-store.sql

package sqlcv1

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const evictPayloadWALRecords = `-- name: EvictPayloadWALRecords :exec
WITH inputs AS (
    SELECT
        UNNEST($2::TIMESTAMPTZ[]) AS offload_at,
        UNNEST($3::BIGINT[]) AS payload_id,
        UNNEST($4::TIMESTAMPTZ[]) AS payload_inserted_at,
        UNNEST(CAST($5::TEXT[] AS v1_payload_type[])) AS payload_type
)
DELETE FROM v1_payload_wal
WHERE
    tenant_id = $1::UUID
    AND (offload_at, payload_id, payload_inserted_at, payload_type) IN (
        SELECT offload_at, payload_id, payload_inserted_at, payload_type
        FROM inputs
    )
`

type EvictPayloadWALRecordsParams struct {
	Tenantid           pgtype.UUID          `json:"tenantid"`
	Offloadats         []pgtype.Timestamptz `json:"offloadats"`
	Payloadids         []int64              `json:"payloadids"`
	Payloadinsertedats []pgtype.Timestamptz `json:"payloadinsertedats"`
	Payloadtypes       []string             `json:"payloadtypes"`
}

func (q *Queries) EvictPayloadWALRecords(ctx context.Context, db DBTX, arg EvictPayloadWALRecordsParams) error {
	_, err := db.Exec(ctx, evictPayloadWALRecords,
		arg.Tenantid,
		arg.Offloadats,
		arg.Payloadids,
		arg.Payloadinsertedats,
		arg.Payloadtypes,
	)
	return err
}

const offloadPayloadsToExternalStore = `-- name: OffloadPayloadsToExternalStore :exec
WITH inputs AS (
    SELECT
        UNNEST($2::BIGINT[]) AS id,
        UNNEST($3::TIMESTAMPTZ[]) AS inserted_at,
        UNNEST($4::JSONB[]) AS value
)

UPDATE v1_payload
SET
    value = i.value,
    updated_at = NOW()
FROM inputs i
WHERE
    v1_payload.tenant_id = $1::UUID
    AND v1_payload.id = i.id
    AND v1_payload.inserted_at = i.inserted_at
`

type OffloadPayloadsToExternalStoreParams struct {
	Tenantid    pgtype.UUID          `json:"tenantid"`
	Ids         []int64              `json:"ids"`
	Insertedats []pgtype.Timestamptz `json:"insertedats"`
	Values      [][]byte             `json:"values"`
}

func (q *Queries) OffloadPayloadsToExternalStore(ctx context.Context, db DBTX, arg OffloadPayloadsToExternalStoreParams) error {
	_, err := db.Exec(ctx, offloadPayloadsToExternalStore,
		arg.Tenantid,
		arg.Ids,
		arg.Insertedats,
		arg.Values,
	)
	return err
}

const pollPayloadWALForRecordsToOffload = `-- name: PollPayloadWALForRecordsToOffload :exec
SELECT tenant_id, offload_at, payload_id, payload_inserted_at, payload_type, operation
FROM v1_payload_wal
WHERE
    tenant_id = $1::UUID
    AND offload_at <= NOW()
ORDER BY offload_at, payload_id, payload_inserted_at, payload_type
LIMIT $2::INT
FOR UPDATE SKIP LOCKED
`

type PollPayloadWALForRecordsToOffloadParams struct {
	Tenantid  pgtype.UUID `json:"tenantid"`
	Polllimit int32       `json:"polllimit"`
}

func (q *Queries) PollPayloadWALForRecordsToOffload(ctx context.Context, db DBTX, arg PollPayloadWALForRecordsToOffloadParams) error {
	_, err := db.Exec(ctx, pollPayloadWALForRecordsToOffload, arg.Tenantid, arg.Polllimit)
	return err
}

const readPayload = `-- name: ReadPayload :one
SELECT tenant_id, id, inserted_at, type, value, updated_at
FROM v1_payload
WHERE
    tenant_id = $1::UUID
    AND type = $2::v1_payload_type
    AND id = $3::BIGINT
    AND inserted_at = $4::TIMESTAMPTZ
`

type ReadPayloadParams struct {
	Tenantid   pgtype.UUID        `json:"tenantid"`
	Type       V1PayloadType      `json:"type"`
	ID         int64              `json:"id"`
	Insertedat pgtype.Timestamptz `json:"insertedat"`
}

func (q *Queries) ReadPayload(ctx context.Context, db DBTX, arg ReadPayloadParams) (*V1Payload, error) {
	row := db.QueryRow(ctx, readPayload,
		arg.Tenantid,
		arg.Type,
		arg.ID,
		arg.Insertedat,
	)
	var i V1Payload
	err := row.Scan(
		&i.TenantID,
		&i.ID,
		&i.InsertedAt,
		&i.Type,
		&i.Value,
		&i.UpdatedAt,
	)
	return &i, err
}

const readPayloads = `-- name: ReadPayloads :many
WITH inputs AS (
    SELECT
        UNNEST($2::BIGINT[]) AS id,
        UNNEST($3::TIMESTAMPTZ[]) AS inserted_at,
        UNNEST(CAST($4::TEXT[] AS v1_payload_type[])) AS type
)

SELECT tenant_id, id, inserted_at, type, value, updated_at
FROM v1_payload
WHERE
    tenant_id = $1::UUID
    AND (id, inserted_at, type) IN (
        SELECT id, inserted_at, type
        FROM inputs
    )
`

type ReadPayloadsParams struct {
	Tenantid    pgtype.UUID          `json:"tenantid"`
	Ids         []int64              `json:"ids"`
	Insertedats []pgtype.Timestamptz `json:"insertedats"`
	Types       []string             `json:"types"`
}

func (q *Queries) ReadPayloads(ctx context.Context, db DBTX, arg ReadPayloadsParams) ([]*V1Payload, error) {
	rows, err := db.Query(ctx, readPayloads,
		arg.Tenantid,
		arg.Ids,
		arg.Insertedats,
		arg.Types,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*V1Payload
	for rows.Next() {
		var i V1Payload
		if err := rows.Scan(
			&i.TenantID,
			&i.ID,
			&i.InsertedAt,
			&i.Type,
			&i.Value,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const writePayloadWAL = `-- name: WritePayloadWAL :exec
WITH inputs AS (
    SELECT
        UNNEST($2::BIGINT[]) AS payload_id,
        UNNEST($3::TIMESTAMPTZ[]) AS payload_inserted_at,
        UNNEST(CAST($4::TEXT[] AS v1_payload_type[])) AS payload_type,
        UNNEST($5::TIMESTAMPTZ[]) AS offload_at,
        UNNEST(CAST($6::TEXT[] AS v1_payload_wal_operation[])) AS operation
)

INSERT INTO v1_payload_wal (
    tenant_id,
    offload_at,
    payload_id,
    payload_inserted_at,
    payload_type,
    operation
)
SELECT
    $1::UUID,
    i.offload_at,
    i.payload_id,
    i.payload_inserted_at,
    i.payload_type,
    i.operation
FROM
    inputs i
`

type WritePayloadWALParams struct {
	Tenantid           pgtype.UUID          `json:"tenantid"`
	Payloadids         []int64              `json:"payloadids"`
	Payloadinsertedats []pgtype.Timestamptz `json:"payloadinsertedats"`
	Payloadtypes       []string             `json:"payloadtypes"`
	Offloadats         []pgtype.Timestamptz `json:"offloadats"`
	Operations         []string             `json:"operations"`
}

func (q *Queries) WritePayloadWAL(ctx context.Context, db DBTX, arg WritePayloadWALParams) error {
	_, err := db.Exec(ctx, writePayloadWAL,
		arg.Tenantid,
		arg.Payloadids,
		arg.Payloadinsertedats,
		arg.Payloadtypes,
		arg.Offloadats,
		arg.Operations,
	)
	return err
}

const writePayloads = `-- name: WritePayloads :exec
WITH inputs AS (
    SELECT
        UNNEST($2::BIGINT[]) AS id,
        UNNEST($3::TIMESTAMPTZ[]) AS inserted_at,
        UNNEST(CAST($4::TEXT[] AS v1_payload_type[])) AS type,
        UNNEST($5::JSONB[]) AS payload
)
INSERT INTO v1_payload (
    tenant_id,
    id,
    inserted_at,
    type,
    value
)
SELECT
    $1::UUID,
    i.id,
    i.inserted_at,
    i.type,
    i.payload
FROM
    inputs i
`

type WritePayloadsParams struct {
	Tenantid    pgtype.UUID          `json:"tenantid"`
	Ids         []int64              `json:"ids"`
	Insertedats []pgtype.Timestamptz `json:"insertedats"`
	Types       []string             `json:"types"`
	Payloads    [][]byte             `json:"payloads"`
}

func (q *Queries) WritePayloads(ctx context.Context, db DBTX, arg WritePayloadsParams) error {
	_, err := db.Exec(ctx, writePayloads,
		arg.Tenantid,
		arg.Ids,
		arg.Insertedats,
		arg.Types,
		arg.Payloads,
	)
	return err
}
