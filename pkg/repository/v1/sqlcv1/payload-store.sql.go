// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payload-store.sql

package sqlcv1

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const readPayload = `-- name: ReadPayload :one
SELECT tenant_id, key, type, value
FROM v1_payload
WHERE
    tenant_id = $1::UUID
    AND type = $2::v1_payload_type
    AND key = $3::TEXT
`

type ReadPayloadParams struct {
	Tenantid pgtype.UUID   `json:"tenantid"`
	Type     V1PayloadType `json:"type"`
	Key      string        `json:"key"`
}

func (q *Queries) ReadPayload(ctx context.Context, db DBTX, arg ReadPayloadParams) (*V1Payload, error) {
	row := db.QueryRow(ctx, readPayload, arg.Tenantid, arg.Type, arg.Key)
	var i V1Payload
	err := row.Scan(
		&i.TenantID,
		&i.Key,
		&i.Type,
		&i.Value,
	)
	return &i, err
}

const writePayload = `-- name: WritePayload :exec
INSERT INTO v1_payload (
    tenant_id,
    key,
    type,
    value
)
VALUES (
    $1::UUID,
    $2::TEXT,
    $3::v1_payload_type,
    $4::JSONB
)
`

type WritePayloadParams struct {
	Tenantid pgtype.UUID   `json:"tenantid"`
	Key      string        `json:"key"`
	Type     V1PayloadType `json:"type"`
	Payload  []byte        `json:"payload"`
}

func (q *Queries) WritePayload(ctx context.Context, db DBTX, arg WritePayloadParams) error {
	_, err := db.Exec(ctx, writePayload,
		arg.Tenantid,
		arg.Key,
		arg.Type,
		arg.Payload,
	)
	return err
}
