// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: triggers.sql

package sqlcv1

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listWorkflowsByNames = `-- name: ListWorkflowsByNames :many
SELECT DISTINCT ON("workflowId")
    "workflowId",
    workflowVersions."id" AS "workflowVersionId",
    workflow."name" AS "workflowName"
FROM
    "WorkflowVersion" as workflowVersions
JOIN
    "Workflow" as workflow ON workflow."id" = workflowVersions."workflowId"
WHERE
    workflow."tenantId" = $1::uuid
    AND workflowVersions."deletedAt" IS NULL
    AND workflow."name" = ANY($2::text[])
ORDER BY "workflowId", "order" DESC
`

type ListWorkflowsByNamesParams struct {
	Tenantid      pgtype.UUID `json:"tenantid"`
	Workflownames []string    `json:"workflownames"`
}

type ListWorkflowsByNamesRow struct {
	WorkflowId        pgtype.UUID `json:"workflowId"`
	WorkflowVersionId pgtype.UUID `json:"workflowVersionId"`
	WorkflowName      string      `json:"workflowName"`
}

func (q *Queries) ListWorkflowsByNames(ctx context.Context, db DBTX, arg ListWorkflowsByNamesParams) ([]*ListWorkflowsByNamesRow, error) {
	rows, err := db.Query(ctx, listWorkflowsByNames, arg.Tenantid, arg.Workflownames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListWorkflowsByNamesRow
	for rows.Next() {
		var i ListWorkflowsByNamesRow
		if err := rows.Scan(&i.WorkflowId, &i.WorkflowVersionId, &i.WorkflowName); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkflowsForEvents = `-- name: ListWorkflowsForEvents :many
WITH latest_versions AS (
    SELECT DISTINCT ON("workflowId")
        "workflowId",
        workflowVersions."id" AS "workflowVersionId",
        workflow."name" AS "workflowName"
    FROM
        "WorkflowVersion" as workflowVersions
    JOIN
        "Workflow" as workflow ON workflow."id" = workflowVersions."workflowId"
    WHERE
        workflow."tenantId" = $2::uuid
        AND workflowVersions."deletedAt" IS NULL
    ORDER BY "workflowId", "order" DESC
)
SELECT
    latest_versions."workflowVersionId",
    latest_versions."workflowId",
    latest_versions."workflowName",
    eventRef."eventKey" as "eventKey"
FROM
    latest_versions
JOIN
    "WorkflowTriggers" as triggers ON triggers."workflowVersionId" = latest_versions."workflowVersionId"
JOIN
    "WorkflowTriggerEventRef" as eventRef ON eventRef."parentId" = triggers."id"
WHERE
    eventRef."eventKey" = ANY($1::text[])
`

type ListWorkflowsForEventsParams struct {
	Eventkeys []string    `json:"eventkeys"`
	Tenantid  pgtype.UUID `json:"tenantid"`
}

type ListWorkflowsForEventsRow struct {
	WorkflowVersionId pgtype.UUID `json:"workflowVersionId"`
	WorkflowId        pgtype.UUID `json:"workflowId"`
	WorkflowName      string      `json:"workflowName"`
	EventKey          string      `json:"eventKey"`
}

// Get all of the latest workflow versions
// select the workflow versions that have the event trigger
func (q *Queries) ListWorkflowsForEvents(ctx context.Context, db DBTX, arg ListWorkflowsForEventsParams) ([]*ListWorkflowsForEventsRow, error) {
	rows, err := db.Query(ctx, listWorkflowsForEvents, arg.Eventkeys, arg.Tenantid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListWorkflowsForEventsRow
	for rows.Next() {
		var i ListWorkflowsForEventsRow
		if err := rows.Scan(
			&i.WorkflowVersionId,
			&i.WorkflowId,
			&i.WorkflowName,
			&i.EventKey,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
