// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: idempotency-keys.sql

package sqlcv1

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIdempotencyKey = `-- name: CreateIdempotencyKey :one
WITH upserted AS (
    INSERT INTO v1_idempotency_key (
        tenant_id,
        key,
        expires_at
    )
    VALUES (
        $1::UUID,
        $2::TEXT,
        $3::TIMESTAMPTZ
    )
    ON CONFLICT (tenant_id, key, expires_at) DO NOTHING
    RETURNING 1
)

SELECT NOT EXISTS (
    SELECT 1
    FROM upserted
) AS already_existed
`

type CreateIdempotencyKeyParams struct {
	Tenantid  pgtype.UUID        `json:"tenantid"`
	Key       string             `json:"key"`
	Expiresat pgtype.Timestamptz `json:"expiresat"`
}

func (q *Queries) CreateIdempotencyKey(ctx context.Context, db DBTX, arg CreateIdempotencyKeyParams) (bool, error) {
	row := db.QueryRow(ctx, createIdempotencyKey, arg.Tenantid, arg.Key, arg.Expiresat)
	var already_existed bool
	err := row.Scan(&already_existed)
	return already_existed, err
}
