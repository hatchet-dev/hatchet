// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: idempotency-keys.sql

package sqlcv1

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const claimIdempotencyKeys = `-- name: ClaimIdempotencyKeys :many
WITH inputs AS (
    SELECT
        UNNEST($1::TEXT[]) AS key,
        UNNEST($2::UUID[]) AS claimed_by_external_id
), claims AS (
    UPDATE v1_idempotency_key k
    SET
        claimed_by_external_id = i.claimed_by_external_id,
        updated_at = NOW()
    FROM inputs i
    WHERE
        k.tenant_id = $3::UUID
        AND k.key = i.key
        AND k.claimed_by_external_id IS NULL
    RETURNING k.key, k.claimed_by_external_id
)

SELECT key::TEXT AS key, key NOT IN (
    SELECT key
    FROM claims
) AS was_already_claimed
FROM inputs
`

type ClaimIdempotencyKeysParams struct {
	Keys                 []string      `json:"keys"`
	Claimedbyexternalids []pgtype.UUID `json:"claimedbyexternalids"`
	Tenantid             pgtype.UUID   `json:"tenantid"`
}

type ClaimIdempotencyKeysRow struct {
	Key               string      `json:"key"`
	WasAlreadyClaimed pgtype.Bool `json:"was_already_claimed"`
}

func (q *Queries) ClaimIdempotencyKeys(ctx context.Context, db DBTX, arg ClaimIdempotencyKeysParams) ([]*ClaimIdempotencyKeysRow, error) {
	rows, err := db.Query(ctx, claimIdempotencyKeys, arg.Keys, arg.Claimedbyexternalids, arg.Tenantid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ClaimIdempotencyKeysRow
	for rows.Next() {
		var i ClaimIdempotencyKeysRow
		if err := rows.Scan(&i.Key, &i.WasAlreadyClaimed); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const cleanUpExpiredIdempotencyKeys = `-- name: CleanUpExpiredIdempotencyKeys :exec
DELETE FROM v1_idempotency_key
WHERE
    tenant_id = ANY($1::UUID[])
    AND expires_at < (NOW() - INTERVAL '1 minute')
`

func (q *Queries) CleanUpExpiredIdempotencyKeys(ctx context.Context, db DBTX, tenantids []pgtype.UUID) error {
	_, err := db.Exec(ctx, cleanUpExpiredIdempotencyKeys, tenantids)
	return err
}

const createIdempotencyKey = `-- name: CreateIdempotencyKey :exec
INSERT INTO v1_idempotency_key (
    tenant_id,
    key,
    expires_at
)
VALUES (
    $1::UUID,
    $2::TEXT,
    $3::TIMESTAMPTZ
)
RETURNING tenant_id, key, expires_at, claimed_by_external_id, inserted_at, updated_at
`

type CreateIdempotencyKeyParams struct {
	Tenantid  pgtype.UUID        `json:"tenantid"`
	Key       string             `json:"key"`
	Expiresat pgtype.Timestamptz `json:"expiresat"`
}

func (q *Queries) CreateIdempotencyKey(ctx context.Context, db DBTX, arg CreateIdempotencyKeyParams) error {
	_, err := db.Exec(ctx, createIdempotencyKey, arg.Tenantid, arg.Key, arg.Expiresat)
	return err
}
