// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: idempotency-keys.sql

package sqlcv1

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIdempotencyKey = `-- name: CreateIdempotencyKey :one
INSERT INTO v1_idempotency_key (
    tenant_id,
    key,
    expires_at
)
VALUES (
    $1::UUID,
    $2::TEXT,
    $3::TIMESTAMPTZ
)
RETURNING tenant_id, key, is_filled, expires_at, inserted_at, updated_at
`

type CreateIdempotencyKeyParams struct {
	Tenantid  pgtype.UUID        `json:"tenantid"`
	Key       string             `json:"key"`
	Expiresat pgtype.Timestamptz `json:"expiresat"`
}

func (q *Queries) CreateIdempotencyKey(ctx context.Context, db DBTX, arg CreateIdempotencyKeyParams) (*V1IdempotencyKey, error) {
	row := db.QueryRow(ctx, createIdempotencyKey, arg.Tenantid, arg.Key, arg.Expiresat)
	var i V1IdempotencyKey
	err := row.Scan(
		&i.TenantID,
		&i.Key,
		&i.IsFilled,
		&i.ExpiresAt,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const markIdempotencyKeyFilled = `-- name: MarkIdempotencyKeyFilled :exec
UPDATE v1_idempotency_key
SET is_filled = TRUE,
    updated_at = CURRENT_TIMESTAMP
WHERE tenant_id = $1::UUID
  AND key = $2::TEXT
`

type MarkIdempotencyKeyFilledParams struct {
	Tenantid pgtype.UUID `json:"tenantid"`
	Key      string      `json:"key"`
}

func (q *Queries) MarkIdempotencyKeyFilled(ctx context.Context, db DBTX, arg MarkIdempotencyKeyFilledParams) error {
	_, err := db.Exec(ctx, markIdempotencyKeyFilled, arg.Tenantid, arg.Key)
	return err
}
