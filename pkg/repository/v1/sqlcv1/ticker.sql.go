// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: ticker.sql

package sqlcv1

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const isTenantAlertActive = `-- name: IsTenantAlertActive :one
WITH active_setting AS (
    SELECT
        1
    FROM
        "TenantAlertingSettings" as alerts
    WHERE
        "tenantId" = $1::uuid AND
        (
            "lastAlertedAt" IS NULL OR
            "lastAlertedAt" <= NOW() - convert_duration_to_interval(alerts."maxFrequency")
        )
)
SELECT
    EXISTS (
        select 1 from active_setting
    ) as "isActive",
    "lastAlertedAt" as "lastAlertedAt"
FROM
    "TenantAlertingSettings" as alerts
WHERE
    "tenantId" = $1::uuid
`

type IsTenantAlertActiveRow struct {
	IsActive      bool             `json:"isActive"`
	LastAlertedAt pgtype.Timestamp `json:"lastAlertedAt"`
}

func (q *Queries) IsTenantAlertActive(ctx context.Context, db DBTX, tenantid pgtype.UUID) (*IsTenantAlertActiveRow, error) {
	row := db.QueryRow(ctx, isTenantAlertActive, tenantid)
	var i IsTenantAlertActiveRow
	err := row.Scan(&i.IsActive, &i.LastAlertedAt)
	return &i, err
}
