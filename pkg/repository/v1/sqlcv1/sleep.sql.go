// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: sleep.sql

package sqlcv1

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDurableSleep = `-- name: CreateDurableSleep :many
WITH input AS (
    SELECT
        sleep_duration
    FROM (
        SELECT
            unnest($2::text[]) as sleep_duration
    ) as subquery
)
INSERT INTO
    v1_durable_sleep (tenant_id, sleep_until)
SELECT
    $1::uuid,
    CURRENT_TIMESTAMP + convert_duration_to_interval(sleep_duration)
FROM
    input
RETURNING id, tenant_id, sleep_until
`

type CreateDurableSleepParams struct {
	TenantID       pgtype.UUID `json:"tenant_id"`
	SleepDurations []string    `json:"sleep_durations"`
}

func (q *Queries) CreateDurableSleep(ctx context.Context, db DBTX, arg CreateDurableSleepParams) ([]*V1DurableSleep, error) {
	rows, err := db.Query(ctx, createDurableSleep, arg.TenantID, arg.SleepDurations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*V1DurableSleep
	for rows.Next() {
		var i V1DurableSleep
		if err := rows.Scan(&i.ID, &i.TenantID, &i.SleepUntil); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
