// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: tasks.sql

package sqlcv2

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateTasksParams struct {
	TenantID        pgtype.UUID        `json:"tenant_id"`
	Queue           string             `json:"queue"`
	ActionID        string             `json:"action_id"`
	StepID          pgtype.UUID        `json:"step_id"`
	ScheduleTimeout string             `json:"schedule_timeout"`
	StepTimeout     pgtype.Text        `json:"step_timeout"`
	Priority        pgtype.Int4        `json:"priority"`
	Sticky          NullStickyStrategy `json:"sticky"`
	DesiredWorkerID pgtype.UUID        `json:"desired_worker_id"`
	ExternalID      pgtype.UUID        `json:"external_id"`
	DisplayName     string             `json:"display_name"`
	Input           []byte             `json:"input"`
	RetryCount      int32              `json:"retry_count"`
}

const listTasks = `-- name: ListTasks :many
SELECT
    id, tenant_id, queue, action_id, step_id, schedule_timeout, step_timeout, priority, sticky, desired_worker_id, external_id, display_name, input, retry_count
FROM
    v2_task
WHERE
    tenant_id = $1
    AND id = ANY($2::bigint[])
`

type ListTasksParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Ids      []int64     `json:"ids"`
}

func (q *Queries) ListTasks(ctx context.Context, db DBTX, arg ListTasksParams) ([]*V2Task, error) {
	rows, err := db.Query(ctx, listTasks, arg.TenantID, arg.Ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*V2Task
	for rows.Next() {
		var i V2Task
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Queue,
			&i.ActionID,
			&i.StepID,
			&i.ScheduleTimeout,
			&i.StepTimeout,
			&i.Priority,
			&i.Sticky,
			&i.DesiredWorkerID,
			&i.ExternalID,
			&i.DisplayName,
			&i.Input,
			&i.RetryCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const releaseQueueItems = `-- name: ReleaseQueueItems :exec
WITH delete_sqi AS (
    DELETE FROM
        v2_semaphore_queue_item sqi
    WHERE
        sqi.task_id = $1 AND
        sqi.retry_count = $2 AND
        sqi.tenant_id = $3
)
DELETE FROM
    v2_timeout_queue_item tqi
WHERE
    tqi.task_id = $1 AND
    tqi.retry_count = $2 AND
    tqi.tenant_id = $3
`

type ReleaseQueueItemsParams struct {
	TaskID     int64       `json:"task_id"`
	RetryCount int32       `json:"retry_count"`
	TenantID   pgtype.UUID `json:"tenant_id"`
}

// TODO: PROCESS THIS IN BULK?
func (q *Queries) ReleaseQueueItems(ctx context.Context, db DBTX, arg ReleaseQueueItemsParams) error {
	_, err := db.Exec(ctx, releaseQueueItems, arg.TaskID, arg.RetryCount, arg.TenantID)
	return err
}
