// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: copyfrom.go

package sqlcv2

import (
	"context"
)

// iteratorForCreateDAGData implements pgx.CopyFromSource.
type iteratorForCreateDAGData struct {
	rows                 []CreateDAGDataParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDAGData) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDAGData) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].DagID,
		r.rows[0].DagInsertedAt,
		r.rows[0].Input,
		r.rows[0].AdditionalMetadata,
	}, nil
}

func (r iteratorForCreateDAGData) Err() error {
	return nil
}

func (q *Queries) CreateDAGData(ctx context.Context, db DBTX, arg []CreateDAGDataParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"v2_dag_data"}, []string{"dag_id", "dag_inserted_at", "input", "additional_metadata"}, &iteratorForCreateDAGData{rows: arg})
}

// iteratorForCreateMatchConditions implements pgx.CopyFromSource.
type iteratorForCreateMatchConditions struct {
	rows                 []CreateMatchConditionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateMatchConditions) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateMatchConditions) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].V2MatchID,
		r.rows[0].TenantID,
		r.rows[0].EventType,
		r.rows[0].EventKey,
		r.rows[0].OrGroupID,
		r.rows[0].Expression,
		r.rows[0].Action,
	}, nil
}

func (r iteratorForCreateMatchConditions) Err() error {
	return nil
}

func (q *Queries) CreateMatchConditions(ctx context.Context, db DBTX, arg []CreateMatchConditionsParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"v2_match_condition"}, []string{"v2_match_id", "tenant_id", "event_type", "event_key", "or_group_id", "expression", "action"}, &iteratorForCreateMatchConditions{rows: arg})
}
