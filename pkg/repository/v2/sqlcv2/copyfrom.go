// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: copyfrom.go

package sqlcv2

import (
	"context"
)

// iteratorForCreateTasks implements pgx.CopyFromSource.
type iteratorForCreateTasks struct {
	rows                 []CreateTasksParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTasks) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTasks) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TenantID,
		r.rows[0].Queue,
		r.rows[0].ActionID,
		r.rows[0].StepID,
		r.rows[0].ScheduleTimeout,
		r.rows[0].StepTimeout,
		r.rows[0].Priority,
		r.rows[0].Sticky,
		r.rows[0].DesiredWorkerID,
		r.rows[0].ExternalID,
		r.rows[0].DisplayName,
		r.rows[0].Input,
		r.rows[0].RetryCount,
	}, nil
}

func (r iteratorForCreateTasks) Err() error {
	return nil
}

func (q *Queries) CreateTasks(ctx context.Context, db DBTX, arg []CreateTasksParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"v2_task"}, []string{"tenant_id", "queue", "action_id", "step_id", "schedule_timeout", "step_timeout", "priority", "sticky", "desired_worker_id", "external_id", "display_name", "input", "retry_count"}, &iteratorForCreateTasks{rows: arg})
}
