// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: copyfrom.go

package timescalev2

import (
	"context"
)

// iteratorForCreateDAGsOLAP implements pgx.CopyFromSource.
type iteratorForCreateDAGsOLAP struct {
	rows                 []CreateDAGsOLAPParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDAGsOLAP) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDAGsOLAP) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TenantID,
		r.rows[0].ID,
		r.rows[0].InsertedAt,
		r.rows[0].ExternalID,
		r.rows[0].DisplayName,
		r.rows[0].WorkflowID,
		r.rows[0].WorkflowVersionID,
		r.rows[0].Input,
		r.rows[0].AdditionalMetadata,
	}, nil
}

func (r iteratorForCreateDAGsOLAP) Err() error {
	return nil
}

func (q *Queries) CreateDAGsOLAP(ctx context.Context, db DBTX, arg []CreateDAGsOLAPParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"v2_dags_olap"}, []string{"tenant_id", "id", "inserted_at", "external_id", "display_name", "workflow_id", "workflow_version_id", "input", "additional_metadata"}, &iteratorForCreateDAGsOLAP{rows: arg})
}

// iteratorForCreateTaskEventsOLAP implements pgx.CopyFromSource.
type iteratorForCreateTaskEventsOLAP struct {
	rows                 []CreateTaskEventsOLAPParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTaskEventsOLAP) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTaskEventsOLAP) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TenantID,
		r.rows[0].TaskID,
		r.rows[0].TaskInsertedAt,
		r.rows[0].EventType,
		r.rows[0].WorkflowID,
		r.rows[0].EventTimestamp,
		r.rows[0].ReadableStatus,
		r.rows[0].RetryCount,
		r.rows[0].ErrorMessage,
		r.rows[0].Output,
		r.rows[0].WorkerID,
		r.rows[0].AdditionalEventData,
		r.rows[0].AdditionalEventMessage,
	}, nil
}

func (r iteratorForCreateTaskEventsOLAP) Err() error {
	return nil
}

func (q *Queries) CreateTaskEventsOLAP(ctx context.Context, db DBTX, arg []CreateTaskEventsOLAPParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"v2_task_events_olap"}, []string{"tenant_id", "task_id", "task_inserted_at", "event_type", "workflow_id", "event_timestamp", "readable_status", "retry_count", "error_message", "output", "worker_id", "additional__event_data", "additional__event_message"}, &iteratorForCreateTaskEventsOLAP{rows: arg})
}

// iteratorForCreateTaskEventsOLAPTmp implements pgx.CopyFromSource.
type iteratorForCreateTaskEventsOLAPTmp struct {
	rows                 []CreateTaskEventsOLAPTmpParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTaskEventsOLAPTmp) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTaskEventsOLAPTmp) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TenantID,
		r.rows[0].TaskID,
		r.rows[0].TaskInsertedAt,
		r.rows[0].EventType,
		r.rows[0].ReadableStatus,
		r.rows[0].RetryCount,
		r.rows[0].WorkerID,
	}, nil
}

func (r iteratorForCreateTaskEventsOLAPTmp) Err() error {
	return nil
}

func (q *Queries) CreateTaskEventsOLAPTmp(ctx context.Context, db DBTX, arg []CreateTaskEventsOLAPTmpParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"v2_task_events_olap_tmp"}, []string{"tenant_id", "task_id", "task_inserted_at", "event_type", "readable_status", "retry_count", "worker_id"}, &iteratorForCreateTaskEventsOLAPTmp{rows: arg})
}

// iteratorForCreateTasksOLAP implements pgx.CopyFromSource.
type iteratorForCreateTasksOLAP struct {
	rows                 []CreateTasksOLAPParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTasksOLAP) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTasksOLAP) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TenantID,
		r.rows[0].ID,
		r.rows[0].InsertedAt,
		r.rows[0].Queue,
		r.rows[0].ActionID,
		r.rows[0].StepID,
		r.rows[0].WorkflowID,
		r.rows[0].ScheduleTimeout,
		r.rows[0].StepTimeout,
		r.rows[0].Priority,
		r.rows[0].Sticky,
		r.rows[0].DesiredWorkerID,
		r.rows[0].ExternalID,
		r.rows[0].DisplayName,
		r.rows[0].Input,
		r.rows[0].AdditionalMetadata,
		r.rows[0].DagID,
		r.rows[0].DagInsertedAt,
	}, nil
}

func (r iteratorForCreateTasksOLAP) Err() error {
	return nil
}

func (q *Queries) CreateTasksOLAP(ctx context.Context, db DBTX, arg []CreateTasksOLAPParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"v2_tasks_olap"}, []string{"tenant_id", "id", "inserted_at", "queue", "action_id", "step_id", "workflow_id", "schedule_timeout", "step_timeout", "priority", "sticky", "desired_worker_id", "external_id", "display_name", "input", "additional_metadata", "dag_id", "dag_inserted_at"}, &iteratorForCreateTasksOLAP{rows: arg})
}
