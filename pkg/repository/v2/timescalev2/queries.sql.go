// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package timescalev2

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateTaskEventsOLAPParams struct {
	TenantID               pgtype.UUID          `json:"tenant_id"`
	TaskID                 int64                `json:"task_id"`
	TaskInsertedAt         pgtype.Timestamptz   `json:"task_inserted_at"`
	EventType              V2EventTypeOlap      `json:"event_type"`
	EventTimestamp         pgtype.Timestamptz   `json:"event_timestamp"`
	ReadableStatus         V2ReadableStatusOlap `json:"readable_status"`
	RetryCount             int32                `json:"retry_count"`
	ErrorMessage           pgtype.Text          `json:"error_message"`
	Output                 []byte               `json:"output"`
	WorkerID               pgtype.UUID          `json:"worker_id"`
	AdditionalEventData    pgtype.Text          `json:"additional__event_data"`
	AdditionalEventMessage pgtype.Text          `json:"additional__event_message"`
}

type CreateTasksOLAPParams struct {
	TenantID        pgtype.UUID          `json:"tenant_id"`
	ID              int64                `json:"id"`
	InsertedAt      pgtype.Timestamptz   `json:"inserted_at"`
	Queue           string               `json:"queue"`
	ActionID        string               `json:"action_id"`
	StepID          pgtype.UUID          `json:"step_id"`
	WorkflowID      pgtype.UUID          `json:"workflow_id"`
	ScheduleTimeout string               `json:"schedule_timeout"`
	StepTimeout     pgtype.Text          `json:"step_timeout"`
	Priority        pgtype.Int4          `json:"priority"`
	Sticky          V2StickyStrategyOlap `json:"sticky"`
	DesiredWorkerID pgtype.UUID          `json:"desired_worker_id"`
	ExternalID      pgtype.UUID          `json:"external_id"`
	DisplayName     string               `json:"display_name"`
	Input           []byte               `json:"input"`
}

const getTenantStatusMetrics = `-- name: GetTenantStatusMetrics :one
SELECT
  COALESCE(SUM(queued_count), 0)::bigint AS total_queued,
  COALESCE(SUM(running_count), 0)::bigint AS total_running,
  COALESCE(SUM(completed_count), 0)::bigint AS total_completed,
  COALESCE(SUM(cancelled_count), 0)::bigint AS total_cancelled,
  COALESCE(SUM(failed_count), 0)::bigint AS total_failed
FROM v2_cagg_status_metrics
WHERE 
    tenant_id = $1::uuid
    AND bucket_2 >= $2::timestamptz
`

type GetTenantStatusMetricsParams struct {
	Tenantid     pgtype.UUID        `json:"tenantid"`
	Createdafter pgtype.Timestamptz `json:"createdafter"`
}

type GetTenantStatusMetricsRow struct {
	TotalQueued    int64 `json:"total_queued"`
	TotalRunning   int64 `json:"total_running"`
	TotalCompleted int64 `json:"total_completed"`
	TotalCancelled int64 `json:"total_cancelled"`
	TotalFailed    int64 `json:"total_failed"`
}

func (q *Queries) GetTenantStatusMetrics(ctx context.Context, db DBTX, arg GetTenantStatusMetricsParams) (*GetTenantStatusMetricsRow, error) {
	row := db.QueryRow(ctx, getTenantStatusMetrics, arg.Tenantid, arg.Createdafter)
	var i GetTenantStatusMetricsRow
	err := row.Scan(
		&i.TotalQueued,
		&i.TotalRunning,
		&i.TotalCompleted,
		&i.TotalCancelled,
		&i.TotalFailed,
	)
	return &i, err
}

const listTaskEvents = `-- name: ListTaskEvents :many
WITH aggregated_events AS (
  SELECT
    tenant_id,
    task_id,
    task_inserted_at,
    retry_count,
    event_type,
    MIN(event_timestamp) AS time_first_seen,
    MAX(event_timestamp) AS time_last_seen,
    COUNT(*) AS count,
    MIN(id) AS first_id
  FROM v2_task_events_olap
  WHERE 
    tenant_id = $1::uuid
    AND task_id = $2::bigint
    AND task_inserted_at = $3::timestamptz
  GROUP BY tenant_id, task_id, task_inserted_at, retry_count, event_type
)
SELECT
  a.tenant_id,
  a.task_id,
  a.task_inserted_at,
  a.retry_count,
  a.event_type,
  a.time_first_seen,
  a.time_last_seen,
  a.count,
  t.id,
  t.event_timestamp,
  t.readable_status,
  t.error_message,
  t.output,
  t.worker_id,
  t.additional__event_data,
  t.additional__event_message
FROM aggregated_events a
JOIN v2_task_events_olap t
  ON t.tenant_id = a.tenant_id
  AND t.task_id = a.task_id
  AND t.task_inserted_at = a.task_inserted_at
  AND t.id = a.first_id
ORDER BY a.time_first_seen
`

type ListTaskEventsParams struct {
	Tenantid       pgtype.UUID        `json:"tenantid"`
	Taskid         int64              `json:"taskid"`
	Taskinsertedat pgtype.Timestamptz `json:"taskinsertedat"`
}

type ListTaskEventsRow struct {
	TenantID               pgtype.UUID          `json:"tenant_id"`
	TaskID                 int64                `json:"task_id"`
	TaskInsertedAt         pgtype.Timestamptz   `json:"task_inserted_at"`
	RetryCount             int32                `json:"retry_count"`
	EventType              V2EventTypeOlap      `json:"event_type"`
	TimeFirstSeen          interface{}          `json:"time_first_seen"`
	TimeLastSeen           interface{}          `json:"time_last_seen"`
	Count                  int64                `json:"count"`
	ID                     int64                `json:"id"`
	EventTimestamp         pgtype.Timestamptz   `json:"event_timestamp"`
	ReadableStatus         V2ReadableStatusOlap `json:"readable_status"`
	ErrorMessage           pgtype.Text          `json:"error_message"`
	Output                 []byte               `json:"output"`
	WorkerID               pgtype.UUID          `json:"worker_id"`
	AdditionalEventData    pgtype.Text          `json:"additional__event_data"`
	AdditionalEventMessage pgtype.Text          `json:"additional__event_message"`
}

func (q *Queries) ListTaskEvents(ctx context.Context, db DBTX, arg ListTaskEventsParams) ([]*ListTaskEventsRow, error) {
	rows, err := db.Query(ctx, listTaskEvents, arg.Tenantid, arg.Taskid, arg.Taskinsertedat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListTaskEventsRow
	for rows.Next() {
		var i ListTaskEventsRow
		if err := rows.Scan(
			&i.TenantID,
			&i.TaskID,
			&i.TaskInsertedAt,
			&i.RetryCount,
			&i.EventType,
			&i.TimeFirstSeen,
			&i.TimeLastSeen,
			&i.Count,
			&i.ID,
			&i.EventTimestamp,
			&i.ReadableStatus,
			&i.ErrorMessage,
			&i.Output,
			&i.WorkerID,
			&i.AdditionalEventData,
			&i.AdditionalEventMessage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
WITH task_statuses AS (
    SELECT 
        s.tenant_id::uuid as tenant_id,
        s.task_id::bigint as id,
        s.task_inserted_at::timestamptz as inserted_at,
        s.status::v2_readable_status_olap as status,
        s.max_retry_count::int as max_retry_count,
        t.external_id as external_id,
        t.queue as queue,
        t.action_id as action_id,
        t.step_id as step_id,
        t.workflow_id as workflow_id,
        t.schedule_timeout as schedule_timeout,
        t.step_timeout as step_timeout,
        t.priority as priority,
        t.sticky as sticky,
        t.display_name as display_name
    FROM 
        v2_cagg_task_status s
    JOIN
        v2_tasks_olap t ON t.tenant_id = s.tenant_id AND t.id = s.task_id AND t.inserted_at = s.task_inserted_at
    WHERE
        s.tenant_id = $1::uuid
        AND bucket >= $2::timestamptz
    ORDER BY bucket DESC, s.task_inserted_at DESC, s.task_id DESC
    LIMIT 50
), finished_ats AS (
    SELECT
        e.task_id::bigint,
        MAX(e.event_timestamp) AS finished_at
    FROM
        v2_task_events_olap e
    JOIN    
        task_statuses ts ON ts.id = e.task_id AND ts.tenant_id = e.tenant_id AND ts.inserted_at = e.task_inserted_at AND ts.max_retry_count = e.retry_count
    WHERE
        e.readable_status = ANY(ARRAY['COMPLETED', 'FAILED', 'CANCELLED']::v2_readable_status_olap[])
    GROUP BY e.task_id
), started_ats AS (
    SELECT
        e.task_id::bigint,
        MAX(e.event_timestamp) AS started_at
    FROM
        v2_task_events_olap e
    JOIN    
        task_statuses ts ON ts.id = e.task_id AND ts.tenant_id = e.tenant_id AND ts.inserted_at = e.task_inserted_at AND ts.max_retry_count = e.retry_count
    WHERE
        e.event_type = 'STARTED'
    GROUP BY e.task_id
)
SELECT
    ts.tenant_id,
    ts.id,
    ts.inserted_at,
    ts.external_id,
    ts.queue,
    ts.action_id,
    ts.step_id,
    ts.workflow_id,
    ts.schedule_timeout,
    ts.step_timeout,
    ts.priority,
    ts.sticky,
    ts.display_name,
    ts.status::v2_readable_status_olap as status,
    f.finished_at::timestamptz as finished_at,
    s.started_at::timestamptz as started_at
FROM
    task_statuses ts
LEFT JOIN
    finished_ats f ON f.task_id = ts.id
LEFT JOIN
    started_ats s ON s.task_id = ts.id
ORDER BY ts.inserted_at DESC, ts.id DESC
`

type ListTasksParams struct {
	Tenantid     pgtype.UUID        `json:"tenantid"`
	Createdafter pgtype.Timestamptz `json:"createdafter"`
}

type ListTasksRow struct {
	TenantID        pgtype.UUID          `json:"tenant_id"`
	ID              int64                `json:"id"`
	InsertedAt      pgtype.Timestamptz   `json:"inserted_at"`
	ExternalID      pgtype.UUID          `json:"external_id"`
	Queue           string               `json:"queue"`
	ActionID        string               `json:"action_id"`
	StepID          pgtype.UUID          `json:"step_id"`
	WorkflowID      pgtype.UUID          `json:"workflow_id"`
	ScheduleTimeout string               `json:"schedule_timeout"`
	StepTimeout     pgtype.Text          `json:"step_timeout"`
	Priority        pgtype.Int4          `json:"priority"`
	Sticky          V2StickyStrategyOlap `json:"sticky"`
	DisplayName     string               `json:"display_name"`
	Status          V2ReadableStatusOlap `json:"status"`
	FinishedAt      pgtype.Timestamptz   `json:"finished_at"`
	StartedAt       pgtype.Timestamptz   `json:"started_at"`
}

func (q *Queries) ListTasks(ctx context.Context, db DBTX, arg ListTasksParams) ([]*ListTasksRow, error) {
	rows, err := db.Query(ctx, listTasks, arg.Tenantid, arg.Createdafter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListTasksRow
	for rows.Next() {
		var i ListTasksRow
		if err := rows.Scan(
			&i.TenantID,
			&i.ID,
			&i.InsertedAt,
			&i.ExternalID,
			&i.Queue,
			&i.ActionID,
			&i.StepID,
			&i.WorkflowID,
			&i.ScheduleTimeout,
			&i.StepTimeout,
			&i.Priority,
			&i.Sticky,
			&i.DisplayName,
			&i.Status,
			&i.FinishedAt,
			&i.StartedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readTaskByExternalID = `-- name: ReadTaskByExternalID :one
WITH lookup_task AS (
    SELECT
        tenant_id,
        task_id,
        inserted_at
    FROM
        v2_task_lookup_table
    WHERE
        external_id = $1::uuid
)
SELECT
    t.tenant_id, t.id, t.inserted_at, t.external_id, t.queue, t.action_id, t.step_id, t.workflow_id, t.schedule_timeout, t.step_timeout, t.priority, t.sticky, t.desired_worker_id, t.display_name, t.input
FROM
    v2_tasks_olap t
JOIN
    lookup_task lt ON lt.tenant_id = t.tenant_id AND lt.task_id = t.id AND lt.inserted_at = t.inserted_at
`

func (q *Queries) ReadTaskByExternalID(ctx context.Context, db DBTX, externalid pgtype.UUID) (*V2TasksOlap, error) {
	row := db.QueryRow(ctx, readTaskByExternalID, externalid)
	var i V2TasksOlap
	err := row.Scan(
		&i.TenantID,
		&i.ID,
		&i.InsertedAt,
		&i.ExternalID,
		&i.Queue,
		&i.ActionID,
		&i.StepID,
		&i.WorkflowID,
		&i.ScheduleTimeout,
		&i.StepTimeout,
		&i.Priority,
		&i.Sticky,
		&i.DesiredWorkerID,
		&i.DisplayName,
		&i.Input,
	)
	return &i, err
}
