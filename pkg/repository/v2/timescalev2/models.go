// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package timescalev2

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type V2EventTypeOlap string

const (
	V2EventTypeOlapRETRYING           V2EventTypeOlap = "RETRYING"
	V2EventTypeOlapREASSIGNED         V2EventTypeOlap = "REASSIGNED"
	V2EventTypeOlapRETRIEDBYUSER      V2EventTypeOlap = "RETRIED_BY_USER"
	V2EventTypeOlapCREATED            V2EventTypeOlap = "CREATED"
	V2EventTypeOlapQUEUED             V2EventTypeOlap = "QUEUED"
	V2EventTypeOlapREQUEUEDNOWORKER   V2EventTypeOlap = "REQUEUED_NO_WORKER"
	V2EventTypeOlapREQUEUEDRATELIMIT  V2EventTypeOlap = "REQUEUED_RATE_LIMIT"
	V2EventTypeOlapASSIGNED           V2EventTypeOlap = "ASSIGNED"
	V2EventTypeOlapACKNOWLEDGED       V2EventTypeOlap = "ACKNOWLEDGED"
	V2EventTypeOlapSENTTOWORKER       V2EventTypeOlap = "SENT_TO_WORKER"
	V2EventTypeOlapSLOTRELEASED       V2EventTypeOlap = "SLOT_RELEASED"
	V2EventTypeOlapSTARTED            V2EventTypeOlap = "STARTED"
	V2EventTypeOlapTIMEOUTREFRESHED   V2EventTypeOlap = "TIMEOUT_REFRESHED"
	V2EventTypeOlapSCHEDULINGTIMEDOUT V2EventTypeOlap = "SCHEDULING_TIMED_OUT"
	V2EventTypeOlapFINISHED           V2EventTypeOlap = "FINISHED"
	V2EventTypeOlapFAILED             V2EventTypeOlap = "FAILED"
	V2EventTypeOlapCANCELLED          V2EventTypeOlap = "CANCELLED"
	V2EventTypeOlapTIMEDOUT           V2EventTypeOlap = "TIMED_OUT"
	V2EventTypeOlapRATELIMITERROR     V2EventTypeOlap = "RATE_LIMIT_ERROR"
)

func (e *V2EventTypeOlap) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = V2EventTypeOlap(s)
	case string:
		*e = V2EventTypeOlap(s)
	default:
		return fmt.Errorf("unsupported scan type for V2EventTypeOlap: %T", src)
	}
	return nil
}

type NullV2EventTypeOlap struct {
	V2EventTypeOlap V2EventTypeOlap `json:"v2_event_type_olap"`
	Valid           bool            `json:"valid"` // Valid is true if V2EventTypeOlap is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullV2EventTypeOlap) Scan(value interface{}) error {
	if value == nil {
		ns.V2EventTypeOlap, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.V2EventTypeOlap.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullV2EventTypeOlap) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.V2EventTypeOlap), nil
}

type V2ReadableStatusOlap string

const (
	V2ReadableStatusOlapQUEUED    V2ReadableStatusOlap = "QUEUED"
	V2ReadableStatusOlapRUNNING   V2ReadableStatusOlap = "RUNNING"
	V2ReadableStatusOlapCOMPLETED V2ReadableStatusOlap = "COMPLETED"
	V2ReadableStatusOlapCANCELLED V2ReadableStatusOlap = "CANCELLED"
	V2ReadableStatusOlapFAILED    V2ReadableStatusOlap = "FAILED"
)

func (e *V2ReadableStatusOlap) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = V2ReadableStatusOlap(s)
	case string:
		*e = V2ReadableStatusOlap(s)
	default:
		return fmt.Errorf("unsupported scan type for V2ReadableStatusOlap: %T", src)
	}
	return nil
}

type NullV2ReadableStatusOlap struct {
	V2ReadableStatusOlap V2ReadableStatusOlap `json:"v2_readable_status_olap"`
	Valid                bool                 `json:"valid"` // Valid is true if V2ReadableStatusOlap is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullV2ReadableStatusOlap) Scan(value interface{}) error {
	if value == nil {
		ns.V2ReadableStatusOlap, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.V2ReadableStatusOlap.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullV2ReadableStatusOlap) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.V2ReadableStatusOlap), nil
}

type V2StickyStrategyOlap string

const (
	V2StickyStrategyOlapNONE V2StickyStrategyOlap = "NONE"
	V2StickyStrategyOlapSOFT V2StickyStrategyOlap = "SOFT"
	V2StickyStrategyOlapHARD V2StickyStrategyOlap = "HARD"
)

func (e *V2StickyStrategyOlap) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = V2StickyStrategyOlap(s)
	case string:
		*e = V2StickyStrategyOlap(s)
	default:
		return fmt.Errorf("unsupported scan type for V2StickyStrategyOlap: %T", src)
	}
	return nil
}

type NullV2StickyStrategyOlap struct {
	V2StickyStrategyOlap V2StickyStrategyOlap `json:"v2_sticky_strategy_olap"`
	Valid                bool                 `json:"valid"` // Valid is true if V2StickyStrategyOlap is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullV2StickyStrategyOlap) Scan(value interface{}) error {
	if value == nil {
		ns.V2StickyStrategyOlap, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.V2StickyStrategyOlap.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullV2StickyStrategyOlap) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.V2StickyStrategyOlap), nil
}

type TimescaledbInformationContinuousAggregates struct {
	MaterializationHypertableName string `json:"materialization_hypertable_name"`
}

type TimescaledbInformationJobHistory struct {
	JobID     int64            `json:"job_id"`
	StartTime pgtype.Timestamp `json:"start_time"`
	Succeeded bool             `json:"succeeded"`
}

type TimescaledbInformationJobStats struct {
	JobID                int64            `json:"job_id"`
	LastSuccessfulFinish pgtype.Timestamp `json:"last_successful_finish"`
}

type TimescaledbInformationJobs struct {
	JobID          int64  `json:"job_id"`
	HypertableName string `json:"hypertable_name"`
}

type V2CaggStatusMetrics struct {
	Bucket         interface{} `json:"bucket"`
	TenantID       pgtype.UUID `json:"tenant_id"`
	WorkflowID     pgtype.UUID `json:"workflow_id"`
	QueuedCount    int64       `json:"queued_count"`
	RunningCount   int64       `json:"running_count"`
	CompletedCount int64       `json:"completed_count"`
	CancelledCount int64       `json:"cancelled_count"`
	FailedCount    int64       `json:"failed_count"`
}

type V2CaggTaskEventsMinute struct {
	Bucket         interface{} `json:"bucket"`
	TenantID       pgtype.UUID `json:"tenant_id"`
	WorkflowID     pgtype.UUID `json:"workflow_id"`
	QueuedCount    int64       `json:"queued_count"`
	RunningCount   int64       `json:"running_count"`
	CompletedCount int64       `json:"completed_count"`
	CancelledCount int64       `json:"cancelled_count"`
	FailedCount    int64       `json:"failed_count"`
}

type V2TaskEventsOlap struct {
	TenantID               pgtype.UUID          `json:"tenant_id"`
	ID                     int64                `json:"id"`
	InsertedAt             pgtype.Timestamptz   `json:"inserted_at"`
	TaskID                 int64                `json:"task_id"`
	TaskInsertedAt         pgtype.Timestamptz   `json:"task_inserted_at"`
	EventType              V2EventTypeOlap      `json:"event_type"`
	WorkflowID             pgtype.UUID          `json:"workflow_id"`
	EventTimestamp         pgtype.Timestamptz   `json:"event_timestamp"`
	ReadableStatus         V2ReadableStatusOlap `json:"readable_status"`
	RetryCount             int32                `json:"retry_count"`
	ErrorMessage           pgtype.Text          `json:"error_message"`
	Output                 []byte               `json:"output"`
	WorkerID               pgtype.UUID          `json:"worker_id"`
	AdditionalEventData    pgtype.Text          `json:"additional__event_data"`
	AdditionalEventMessage pgtype.Text          `json:"additional__event_message"`
}

type V2TaskEventsOlapTmp struct {
	TenantID       pgtype.UUID          `json:"tenant_id"`
	RequeueAfter   pgtype.Timestamptz   `json:"requeue_after"`
	RequeueRetries int32                `json:"requeue_retries"`
	ID             int64                `json:"id"`
	TaskID         int64                `json:"task_id"`
	TaskInsertedAt pgtype.Timestamptz   `json:"task_inserted_at"`
	EventType      V2EventTypeOlap      `json:"event_type"`
	ReadableStatus V2ReadableStatusOlap `json:"readable_status"`
	RetryCount     int32                `json:"retry_count"`
	WorkerID       pgtype.UUID          `json:"worker_id"`
}

type V2TaskLookupTable struct {
	TenantID   pgtype.UUID        `json:"tenant_id"`
	ExternalID pgtype.UUID        `json:"external_id"`
	TaskID     int64              `json:"task_id"`
	InsertedAt pgtype.Timestamptz `json:"inserted_at"`
}

type V2TaskStatusesOlap struct {
	ID             int64                `json:"id"`
	InsertedAt     pgtype.Timestamptz   `json:"inserted_at"`
	TenantID       pgtype.UUID          `json:"tenant_id"`
	WorkflowID     pgtype.UUID          `json:"workflow_id"`
	ReadableStatus V2ReadableStatusOlap `json:"readable_status"`
}

type V2TasksOlap struct {
	TenantID           pgtype.UUID          `json:"tenant_id"`
	ID                 int64                `json:"id"`
	InsertedAt         pgtype.Timestamptz   `json:"inserted_at"`
	ExternalID         pgtype.UUID          `json:"external_id"`
	Queue              string               `json:"queue"`
	ActionID           string               `json:"action_id"`
	StepID             pgtype.UUID          `json:"step_id"`
	WorkflowID         pgtype.UUID          `json:"workflow_id"`
	ScheduleTimeout    string               `json:"schedule_timeout"`
	StepTimeout        pgtype.Text          `json:"step_timeout"`
	Priority           pgtype.Int4          `json:"priority"`
	Sticky             V2StickyStrategyOlap `json:"sticky"`
	DesiredWorkerID    pgtype.UUID          `json:"desired_worker_id"`
	DisplayName        string               `json:"display_name"`
	Input              []byte               `json:"input"`
	AdditionalMetadata []byte               `json:"additional_metadata"`
	ReadableStatus     V2ReadableStatusOlap `json:"readable_status"`
	LatestRetryCount   int32                `json:"latest_retry_count"`
	LatestWorkerID     pgtype.UUID          `json:"latest_worker_id"`
}
