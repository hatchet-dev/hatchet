// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: batch.go

package dbsqlc

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const listQueueItems = `-- name: ListQueueItems :batchmany
SELECT
    id, "stepRunId", "stepId", "actionId", "scheduleTimeoutAt", "stepTimeout", priority, "isQueued", "tenantId", queue, sticky, "desiredWorkerId"
FROM
    "QueueItem" qi
WHERE
    qi."isQueued" = true
    AND qi."tenantId" = $1::uuid
    AND qi."queue" = $2::text
    AND (
        $3::bigint IS NULL OR
        qi."id" >= $3::bigint
    )
    -- Added to ensure that the index is used
    AND qi."priority" >= 1 AND qi."priority" <= 4
ORDER BY
    qi."priority" DESC,
    qi."id" ASC
LIMIT
    COALESCE($4::integer, 100)
FOR UPDATE SKIP LOCKED
`

type ListQueueItemsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type ListQueueItemsParams struct {
	Tenantid pgtype.UUID `json:"tenantid"`
	Queue    string      `json:"queue"`
	GtId     pgtype.Int8 `json:"gtId"`
	Limit    pgtype.Int4 `json:"limit"`
}

func (q *Queries) ListQueueItems(ctx context.Context, db DBTX, arg []ListQueueItemsParams) *ListQueueItemsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Tenantid,
			a.Queue,
			a.GtId,
			a.Limit,
		}
		batch.Queue(listQueueItems, vals...)
	}
	br := db.SendBatch(ctx, batch)
	return &ListQueueItemsBatchResults{br, len(arg), false}
}

func (b *ListQueueItemsBatchResults) Query(f func(int, []*QueueItem, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []*QueueItem
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i QueueItem
				if err := rows.Scan(
					&i.ID,
					&i.StepRunId,
					&i.StepId,
					&i.ActionId,
					&i.ScheduleTimeoutAt,
					&i.StepTimeout,
					&i.Priority,
					&i.IsQueued,
					&i.TenantId,
					&i.Queue,
					&i.Sticky,
					&i.DesiredWorkerId,
				); err != nil {
					return err
				}
				items = append(items, &i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *ListQueueItemsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const updateStepRunBatch = `-- name: UpdateStepRunBatch :batchexec
UPDATE
    "StepRun"
SET
    "startedAt" = COALESCE($1::timestamp, "startedAt"),
    "finishedAt" = COALESCE($2::timestamp, "finishedAt"),
    "status" = CASE
        -- Final states are final, cannot be updated
        WHEN "status" IN ('SUCCEEDED', 'FAILED', 'CANCELLED') THEN "status"
        ELSE COALESCE($3, "status")
    END,
    "output" = COALESCE($4::jsonb, "output"),
    "error" = CASE
        -- Final states are final, cannot be updated
        WHEN "status" IN ('SUCCEEDED', 'FAILED', 'CANCELLED') THEN "error"
        ELSE COALESCE($5::text, "error")
    END,
    "cancelledAt" = CASE
        -- Final states are final, cannot be updated
        WHEN "status" IN ('SUCCEEDED', 'FAILED', 'CANCELLED') THEN "cancelledAt"
        ELSE COALESCE($6::timestamp, "cancelledAt")
    END,
    "cancelledReason" = CASE
        -- Final states are final, cannot be updated
        WHEN "status" IN ('SUCCEEDED', 'FAILED', 'CANCELLED') THEN "cancelledReason"
        ELSE COALESCE($7::text, "cancelledReason")
    END,
    "workerId" = CASE
        -- If in a final state, remove the worker ID
        WHEN $3 IS NOT NULL AND "status" IN ('SUCCEEDED', 'FAILED', 'CANCELLED', 'CANCELLING') THEN NULL
        ELSE "workerId"
    END
WHERE
  "id" = $8::uuid AND
  "tenantId" = $9::uuid
`

type UpdateStepRunBatchBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdateStepRunBatchParams struct {
	StartedAt       pgtype.Timestamp  `json:"startedAt"`
	FinishedAt      pgtype.Timestamp  `json:"finishedAt"`
	Status          NullStepRunStatus `json:"status"`
	Output          []byte            `json:"output"`
	Error           pgtype.Text       `json:"error"`
	CancelledAt     pgtype.Timestamp  `json:"cancelledAt"`
	CancelledReason pgtype.Text       `json:"cancelledReason"`
	ID              pgtype.UUID       `json:"id"`
	Tenantid        pgtype.UUID       `json:"tenantid"`
}

func (q *Queries) UpdateStepRunBatch(ctx context.Context, db DBTX, arg []UpdateStepRunBatchParams) *UpdateStepRunBatchBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.StartedAt,
			a.FinishedAt,
			a.Status,
			a.Output,
			a.Error,
			a.CancelledAt,
			a.CancelledReason,
			a.ID,
			a.Tenantid,
		}
		batch.Queue(updateStepRunBatch, vals...)
	}
	br := db.SendBatch(ctx, batch)
	return &UpdateStepRunBatchBatchResults{br, len(arg), false}
}

func (b *UpdateStepRunBatchBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdateStepRunBatchBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
