// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: workers.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWorker = `-- name: CreateWorker :one
INSERT INTO "Worker" (
    "id",
    "createdAt",
    "updatedAt",
    "tenantId",
    "name",
    "dispatcherId",
    "maxRuns",
    "webhookId",
    "type"
) VALUES (
    gen_random_uuid(),
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    $1::uuid,
    $2::text,
    $3::uuid,
    $4::int,
    $5::uuid,
    $6::"WorkerType"
) RETURNING id, "createdAt", "updatedAt", "deletedAt", "tenantId", "lastHeartbeatAt", name, "dispatcherId", "maxRuns", "isActive", "lastListenerEstablished", "isPaused", type, "webhookId"
`

type CreateWorkerParams struct {
	Tenantid     pgtype.UUID    `json:"tenantid"`
	Name         string         `json:"name"`
	Dispatcherid pgtype.UUID    `json:"dispatcherid"`
	MaxRuns      pgtype.Int4    `json:"maxRuns"`
	WebhookId    pgtype.UUID    `json:"webhookId"`
	Type         NullWorkerType `json:"type"`
}

func (q *Queries) CreateWorker(ctx context.Context, db DBTX, arg CreateWorkerParams) (*Worker, error) {
	row := db.QueryRow(ctx, createWorker,
		arg.Tenantid,
		arg.Name,
		arg.Dispatcherid,
		arg.MaxRuns,
		arg.WebhookId,
		arg.Type,
	)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TenantId,
		&i.LastHeartbeatAt,
		&i.Name,
		&i.DispatcherId,
		&i.MaxRuns,
		&i.IsActive,
		&i.LastListenerEstablished,
		&i.IsPaused,
		&i.Type,
		&i.WebhookId,
	)
	return &i, err
}

const deleteWorker = `-- name: DeleteWorker :one
DELETE FROM
  "Worker"
WHERE
  "id" = $1::uuid
RETURNING id, "createdAt", "updatedAt", "deletedAt", "tenantId", "lastHeartbeatAt", name, "dispatcherId", "maxRuns", "isActive", "lastListenerEstablished", "isPaused", type, "webhookId"
`

func (q *Queries) DeleteWorker(ctx context.Context, db DBTX, id pgtype.UUID) (*Worker, error) {
	row := db.QueryRow(ctx, deleteWorker, id)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TenantId,
		&i.LastHeartbeatAt,
		&i.Name,
		&i.DispatcherId,
		&i.MaxRuns,
		&i.IsActive,
		&i.LastListenerEstablished,
		&i.IsPaused,
		&i.Type,
		&i.WebhookId,
	)
	return &i, err
}

const getWorkerById = `-- name: GetWorkerById :one
SELECT
    workers.id, workers."createdAt", workers."updatedAt", workers."deletedAt", workers."tenantId", workers."lastHeartbeatAt", workers.name, workers."dispatcherId", workers."maxRuns", workers."isActive", workers."lastListenerEstablished", workers."isPaused", workers.type, workers."webhookId",
    ww."url" AS "webhookUrl"
FROM
    "Worker" workers
LEFT JOIN
    "WebhookWorker" ww ON workers."webhookId" = ww."id"
WHERE
    workers."id" = $1::uuid
`

type GetWorkerByIdRow struct {
	Worker     Worker      `json:"worker"`
	WebhookUrl pgtype.Text `json:"webhookUrl"`
}

func (q *Queries) GetWorkerById(ctx context.Context, db DBTX, id pgtype.UUID) (*GetWorkerByIdRow, error) {
	row := db.QueryRow(ctx, getWorkerById, id)
	var i GetWorkerByIdRow
	err := row.Scan(
		&i.Worker.ID,
		&i.Worker.CreatedAt,
		&i.Worker.UpdatedAt,
		&i.Worker.DeletedAt,
		&i.Worker.TenantId,
		&i.Worker.LastHeartbeatAt,
		&i.Worker.Name,
		&i.Worker.DispatcherId,
		&i.Worker.MaxRuns,
		&i.Worker.IsActive,
		&i.Worker.LastListenerEstablished,
		&i.Worker.IsPaused,
		&i.Worker.Type,
		&i.Worker.WebhookId,
		&i.WebhookUrl,
	)
	return &i, err
}

const getWorkerByWebhookId = `-- name: GetWorkerByWebhookId :one
SELECT
    id, "createdAt", "updatedAt", "deletedAt", "tenantId", "lastHeartbeatAt", name, "dispatcherId", "maxRuns", "isActive", "lastListenerEstablished", "isPaused", type, "webhookId"
FROM
    "Worker"
WHERE
    "webhookId" = $1::uuid
    AND "tenantId" = $2::uuid
`

type GetWorkerByWebhookIdParams struct {
	Webhookid pgtype.UUID `json:"webhookid"`
	Tenantid  pgtype.UUID `json:"tenantid"`
}

func (q *Queries) GetWorkerByWebhookId(ctx context.Context, db DBTX, arg GetWorkerByWebhookIdParams) (*Worker, error) {
	row := db.QueryRow(ctx, getWorkerByWebhookId, arg.Webhookid, arg.Tenantid)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TenantId,
		&i.LastHeartbeatAt,
		&i.Name,
		&i.DispatcherId,
		&i.MaxRuns,
		&i.IsActive,
		&i.LastListenerEstablished,
		&i.IsPaused,
		&i.Type,
		&i.WebhookId,
	)
	return &i, err
}

const getWorkerForEngine = `-- name: GetWorkerForEngine :one
SELECT
    w."id" AS "id",
    w."tenantId" AS "tenantId",
    w."dispatcherId" AS "dispatcherId",
    d."lastHeartbeatAt" AS "dispatcherLastHeartbeatAt",
    w."isActive" AS "isActive",
    w."lastListenerEstablished" AS "lastListenerEstablished"
FROM
    "Worker" w
LEFT JOIN
    "Dispatcher" d ON w."dispatcherId" = d."id"
WHERE
    w."tenantId" = $1
    AND w."id" = $2
`

type GetWorkerForEngineParams struct {
	Tenantid pgtype.UUID `json:"tenantid"`
	ID       pgtype.UUID `json:"id"`
}

type GetWorkerForEngineRow struct {
	ID                        pgtype.UUID      `json:"id"`
	TenantId                  pgtype.UUID      `json:"tenantId"`
	DispatcherId              pgtype.UUID      `json:"dispatcherId"`
	DispatcherLastHeartbeatAt pgtype.Timestamp `json:"dispatcherLastHeartbeatAt"`
	IsActive                  bool             `json:"isActive"`
	LastListenerEstablished   pgtype.Timestamp `json:"lastListenerEstablished"`
}

func (q *Queries) GetWorkerForEngine(ctx context.Context, db DBTX, arg GetWorkerForEngineParams) (*GetWorkerForEngineRow, error) {
	row := db.QueryRow(ctx, getWorkerForEngine, arg.Tenantid, arg.ID)
	var i GetWorkerForEngineRow
	err := row.Scan(
		&i.ID,
		&i.TenantId,
		&i.DispatcherId,
		&i.DispatcherLastHeartbeatAt,
		&i.IsActive,
		&i.LastListenerEstablished,
	)
	return &i, err
}

const linkActionsToWorker = `-- name: LinkActionsToWorker :exec
INSERT INTO "_ActionToWorker" (
    "A",
    "B"
) SELECT
    unnest($1::uuid[]),
    $2::uuid
ON CONFLICT DO NOTHING
`

type LinkActionsToWorkerParams struct {
	Actionids []pgtype.UUID `json:"actionids"`
	Workerid  pgtype.UUID   `json:"workerid"`
}

func (q *Queries) LinkActionsToWorker(ctx context.Context, db DBTX, arg LinkActionsToWorkerParams) error {
	_, err := db.Exec(ctx, linkActionsToWorker, arg.Actionids, arg.Workerid)
	return err
}

const linkServicesToWorker = `-- name: LinkServicesToWorker :exec
INSERT INTO "_ServiceToWorker" (
    "A",
    "B"
)
VALUES (
    unnest($1::uuid[]),
    $2::uuid
)
ON CONFLICT DO NOTHING
`

type LinkServicesToWorkerParams struct {
	Services []pgtype.UUID `json:"services"`
	Workerid pgtype.UUID   `json:"workerid"`
}

func (q *Queries) LinkServicesToWorker(ctx context.Context, db DBTX, arg LinkServicesToWorkerParams) error {
	_, err := db.Exec(ctx, linkServicesToWorker, arg.Services, arg.Workerid)
	return err
}

const listRecentStepRunsForWorker = `-- name: ListRecentStepRunsForWorker :many
SELECT
    sr."id" AS "id",
	s."actionId",
    sr."status" AS "status",
    sr."createdAt" AS "createdAt",
    sr."updatedAt" AS "updatedAt",
    sr."finishedAt" AS "finishedAt",
    sr."cancelledAt" AS "cancelledAt",
    sr."timeoutAt" AS "timeoutAt",
    sr."startedAt" AS "startedAt",
    jr."workflowRunId" AS "workflowRunId"
FROM
    "StepRun" sr
JOIN
    "JobRun" jr ON sr."jobRunId" = jr."id"
JOIN
	"Step" s ON sr."stepId" = s."id"
WHERE
    sr."workerId" = $1::uuid
    and sr."status" = ANY(cast($2::text[] as "StepRunStatus"[]))
    AND sr."tenantId" = $3::uuid
ORDER BY
    sr."startedAt" DESC
LIMIT 15
`

type ListRecentStepRunsForWorkerParams struct {
	Workerid pgtype.UUID `json:"workerid"`
	Statuses []string    `json:"statuses"`
	Tenantid pgtype.UUID `json:"tenantid"`
}

type ListRecentStepRunsForWorkerRow struct {
	ID            pgtype.UUID      `json:"id"`
	ActionId      string           `json:"actionId"`
	Status        StepRunStatus    `json:"status"`
	CreatedAt     pgtype.Timestamp `json:"createdAt"`
	UpdatedAt     pgtype.Timestamp `json:"updatedAt"`
	FinishedAt    pgtype.Timestamp `json:"finishedAt"`
	CancelledAt   pgtype.Timestamp `json:"cancelledAt"`
	TimeoutAt     pgtype.Timestamp `json:"timeoutAt"`
	StartedAt     pgtype.Timestamp `json:"startedAt"`
	WorkflowRunId pgtype.UUID      `json:"workflowRunId"`
}

func (q *Queries) ListRecentStepRunsForWorker(ctx context.Context, db DBTX, arg ListRecentStepRunsForWorkerParams) ([]*ListRecentStepRunsForWorkerRow, error) {
	rows, err := db.Query(ctx, listRecentStepRunsForWorker, arg.Workerid, arg.Statuses, arg.Tenantid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListRecentStepRunsForWorkerRow
	for rows.Next() {
		var i ListRecentStepRunsForWorkerRow
		if err := rows.Scan(
			&i.ID,
			&i.ActionId,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FinishedAt,
			&i.CancelledAt,
			&i.TimeoutAt,
			&i.StartedAt,
			&i.WorkflowRunId,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSemaphoreSlotsWithStateForWorker = `-- name: ListSemaphoreSlotsWithStateForWorker :many
SELECT
    wss."id" as "slot",
    sr."id" AS "stepRunId",
    sr."status" AS "status",
    s."actionId",
    sr."timeoutAt" AS "timeoutAt",
    sr."startedAt" AS "startedAt",
    jr."workflowRunId" AS "workflowRunId"
FROM
    "WorkerSemaphoreSlot" wss
JOIN
    "Worker" w ON wss."workerId" = w."id"
LEFT JOIN
    "StepRun" sr ON wss."stepRunId" = sr."id"
LEFT JOIN
    "JobRun" jr ON sr."jobRunId" = jr."id"
LEFT JOIN
	"Step" s ON sr."stepId" = s."id"
WHERE
    wss."workerId" = $1::uuid AND
    w."tenantId" = $2::uuid
ORDER BY
    wss."id" ASC
`

type ListSemaphoreSlotsWithStateForWorkerParams struct {
	Workerid pgtype.UUID `json:"workerid"`
	Tenantid pgtype.UUID `json:"tenantid"`
}

type ListSemaphoreSlotsWithStateForWorkerRow struct {
	Slot          pgtype.UUID       `json:"slot"`
	StepRunId     pgtype.UUID       `json:"stepRunId"`
	Status        NullStepRunStatus `json:"status"`
	ActionId      pgtype.Text       `json:"actionId"`
	TimeoutAt     pgtype.Timestamp  `json:"timeoutAt"`
	StartedAt     pgtype.Timestamp  `json:"startedAt"`
	WorkflowRunId pgtype.UUID       `json:"workflowRunId"`
}

func (q *Queries) ListSemaphoreSlotsWithStateForWorker(ctx context.Context, db DBTX, arg ListSemaphoreSlotsWithStateForWorkerParams) ([]*ListSemaphoreSlotsWithStateForWorkerRow, error) {
	rows, err := db.Query(ctx, listSemaphoreSlotsWithStateForWorker, arg.Workerid, arg.Tenantid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListSemaphoreSlotsWithStateForWorkerRow
	for rows.Next() {
		var i ListSemaphoreSlotsWithStateForWorkerRow
		if err := rows.Scan(
			&i.Slot,
			&i.StepRunId,
			&i.Status,
			&i.ActionId,
			&i.TimeoutAt,
			&i.StartedAt,
			&i.WorkflowRunId,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkerLabels = `-- name: ListWorkerLabels :many
SELECT
    "id",
    "key",
    "intValue",
    "strValue",
    "createdAt",
    "updatedAt"
FROM "WorkerLabel" wl
WHERE wl."workerId" = $1::uuid
`

type ListWorkerLabelsRow struct {
	ID        int64            `json:"id"`
	Key       string           `json:"key"`
	IntValue  pgtype.Int4      `json:"intValue"`
	StrValue  pgtype.Text      `json:"strValue"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
}

func (q *Queries) ListWorkerLabels(ctx context.Context, db DBTX, workerid pgtype.UUID) ([]*ListWorkerLabelsRow, error) {
	rows, err := db.Query(ctx, listWorkerLabels, workerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListWorkerLabelsRow
	for rows.Next() {
		var i ListWorkerLabelsRow
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.IntValue,
			&i.StrValue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkersWithStepCount = `-- name: ListWorkersWithStepCount :many
SELECT
    workers.id, workers."createdAt", workers."updatedAt", workers."deletedAt", workers."tenantId", workers."lastHeartbeatAt", workers.name, workers."dispatcherId", workers."maxRuns", workers."isActive", workers."lastListenerEstablished", workers."isPaused", workers.type, workers."webhookId",
    ww."url" AS "webhookUrl",
    (SELECT COUNT(*) FROM "WorkerSemaphoreSlot" wss WHERE wss."workerId" = workers."id" AND wss."stepRunId" IS NOT NULL) AS "slots"
FROM
    "Worker" workers
LEFT JOIN
    "WebhookWorker" ww ON workers."webhookId" = ww."id"
WHERE
    workers."tenantId" = $1
    AND (
        $2::text IS NULL OR
        workers."id" IN (
            SELECT "_ActionToWorker"."B"
            FROM "_ActionToWorker"
            INNER JOIN "Action" ON "Action"."id" = "_ActionToWorker"."A"
            WHERE "Action"."tenantId" = $1 AND "Action"."actionId" = $2::text
        )
    )
    AND (
        $3::timestamp IS NULL OR
        workers."lastHeartbeatAt" > $3::timestamp
    )
    AND (
        $4::boolean IS NULL OR
        workers."maxRuns" IS NULL OR
        ($4::boolean AND workers."maxRuns" > (
            SELECT COUNT(*)
            FROM "StepRun" srs
            WHERE srs."workerId" = workers."id" AND srs."status" = 'RUNNING'
        ))
    )
GROUP BY
    workers."id", ww."url"
`

type ListWorkersWithStepCountParams struct {
	Tenantid           pgtype.UUID      `json:"tenantid"`
	ActionId           pgtype.Text      `json:"actionId"`
	LastHeartbeatAfter pgtype.Timestamp `json:"lastHeartbeatAfter"`
	Assignable         pgtype.Bool      `json:"assignable"`
}

type ListWorkersWithStepCountRow struct {
	Worker     Worker      `json:"worker"`
	WebhookUrl pgtype.Text `json:"webhookUrl"`
	Slots      int64       `json:"slots"`
}

func (q *Queries) ListWorkersWithStepCount(ctx context.Context, db DBTX, arg ListWorkersWithStepCountParams) ([]*ListWorkersWithStepCountRow, error) {
	rows, err := db.Query(ctx, listWorkersWithStepCount,
		arg.Tenantid,
		arg.ActionId,
		arg.LastHeartbeatAfter,
		arg.Assignable,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListWorkersWithStepCountRow
	for rows.Next() {
		var i ListWorkersWithStepCountRow
		if err := rows.Scan(
			&i.Worker.ID,
			&i.Worker.CreatedAt,
			&i.Worker.UpdatedAt,
			&i.Worker.DeletedAt,
			&i.Worker.TenantId,
			&i.Worker.LastHeartbeatAt,
			&i.Worker.Name,
			&i.Worker.DispatcherId,
			&i.Worker.MaxRuns,
			&i.Worker.IsActive,
			&i.Worker.LastListenerEstablished,
			&i.Worker.IsPaused,
			&i.Worker.Type,
			&i.Worker.WebhookId,
			&i.WebhookUrl,
			&i.Slots,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resolveWorkerSemaphoreSlots = `-- name: ResolveWorkerSemaphoreSlots :one
WITH to_count AS (
    SELECT
        wss."id"
    FROM
        "Worker" w
    LEFT JOIN
        "WorkerSemaphoreSlot" wss ON w."id" = wss."workerId" AND wss."stepRunId" IS NOT NULL
    JOIN "StepRun" sr ON wss."stepRunId" = sr."id" AND sr."status" NOT IN ('RUNNING', 'ASSIGNED') AND sr."tenantId" = $1::uuid
    WHERE
        w."tenantId" = $1::uuid
        AND w."lastHeartbeatAt" > NOW() - INTERVAL '5 seconds'
        -- necessary because isActive is set to false immediately when the stream closes
        AND w."isActive" = true
        AND w."isPaused" = false
    LIMIT 21
),
to_resolve AS (
    SELECT id FROM to_count LIMIT 20
),
update_result AS (
    UPDATE "WorkerSemaphoreSlot" wss
    SET "stepRunId" = null
    WHERE wss."id" IN (SELECT "id" FROM to_resolve)
    RETURNING wss."id"
)
SELECT
	CASE
		WHEN COUNT(*) > 0 THEN TRUE
		ELSE FALSE
	END AS "hasResolved",
	CASE
		WHEN COUNT(*) > 10 THEN TRUE
		ELSE FALSE
	END AS "hasMore"
FROM to_count
`

type ResolveWorkerSemaphoreSlotsRow struct {
	HasResolved bool `json:"hasResolved"`
	HasMore     bool `json:"hasMore"`
}

func (q *Queries) ResolveWorkerSemaphoreSlots(ctx context.Context, db DBTX, tenantid pgtype.UUID) (*ResolveWorkerSemaphoreSlotsRow, error) {
	row := db.QueryRow(ctx, resolveWorkerSemaphoreSlots, tenantid)
	var i ResolveWorkerSemaphoreSlotsRow
	err := row.Scan(&i.HasResolved, &i.HasMore)
	return &i, err
}

const stubWorkerSemaphoreSlots = `-- name: StubWorkerSemaphoreSlots :exec
INSERT INTO "WorkerSemaphoreSlot" ("id", "workerId")
SELECT gen_random_uuid(), $1::uuid
FROM generate_series(1, $2::int)
`

type StubWorkerSemaphoreSlotsParams struct {
	Workerid pgtype.UUID `json:"workerid"`
	MaxRuns  pgtype.Int4 `json:"maxRuns"`
}

func (q *Queries) StubWorkerSemaphoreSlots(ctx context.Context, db DBTX, arg StubWorkerSemaphoreSlotsParams) error {
	_, err := db.Exec(ctx, stubWorkerSemaphoreSlots, arg.Workerid, arg.MaxRuns)
	return err
}

const updateWorker = `-- name: UpdateWorker :one
UPDATE
    "Worker"
SET
    "updatedAt" = CURRENT_TIMESTAMP,
    "dispatcherId" = coalesce($1::uuid, "dispatcherId"),
    "maxRuns" = coalesce($2::int, "maxRuns"),
    "lastHeartbeatAt" = coalesce($3::timestamp, "lastHeartbeatAt"),
    "isActive" = coalesce($4::boolean, "isActive"),
    "isPaused" = coalesce($5::boolean, "isPaused")
WHERE
    "id" = $6::uuid
RETURNING id, "createdAt", "updatedAt", "deletedAt", "tenantId", "lastHeartbeatAt", name, "dispatcherId", "maxRuns", "isActive", "lastListenerEstablished", "isPaused", type, "webhookId"
`

type UpdateWorkerParams struct {
	DispatcherId    pgtype.UUID      `json:"dispatcherId"`
	MaxRuns         pgtype.Int4      `json:"maxRuns"`
	LastHeartbeatAt pgtype.Timestamp `json:"lastHeartbeatAt"`
	IsActive        pgtype.Bool      `json:"isActive"`
	IsPaused        pgtype.Bool      `json:"isPaused"`
	ID              pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateWorker(ctx context.Context, db DBTX, arg UpdateWorkerParams) (*Worker, error) {
	row := db.QueryRow(ctx, updateWorker,
		arg.DispatcherId,
		arg.MaxRuns,
		arg.LastHeartbeatAt,
		arg.IsActive,
		arg.IsPaused,
		arg.ID,
	)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TenantId,
		&i.LastHeartbeatAt,
		&i.Name,
		&i.DispatcherId,
		&i.MaxRuns,
		&i.IsActive,
		&i.LastListenerEstablished,
		&i.IsPaused,
		&i.Type,
		&i.WebhookId,
	)
	return &i, err
}

const updateWorkerActiveStatus = `-- name: UpdateWorkerActiveStatus :one
UPDATE "Worker"
SET
    "isActive" = $1::boolean,
    "lastListenerEstablished" = $2::timestamp
WHERE
    "id" = $3::uuid
    AND (
        "lastListenerEstablished" IS NULL
        OR "lastListenerEstablished" <= $2::timestamp
        )
RETURNING id, "createdAt", "updatedAt", "deletedAt", "tenantId", "lastHeartbeatAt", name, "dispatcherId", "maxRuns", "isActive", "lastListenerEstablished", "isPaused", type, "webhookId"
`

type UpdateWorkerActiveStatusParams struct {
	Isactive                bool             `json:"isactive"`
	LastListenerEstablished pgtype.Timestamp `json:"lastListenerEstablished"`
	ID                      pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateWorkerActiveStatus(ctx context.Context, db DBTX, arg UpdateWorkerActiveStatusParams) (*Worker, error) {
	row := db.QueryRow(ctx, updateWorkerActiveStatus, arg.Isactive, arg.LastListenerEstablished, arg.ID)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TenantId,
		&i.LastHeartbeatAt,
		&i.Name,
		&i.DispatcherId,
		&i.MaxRuns,
		&i.IsActive,
		&i.LastListenerEstablished,
		&i.IsPaused,
		&i.Type,
		&i.WebhookId,
	)
	return &i, err
}

const updateWorkerHeartbeat = `-- name: UpdateWorkerHeartbeat :one
UPDATE
    "Worker"
SET
    "updatedAt" = CURRENT_TIMESTAMP,
    "lastHeartbeatAt" = $1::timestamp
WHERE
    "id" = $2::uuid
RETURNING id, "createdAt", "updatedAt", "deletedAt", "tenantId", "lastHeartbeatAt", name, "dispatcherId", "maxRuns", "isActive", "lastListenerEstablished", "isPaused", type, "webhookId"
`

type UpdateWorkerHeartbeatParams struct {
	LastHeartbeatAt pgtype.Timestamp `json:"lastHeartbeatAt"`
	ID              pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateWorkerHeartbeat(ctx context.Context, db DBTX, arg UpdateWorkerHeartbeatParams) (*Worker, error) {
	row := db.QueryRow(ctx, updateWorkerHeartbeat, arg.LastHeartbeatAt, arg.ID)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TenantId,
		&i.LastHeartbeatAt,
		&i.Name,
		&i.DispatcherId,
		&i.MaxRuns,
		&i.IsActive,
		&i.LastListenerEstablished,
		&i.IsPaused,
		&i.Type,
		&i.WebhookId,
	)
	return &i, err
}

const updateWorkersByWebhookId = `-- name: UpdateWorkersByWebhookId :many
UPDATE "Worker"
SET "isActive" = $1::boolean
WHERE
  "tenantId" = $2::uuid AND
  "webhookId" = $3::uuid
RETURNING id, "createdAt", "updatedAt", "deletedAt", "tenantId", "lastHeartbeatAt", name, "dispatcherId", "maxRuns", "isActive", "lastListenerEstablished", "isPaused", type, "webhookId"
`

type UpdateWorkersByWebhookIdParams struct {
	Isactive  bool        `json:"isactive"`
	Tenantid  pgtype.UUID `json:"tenantid"`
	Webhookid pgtype.UUID `json:"webhookid"`
}

func (q *Queries) UpdateWorkersByWebhookId(ctx context.Context, db DBTX, arg UpdateWorkersByWebhookIdParams) ([]*Worker, error) {
	rows, err := db.Query(ctx, updateWorkersByWebhookId, arg.Isactive, arg.Tenantid, arg.Webhookid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Worker
	for rows.Next() {
		var i Worker
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TenantId,
			&i.LastHeartbeatAt,
			&i.Name,
			&i.DispatcherId,
			&i.MaxRuns,
			&i.IsActive,
			&i.LastListenerEstablished,
			&i.IsPaused,
			&i.Type,
			&i.WebhookId,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertService = `-- name: UpsertService :one
INSERT INTO "Service" (
    "id",
    "createdAt",
    "updatedAt",
    "name",
    "tenantId"
)
VALUES (
    gen_random_uuid(),
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    $1::text,
    $2::uuid
)
ON CONFLICT ("tenantId", "name") DO UPDATE
SET
    "updatedAt" = CURRENT_TIMESTAMP
WHERE
    "Service"."tenantId" = $2 AND "Service"."name" = $1::text
RETURNING id, "createdAt", "updatedAt", "deletedAt", name, description, "tenantId"
`

type UpsertServiceParams struct {
	Name     string      `json:"name"`
	Tenantid pgtype.UUID `json:"tenantid"`
}

func (q *Queries) UpsertService(ctx context.Context, db DBTX, arg UpsertServiceParams) (*Service, error) {
	row := db.QueryRow(ctx, upsertService, arg.Name, arg.Tenantid)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
		&i.TenantId,
	)
	return &i, err
}

const upsertWorkerLabel = `-- name: UpsertWorkerLabel :one
INSERT INTO "WorkerLabel" (
    "createdAt",
    "updatedAt",
    "workerId",
    "key",
    "intValue",
    "strValue"
) VALUES (
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    $1::uuid,
    $2::text,
    $3::int,
    $4::text
) ON CONFLICT ("workerId", "key") DO UPDATE
SET
    "updatedAt" = CURRENT_TIMESTAMP,
    "intValue" = $3::int,
    "strValue" = $4::text
RETURNING id, "createdAt", "updatedAt", "workerId", key, "strValue", "intValue"
`

type UpsertWorkerLabelParams struct {
	Workerid pgtype.UUID `json:"workerid"`
	Key      string      `json:"key"`
	IntValue pgtype.Int4 `json:"intValue"`
	StrValue pgtype.Text `json:"strValue"`
}

func (q *Queries) UpsertWorkerLabel(ctx context.Context, db DBTX, arg UpsertWorkerLabelParams) (*WorkerLabel, error) {
	row := db.QueryRow(ctx, upsertWorkerLabel,
		arg.Workerid,
		arg.Key,
		arg.IntValue,
		arg.StrValue,
	)
	var i WorkerLabel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WorkerId,
		&i.Key,
		&i.StrValue,
		&i.IntValue,
	)
	return &i, err
}
