// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: workflow_run_events.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkflowRunEvent = `-- name: CreateWorkflowRunEvent :one

INSERT INTO "WorkflowRunEvent" (  "tenantId", "workflowRunId","eventType", "id")
VALUES ($1, $2, $3,  gen_random_uuid()) RETURNING id, "createdAt", "tenantId", "workflowRunId", "eventType"
`

type CreateWorkflowRunEventParams struct {
	TenantId      pgtype.UUID          `json:"tenantId"`
	WorkflowRunId pgtype.UUID          `json:"workflowRunId"`
	EventType     WorkflowRunEventType `json:"eventType"`
}

func (q *Queries) CreateWorkflowRunEvent(ctx context.Context, db DBTX, arg CreateWorkflowRunEventParams) (*WorkflowRunEvent, error) {
	row := db.QueryRow(ctx, createWorkflowRunEvent, arg.TenantId, arg.WorkflowRunId, arg.EventType)
	var i WorkflowRunEvent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TenantId,
		&i.WorkflowRunId,
		&i.EventType,
	)
	return &i, err
}

const workflowRunEventsMetrics = `-- name: WorkflowRunEventsMetrics :many

SELECT
    minute, pending_count, queued_count, running_count, succeeded_count, retried_count, failed_count, queue_depth
FROM
    "WorkflowRunEventView"
WHERE
    "tenantId" = $1::uuid AND
    minute > $2::timestamp AND
    minute < $3::timestamp
ORDER BY minute
`

type WorkflowRunEventsMetricsParams struct {
	Column1 pgtype.UUID      `json:"column_1"`
	Column2 pgtype.Timestamp `json:"column_2"`
	Column3 pgtype.Timestamp `json:"column_3"`
}

type WorkflowRunEventsMetricsRow struct {
	Minute         interface{} `json:"minute"`
	PendingCount   int64       `json:"pending_count"`
	QueuedCount    int64       `json:"queued_count"`
	RunningCount   int64       `json:"running_count"`
	SucceededCount int64       `json:"succeeded_count"`
	RetriedCount   int64       `json:"retried_count"`
	FailedCount    int64       `json:"failed_count"`
	QueueDepth     int64       `json:"queue_depth"`
}

func (q *Queries) WorkflowRunEventsMetrics(ctx context.Context, db DBTX, arg WorkflowRunEventsMetricsParams) ([]*WorkflowRunEventsMetricsRow, error) {
	rows, err := db.Query(ctx, workflowRunEventsMetrics, arg.Column1, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WorkflowRunEventsMetricsRow
	for rows.Next() {
		var i WorkflowRunEventsMetricsRow
		if err := rows.Scan(
			&i.Minute,
			&i.PendingCount,
			&i.QueuedCount,
			&i.RunningCount,
			&i.SucceededCount,
			&i.RetriedCount,
			&i.FailedCount,
			&i.QueueDepth,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
