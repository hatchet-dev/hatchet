// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: copyfrom.go

package dbsqlc

import (
	"context"
)

// iteratorForCreateEvents implements pgx.CopyFromSource.
type iteratorForCreateEvents struct {
	rows                 []CreateEventsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateEvents) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateEvents) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Key,
		r.rows[0].TenantId,
		r.rows[0].ReplayedFromId,
		r.rows[0].Data,
		r.rows[0].AdditionalMetadata,
	}, nil
}

func (r iteratorForCreateEvents) Err() error {
	return nil
}

func (q *Queries) CreateEvents(ctx context.Context, db DBTX, arg []CreateEventsParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"Event"}, []string{"id", "key", "tenantId", "replayedFromId", "data", "additionalMetadata"}, &iteratorForCreateEvents{rows: arg})
}

// iteratorForCreateWorkflowRuns implements pgx.CopyFromSource.
type iteratorForCreateWorkflowRuns struct {
	rows                 []CreateWorkflowRunsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateWorkflowRuns) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateWorkflowRuns) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].DisplayName,
		r.rows[0].TenantId,
		r.rows[0].WorkflowVersionId,
		r.rows[0].Status,
		r.rows[0].ChildIndex,
		r.rows[0].ChildKey,
		r.rows[0].ParentId,
		r.rows[0].ParentStepRunId,
		r.rows[0].AdditionalMetadata,
		r.rows[0].Priority,
	}, nil
}

func (r iteratorForCreateWorkflowRuns) Err() error {
	return nil
}

func (q *Queries) CreateWorkflowRuns(ctx context.Context, db DBTX, arg []CreateWorkflowRunsParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"WorkflowRun"}, []string{"id", "displayName", "tenantId", "workflowVersionId", "status", "childIndex", "childKey", "parentId", "parentStepRunId", "additionalMetadata", "priority"}, &iteratorForCreateWorkflowRuns{rows: arg})
}
