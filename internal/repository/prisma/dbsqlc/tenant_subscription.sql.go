// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: tenant_subscription.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTenantSubscription = `-- name: GetTenantSubscription :one
SELECT
  "tenantId", status, period, plan, note
FROM
  "TenantSubscription"
WHERE
  "tenantId" = $1::uuid
`

func (q *Queries) GetTenantSubscription(ctx context.Context, db DBTX, tenantid pgtype.UUID) (*TenantSubscription, error) {
	row := db.QueryRow(ctx, getTenantSubscription, tenantid)
	var i TenantSubscription
	err := row.Scan(
		&i.TenantId,
		&i.Status,
		&i.Period,
		&i.Plan,
		&i.Note,
	)
	return &i, err
}

const upsertTenantSubscription = `-- name: UpsertTenantSubscription :one
INSERT INTO "TenantSubscription" (
  "tenantId",
  "plan",
  "period",
  "status",
  "note"
)
VALUES (
  $1::uuid,
  $2::"TenantSubscriptionPlanCodes",
  $3::"TenantSubscriptionPeriod",
  $4::"TenantSubscriptionStatus",
  $5::text
)
ON CONFLICT ("tenantId") DO UPDATE SET
  "plan" = $2::"TenantSubscriptionPlanCodes",
  "period" = $3::"TenantSubscriptionPeriod",
  "status" = $4::"TenantSubscriptionStatus",
  "note" = $5::text
RETURNING "tenantId", status, period, plan, note
`

type UpsertTenantSubscriptionParams struct {
	Tenantid pgtype.UUID                     `json:"tenantid"`
	Plan     NullTenantSubscriptionPlanCodes `json:"plan"`
	Period   NullTenantSubscriptionPeriod    `json:"period"`
	Status   NullTenantSubscriptionStatus    `json:"status"`
	Note     pgtype.Text                     `json:"note"`
}

func (q *Queries) UpsertTenantSubscription(ctx context.Context, db DBTX, arg UpsertTenantSubscriptionParams) (*TenantSubscription, error) {
	row := db.QueryRow(ctx, upsertTenantSubscription,
		arg.Tenantid,
		arg.Plan,
		arg.Period,
		arg.Status,
		arg.Note,
	)
	var i TenantSubscription
	err := row.Scan(
		&i.TenantId,
		&i.Status,
		&i.Period,
		&i.Plan,
		&i.Note,
	)
	return &i, err
}
