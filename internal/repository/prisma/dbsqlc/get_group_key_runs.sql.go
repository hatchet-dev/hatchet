// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: get_group_key_runs.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const updateGetGroupKeyRun = `-- name: UpdateGetGroupKeyRun :one
UPDATE
    "GetGroupKeyRun"
SET
    "requeueAfter" = COALESCE($1::timestamp, "requeueAfter"),
    "startedAt" = COALESCE($2::timestamp, "startedAt"),
    "finishedAt" = COALESCE($3::timestamp, "finishedAt"),
    "status" = CASE 
        -- Final states are final, cannot be updated
        WHEN "status" IN ('SUCCEEDED', 'FAILED', 'CANCELLED') THEN "status"
        ELSE COALESCE($4, "status")
    END,
    "input" = COALESCE($5::jsonb, "input"),
    "output" = COALESCE($6::text, "output"),
    "error" = COALESCE($7::text, "error"),
    "cancelledAt" = COALESCE($8::timestamp, "cancelledAt"),
    "cancelledReason" = COALESCE($9::text, "cancelledReason")
WHERE 
  "id" = $10::uuid AND
  "tenantId" = $11::uuid
RETURNING "GetGroupKeyRun".id, "GetGroupKeyRun"."createdAt", "GetGroupKeyRun"."updatedAt", "GetGroupKeyRun"."deletedAt", "GetGroupKeyRun"."tenantId", "GetGroupKeyRun"."workflowRunId", "GetGroupKeyRun"."workerId", "GetGroupKeyRun"."tickerId", "GetGroupKeyRun".status, "GetGroupKeyRun".input, "GetGroupKeyRun".output, "GetGroupKeyRun"."requeueAfter", "GetGroupKeyRun".error, "GetGroupKeyRun"."startedAt", "GetGroupKeyRun"."finishedAt", "GetGroupKeyRun"."timeoutAt", "GetGroupKeyRun"."cancelledAt", "GetGroupKeyRun"."cancelledReason", "GetGroupKeyRun"."cancelledError"
`

type UpdateGetGroupKeyRunParams struct {
	RequeueAfter    pgtype.Timestamp  `json:"requeueAfter"`
	StartedAt       pgtype.Timestamp  `json:"startedAt"`
	FinishedAt      pgtype.Timestamp  `json:"finishedAt"`
	Status          NullStepRunStatus `json:"status"`
	Input           []byte            `json:"input"`
	Output          pgtype.Text       `json:"output"`
	Error           pgtype.Text       `json:"error"`
	CancelledAt     pgtype.Timestamp  `json:"cancelledAt"`
	CancelledReason pgtype.Text       `json:"cancelledReason"`
	ID              pgtype.UUID       `json:"id"`
	Tenantid        pgtype.UUID       `json:"tenantid"`
}

func (q *Queries) UpdateGetGroupKeyRun(ctx context.Context, db DBTX, arg UpdateGetGroupKeyRunParams) (*GetGroupKeyRun, error) {
	row := db.QueryRow(ctx, updateGetGroupKeyRun,
		arg.RequeueAfter,
		arg.StartedAt,
		arg.FinishedAt,
		arg.Status,
		arg.Input,
		arg.Output,
		arg.Error,
		arg.CancelledAt,
		arg.CancelledReason,
		arg.ID,
		arg.Tenantid,
	)
	var i GetGroupKeyRun
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TenantId,
		&i.WorkflowRunId,
		&i.WorkerId,
		&i.TickerId,
		&i.Status,
		&i.Input,
		&i.Output,
		&i.RequeueAfter,
		&i.Error,
		&i.StartedAt,
		&i.FinishedAt,
		&i.TimeoutAt,
		&i.CancelledAt,
		&i.CancelledReason,
		&i.CancelledError,
	)
	return &i, err
}
