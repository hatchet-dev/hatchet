// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: rate_limits.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRateLimit = `-- name: CreateRateLimit :one
INSERT INTO "RateLimit" (
    "tenantId", 
    "key", 
    "max", 
    "value", 
    "window"
) VALUES (
    $1::uuid,
    $2::text,
    $3::int,
    $3::int,
    COALESCE($4::text, '1 minute')
) RETURNING "tenantId", key, max, value, "window", "lastRefill"
`

type CreateRateLimitParams struct {
	Tenantid pgtype.UUID `json:"tenantid"`
	Key      string      `json:"key"`
	Max      int32       `json:"max"`
	Window   pgtype.Text `json:"window"`
}

func (q *Queries) CreateRateLimit(ctx context.Context, db DBTX, arg CreateRateLimitParams) (*RateLimit, error) {
	row := db.QueryRow(ctx, createRateLimit,
		arg.Tenantid,
		arg.Key,
		arg.Max,
		arg.Window,
	)
	var i RateLimit
	err := row.Scan(
		&i.TenantId,
		&i.Key,
		&i.Max,
		&i.Value,
		&i.Window,
		&i.LastRefill,
	)
	return &i, err
}
