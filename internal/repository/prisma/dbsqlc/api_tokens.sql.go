// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: api_tokens.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIToken = `-- name: CreateAPIToken :one
INSERT INTO "APIToken" (
    "id",
    "createdAt",
    "updatedAt",
    "tenantId",
    "name",
    "expiresAt"
) VALUES (
    coalesce($1::uuid, gen_random_uuid()),
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    $2::uuid,
    $3::text,
    $4::timestamp
) RETURNING id, "createdAt", "updatedAt", "expiresAt", revoked, name, "tenantId"
`

type CreateAPITokenParams struct {
	ID        pgtype.UUID      `json:"id"`
	TenantId  pgtype.UUID      `json:"tenantId"`
	Name      pgtype.Text      `json:"name"`
	Expiresat pgtype.Timestamp `json:"expiresat"`
}

func (q *Queries) CreateAPIToken(ctx context.Context, db DBTX, arg CreateAPITokenParams) (*APIToken, error) {
	row := db.QueryRow(ctx, createAPIToken,
		arg.ID,
		arg.TenantId,
		arg.Name,
		arg.Expiresat,
	)
	var i APIToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.Revoked,
		&i.Name,
		&i.TenantId,
	)
	return &i, err
}

const getAPITokenById = `-- name: GetAPITokenById :one
SELECT
    id, "createdAt", "updatedAt", "expiresAt", revoked, name, "tenantId"
FROM
    "APIToken"
WHERE
    "id" = $1::uuid
`

func (q *Queries) GetAPITokenById(ctx context.Context, db DBTX, id pgtype.UUID) (*APIToken, error) {
	row := db.QueryRow(ctx, getAPITokenById, id)
	var i APIToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.Revoked,
		&i.Name,
		&i.TenantId,
	)
	return &i, err
}
