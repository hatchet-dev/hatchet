// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: workflows.proto

package contracts

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StickyStrategy int32

const (
	StickyStrategy_SOFT StickyStrategy = 0
	StickyStrategy_HARD StickyStrategy = 1
)

// Enum value maps for StickyStrategy.
var (
	StickyStrategy_name = map[int32]string{
		0: "SOFT",
		1: "HARD",
	}
	StickyStrategy_value = map[string]int32{
		"SOFT": 0,
		"HARD": 1,
	}
)

func (x StickyStrategy) Enum() *StickyStrategy {
	p := new(StickyStrategy)
	*p = x
	return p
}

func (x StickyStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StickyStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_proto_enumTypes[0].Descriptor()
}

func (StickyStrategy) Type() protoreflect.EnumType {
	return &file_workflows_proto_enumTypes[0]
}

func (x StickyStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StickyStrategy.Descriptor instead.
func (StickyStrategy) EnumDescriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{0}
}

type ConcurrencyLimitStrategy int32

const (
	ConcurrencyLimitStrategy_CANCEL_IN_PROGRESS ConcurrencyLimitStrategy = 0
	ConcurrencyLimitStrategy_DROP_NEWEST        ConcurrencyLimitStrategy = 1
	ConcurrencyLimitStrategy_QUEUE_NEWEST       ConcurrencyLimitStrategy = 2
	ConcurrencyLimitStrategy_GROUP_ROUND_ROBIN  ConcurrencyLimitStrategy = 3
)

// Enum value maps for ConcurrencyLimitStrategy.
var (
	ConcurrencyLimitStrategy_name = map[int32]string{
		0: "CANCEL_IN_PROGRESS",
		1: "DROP_NEWEST",
		2: "QUEUE_NEWEST",
		3: "GROUP_ROUND_ROBIN",
	}
	ConcurrencyLimitStrategy_value = map[string]int32{
		"CANCEL_IN_PROGRESS": 0,
		"DROP_NEWEST":        1,
		"QUEUE_NEWEST":       2,
		"GROUP_ROUND_ROBIN":  3,
	}
)

func (x ConcurrencyLimitStrategy) Enum() *ConcurrencyLimitStrategy {
	p := new(ConcurrencyLimitStrategy)
	*p = x
	return p
}

func (x ConcurrencyLimitStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConcurrencyLimitStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_proto_enumTypes[1].Descriptor()
}

func (ConcurrencyLimitStrategy) Type() protoreflect.EnumType {
	return &file_workflows_proto_enumTypes[1]
}

func (x ConcurrencyLimitStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConcurrencyLimitStrategy.Descriptor instead.
func (ConcurrencyLimitStrategy) EnumDescriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{1}
}

type WorkerLabelComparator int32

const (
	WorkerLabelComparator_EQUAL                 WorkerLabelComparator = 0
	WorkerLabelComparator_NOT_EQUAL             WorkerLabelComparator = 1
	WorkerLabelComparator_GREATER_THAN          WorkerLabelComparator = 2
	WorkerLabelComparator_GREATER_THAN_OR_EQUAL WorkerLabelComparator = 3
	WorkerLabelComparator_LESS_THAN             WorkerLabelComparator = 4
	WorkerLabelComparator_LESS_THAN_OR_EQUAL    WorkerLabelComparator = 5
)

// Enum value maps for WorkerLabelComparator.
var (
	WorkerLabelComparator_name = map[int32]string{
		0: "EQUAL",
		1: "NOT_EQUAL",
		2: "GREATER_THAN",
		3: "GREATER_THAN_OR_EQUAL",
		4: "LESS_THAN",
		5: "LESS_THAN_OR_EQUAL",
	}
	WorkerLabelComparator_value = map[string]int32{
		"EQUAL":                 0,
		"NOT_EQUAL":             1,
		"GREATER_THAN":          2,
		"GREATER_THAN_OR_EQUAL": 3,
		"LESS_THAN":             4,
		"LESS_THAN_OR_EQUAL":    5,
	}
)

func (x WorkerLabelComparator) Enum() *WorkerLabelComparator {
	p := new(WorkerLabelComparator)
	*p = x
	return p
}

func (x WorkerLabelComparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerLabelComparator) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_proto_enumTypes[2].Descriptor()
}

func (WorkerLabelComparator) Type() protoreflect.EnumType {
	return &file_workflows_proto_enumTypes[2]
}

func (x WorkerLabelComparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerLabelComparator.Descriptor instead.
func (WorkerLabelComparator) EnumDescriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{2}
}

type RateLimitDuration int32

const (
	RateLimitDuration_SECOND RateLimitDuration = 0
	RateLimitDuration_MINUTE RateLimitDuration = 1
	RateLimitDuration_HOUR   RateLimitDuration = 2
	RateLimitDuration_DAY    RateLimitDuration = 3
	RateLimitDuration_WEEK   RateLimitDuration = 4
	RateLimitDuration_MONTH  RateLimitDuration = 5
	RateLimitDuration_YEAR   RateLimitDuration = 6
)

// Enum value maps for RateLimitDuration.
var (
	RateLimitDuration_name = map[int32]string{
		0: "SECOND",
		1: "MINUTE",
		2: "HOUR",
		3: "DAY",
		4: "WEEK",
		5: "MONTH",
		6: "YEAR",
	}
	RateLimitDuration_value = map[string]int32{
		"SECOND": 0,
		"MINUTE": 1,
		"HOUR":   2,
		"DAY":    3,
		"WEEK":   4,
		"MONTH":  5,
		"YEAR":   6,
	}
)

func (x RateLimitDuration) Enum() *RateLimitDuration {
	p := new(RateLimitDuration)
	*p = x
	return p
}

func (x RateLimitDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateLimitDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_proto_enumTypes[3].Descriptor()
}

func (RateLimitDuration) Type() protoreflect.EnumType {
	return &file_workflows_proto_enumTypes[3]
}

func (x RateLimitDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateLimitDuration.Descriptor instead.
func (RateLimitDuration) EnumDescriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{3}
}

type PutWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opts *CreateWorkflowVersionOpts `protobuf:"bytes,1,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (x *PutWorkflowRequest) Reset() {
	*x = PutWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutWorkflowRequest) ProtoMessage() {}

func (x *PutWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutWorkflowRequest.ProtoReflect.Descriptor instead.
func (*PutWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{0}
}

func (x *PutWorkflowRequest) GetOpts() *CreateWorkflowVersionOpts {
	if x != nil {
		return x.Opts
	}
	return nil
}

// CreateWorkflowVersionOpts represents options to create a workflow version.
type CreateWorkflowVersionOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                    // (required) the workflow name
	Description       string                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                      // (optional) the workflow description
	Version           string                   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                                              // (required) the workflow version
	EventTriggers     []string                 `protobuf:"bytes,4,rep,name=event_triggers,json=eventTriggers,proto3" json:"event_triggers,omitempty"`             // (optional) event triggers for the workflow
	CronTriggers      []string                 `protobuf:"bytes,5,rep,name=cron_triggers,json=cronTriggers,proto3" json:"cron_triggers,omitempty"`                // (optional) cron triggers for the workflow
	ScheduledTriggers []*timestamppb.Timestamp `protobuf:"bytes,6,rep,name=scheduled_triggers,json=scheduledTriggers,proto3" json:"scheduled_triggers,omitempty"` // (optional) scheduled triggers for the workflow
	Jobs              []*CreateWorkflowJobOpts `protobuf:"bytes,7,rep,name=jobs,proto3" json:"jobs,omitempty"`                                                    // (required) the workflow jobs
	Concurrency       *WorkflowConcurrencyOpts `protobuf:"bytes,8,opt,name=concurrency,proto3" json:"concurrency,omitempty"`                                      // (optional) the workflow concurrency options
	ScheduleTimeout   *string                  `protobuf:"bytes,9,opt,name=schedule_timeout,json=scheduleTimeout,proto3,oneof" json:"schedule_timeout,omitempty"` // (optional) the timeout for the schedule
	CronInput         *string                  `protobuf:"bytes,10,opt,name=cron_input,json=cronInput,proto3,oneof" json:"cron_input,omitempty"`                  // (optional) the input for the cron trigger
	OnFailureJob      *CreateWorkflowJobOpts   `protobuf:"bytes,11,opt,name=on_failure_job,json=onFailureJob,proto3,oneof" json:"on_failure_job,omitempty"`       // (optional) the job to run on failure
	Sticky            *StickyStrategy          `protobuf:"varint,12,opt,name=sticky,proto3,enum=StickyStrategy,oneof" json:"sticky,omitempty"`                    // (optional) the sticky strategy for assigning steps to workers
}

func (x *CreateWorkflowVersionOpts) Reset() {
	*x = CreateWorkflowVersionOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowVersionOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowVersionOpts) ProtoMessage() {}

func (x *CreateWorkflowVersionOpts) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowVersionOpts.ProtoReflect.Descriptor instead.
func (*CreateWorkflowVersionOpts) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWorkflowVersionOpts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWorkflowVersionOpts) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateWorkflowVersionOpts) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateWorkflowVersionOpts) GetEventTriggers() []string {
	if x != nil {
		return x.EventTriggers
	}
	return nil
}

func (x *CreateWorkflowVersionOpts) GetCronTriggers() []string {
	if x != nil {
		return x.CronTriggers
	}
	return nil
}

func (x *CreateWorkflowVersionOpts) GetScheduledTriggers() []*timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTriggers
	}
	return nil
}

func (x *CreateWorkflowVersionOpts) GetJobs() []*CreateWorkflowJobOpts {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *CreateWorkflowVersionOpts) GetConcurrency() *WorkflowConcurrencyOpts {
	if x != nil {
		return x.Concurrency
	}
	return nil
}

func (x *CreateWorkflowVersionOpts) GetScheduleTimeout() string {
	if x != nil && x.ScheduleTimeout != nil {
		return *x.ScheduleTimeout
	}
	return ""
}

func (x *CreateWorkflowVersionOpts) GetCronInput() string {
	if x != nil && x.CronInput != nil {
		return *x.CronInput
	}
	return ""
}

func (x *CreateWorkflowVersionOpts) GetOnFailureJob() *CreateWorkflowJobOpts {
	if x != nil {
		return x.OnFailureJob
	}
	return nil
}

func (x *CreateWorkflowVersionOpts) GetSticky() StickyStrategy {
	if x != nil && x.Sticky != nil {
		return *x.Sticky
	}
	return StickyStrategy_SOFT
}

type WorkflowConcurrencyOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action        string                   `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`                                                                   // (required) the action id for getting the concurrency group
	MaxRuns       int32                    `protobuf:"varint,2,opt,name=max_runs,json=maxRuns,proto3" json:"max_runs,omitempty"`                                                 // (optional) the maximum number of concurrent workflow runs, default 1
	LimitStrategy ConcurrencyLimitStrategy `protobuf:"varint,3,opt,name=limit_strategy,json=limitStrategy,proto3,enum=ConcurrencyLimitStrategy" json:"limit_strategy,omitempty"` // (optional) the strategy to use when the concurrency limit is reached, default CANCEL_IN_PROGRESS
}

func (x *WorkflowConcurrencyOpts) Reset() {
	*x = WorkflowConcurrencyOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowConcurrencyOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowConcurrencyOpts) ProtoMessage() {}

func (x *WorkflowConcurrencyOpts) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowConcurrencyOpts.ProtoReflect.Descriptor instead.
func (*WorkflowConcurrencyOpts) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowConcurrencyOpts) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *WorkflowConcurrencyOpts) GetMaxRuns() int32 {
	if x != nil {
		return x.MaxRuns
	}
	return 0
}

func (x *WorkflowConcurrencyOpts) GetLimitStrategy() ConcurrencyLimitStrategy {
	if x != nil {
		return x.LimitStrategy
	}
	return ConcurrencyLimitStrategy_CANCEL_IN_PROGRESS
}

// CreateWorkflowJobOpts represents options to create a workflow job.
type CreateWorkflowJobOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`               // (required) the job name
	Description string                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // (optional) the job description
	Steps       []*CreateWorkflowStepOpts `protobuf:"bytes,4,rep,name=steps,proto3" json:"steps,omitempty"`             // (required) the job steps
}

func (x *CreateWorkflowJobOpts) Reset() {
	*x = CreateWorkflowJobOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowJobOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowJobOpts) ProtoMessage() {}

func (x *CreateWorkflowJobOpts) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowJobOpts.ProtoReflect.Descriptor instead.
func (*CreateWorkflowJobOpts) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{3}
}

func (x *CreateWorkflowJobOpts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWorkflowJobOpts) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateWorkflowJobOpts) GetSteps() []*CreateWorkflowStepOpts {
	if x != nil {
		return x.Steps
	}
	return nil
}

type DesiredWorkerLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value of the affinity
	StrValue *string `protobuf:"bytes,1,opt,name=strValue,proto3,oneof" json:"strValue,omitempty"`
	IntValue *int32  `protobuf:"varint,2,opt,name=intValue,proto3,oneof" json:"intValue,omitempty"`
	// *
	// (optional) Specifies whether the affinity setting is required.
	// If required, the worker will not accept actions that do not have a truthy affinity setting.
	//
	// Defaults to false.
	Required *bool `protobuf:"varint,3,opt,name=required,proto3,oneof" json:"required,omitempty"`
	// *
	// (optional) Specifies the comparator for the affinity setting.
	// If not set, the default is EQUAL.
	Comparator *WorkerLabelComparator `protobuf:"varint,4,opt,name=comparator,proto3,enum=WorkerLabelComparator,oneof" json:"comparator,omitempty"`
	// *
	// (optional) Specifies the weight of the affinity setting.
	// If not set, the default is 100.
	Weight *int32 `protobuf:"varint,5,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
}

func (x *DesiredWorkerLabels) Reset() {
	*x = DesiredWorkerLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredWorkerLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredWorkerLabels) ProtoMessage() {}

func (x *DesiredWorkerLabels) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredWorkerLabels.ProtoReflect.Descriptor instead.
func (*DesiredWorkerLabels) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{4}
}

func (x *DesiredWorkerLabels) GetStrValue() string {
	if x != nil && x.StrValue != nil {
		return *x.StrValue
	}
	return ""
}

func (x *DesiredWorkerLabels) GetIntValue() int32 {
	if x != nil && x.IntValue != nil {
		return *x.IntValue
	}
	return 0
}

func (x *DesiredWorkerLabels) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

func (x *DesiredWorkerLabels) GetComparator() WorkerLabelComparator {
	if x != nil && x.Comparator != nil {
		return *x.Comparator
	}
	return WorkerLabelComparator_EQUAL
}

func (x *DesiredWorkerLabels) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

// CreateWorkflowStepOpts represents options to create a workflow step.
type CreateWorkflowStepOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadableId   string                          `protobuf:"bytes,1,opt,name=readable_id,json=readableId,proto3" json:"readable_id,omitempty"`                                                                                               // (required) the step name
	Action       string                          `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`                                                                                                                         // (required) the step action id
	Timeout      string                          `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                                                                       // (optional) the step timeout
	Inputs       string                          `protobuf:"bytes,4,opt,name=inputs,proto3" json:"inputs,omitempty"`                                                                                                                         // (optional) the step inputs, assuming string representation of JSON
	Parents      []string                        `protobuf:"bytes,5,rep,name=parents,proto3" json:"parents,omitempty"`                                                                                                                       // (optional) the step parents. if none are passed in, this is a root step
	UserData     string                          `protobuf:"bytes,6,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`                                                                                                     // (optional) the custom step user data, assuming string representation of JSON
	Retries      int32                           `protobuf:"varint,7,opt,name=retries,proto3" json:"retries,omitempty"`                                                                                                                      // (optional) the number of retries for the step, default 0
	RateLimits   []*CreateStepRateLimit          `protobuf:"bytes,8,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`                                                                                               // (optional) the rate limits for the step
	WorkerLabels map[string]*DesiredWorkerLabels `protobuf:"bytes,9,rep,name=worker_labels,json=workerLabels,proto3" json:"worker_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // (optional) the desired worker affinity state for the step
}

func (x *CreateWorkflowStepOpts) Reset() {
	*x = CreateWorkflowStepOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowStepOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowStepOpts) ProtoMessage() {}

func (x *CreateWorkflowStepOpts) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowStepOpts.ProtoReflect.Descriptor instead.
func (*CreateWorkflowStepOpts) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{5}
}

func (x *CreateWorkflowStepOpts) GetReadableId() string {
	if x != nil {
		return x.ReadableId
	}
	return ""
}

func (x *CreateWorkflowStepOpts) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CreateWorkflowStepOpts) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *CreateWorkflowStepOpts) GetInputs() string {
	if x != nil {
		return x.Inputs
	}
	return ""
}

func (x *CreateWorkflowStepOpts) GetParents() []string {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *CreateWorkflowStepOpts) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *CreateWorkflowStepOpts) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *CreateWorkflowStepOpts) GetRateLimits() []*CreateStepRateLimit {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *CreateWorkflowStepOpts) GetWorkerLabels() map[string]*DesiredWorkerLabels {
	if x != nil {
		return x.WorkerLabels
	}
	return nil
}

type CreateStepRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`      // (required) the key for the rate limit
	Units int32  `protobuf:"varint,2,opt,name=units,proto3" json:"units,omitempty"` // (required) the number of units this step consumes
}

func (x *CreateStepRateLimit) Reset() {
	*x = CreateStepRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStepRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStepRateLimit) ProtoMessage() {}

func (x *CreateStepRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStepRateLimit.ProtoReflect.Descriptor instead.
func (*CreateStepRateLimit) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{6}
}

func (x *CreateStepRateLimit) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateStepRateLimit) GetUnits() int32 {
	if x != nil {
		return x.Units
	}
	return 0
}

// ListWorkflowsRequest is the request for ListWorkflows.
type ListWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListWorkflowsRequest) Reset() {
	*x = ListWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsRequest) ProtoMessage() {}

func (x *ListWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{7}
}

type ScheduleWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schedules []*timestamppb.Timestamp `protobuf:"bytes,2,rep,name=schedules,proto3" json:"schedules,omitempty"`
	// (optional) the input data for the workflow
	Input string `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	// (optional) the parent workflow run id
	ParentId *string `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	// (optional) the parent step run id
	ParentStepRunId *string `protobuf:"bytes,5,opt,name=parent_step_run_id,json=parentStepRunId,proto3,oneof" json:"parent_step_run_id,omitempty"`
	// (optional) the index of the child workflow. if this is set, matches on the index or the
	// child key will be a no-op, even if the schedule has changed.
	ChildIndex *int32 `protobuf:"varint,6,opt,name=child_index,json=childIndex,proto3,oneof" json:"child_index,omitempty"`
	// (optional) the key for the child. if this is set, matches on the index or the
	// child key will be a no-op, even if the schedule has changed.
	ChildKey *string `protobuf:"bytes,7,opt,name=child_key,json=childKey,proto3,oneof" json:"child_key,omitempty"`
}

func (x *ScheduleWorkflowRequest) Reset() {
	*x = ScheduleWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleWorkflowRequest) ProtoMessage() {}

func (x *ScheduleWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleWorkflowRequest.ProtoReflect.Descriptor instead.
func (*ScheduleWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{8}
}

func (x *ScheduleWorkflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduleWorkflowRequest) GetSchedules() []*timestamppb.Timestamp {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *ScheduleWorkflowRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *ScheduleWorkflowRequest) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ScheduleWorkflowRequest) GetParentStepRunId() string {
	if x != nil && x.ParentStepRunId != nil {
		return *x.ParentStepRunId
	}
	return ""
}

func (x *ScheduleWorkflowRequest) GetChildIndex() int32 {
	if x != nil && x.ChildIndex != nil {
		return *x.ChildIndex
	}
	return 0
}

func (x *ScheduleWorkflowRequest) GetChildKey() string {
	if x != nil && x.ChildKey != nil {
		return *x.ChildKey
	}
	return ""
}

// WorkflowVersion represents the WorkflowVersion model.
type WorkflowVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Version    string                 `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Order      int32                  `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
	WorkflowId string                 `protobuf:"bytes,7,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *WorkflowVersion) Reset() {
	*x = WorkflowVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowVersion) ProtoMessage() {}

func (x *WorkflowVersion) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowVersion.ProtoReflect.Descriptor instead.
func (*WorkflowVersion) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{9}
}

func (x *WorkflowVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowVersion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkflowVersion) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WorkflowVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkflowVersion) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *WorkflowVersion) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

// WorkflowTriggerEventRef represents the WorkflowTriggerEventRef model.
type WorkflowTriggerEventRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	EventKey string `protobuf:"bytes,2,opt,name=event_key,json=eventKey,proto3" json:"event_key,omitempty"`
}

func (x *WorkflowTriggerEventRef) Reset() {
	*x = WorkflowTriggerEventRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTriggerEventRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTriggerEventRef) ProtoMessage() {}

func (x *WorkflowTriggerEventRef) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTriggerEventRef.ProtoReflect.Descriptor instead.
func (*WorkflowTriggerEventRef) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{10}
}

func (x *WorkflowTriggerEventRef) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *WorkflowTriggerEventRef) GetEventKey() string {
	if x != nil {
		return x.EventKey
	}
	return ""
}

// WorkflowTriggerCronRef represents the WorkflowTriggerCronRef model.
type WorkflowTriggerCronRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Cron     string `protobuf:"bytes,2,opt,name=cron,proto3" json:"cron,omitempty"`
}

func (x *WorkflowTriggerCronRef) Reset() {
	*x = WorkflowTriggerCronRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTriggerCronRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTriggerCronRef) ProtoMessage() {}

func (x *WorkflowTriggerCronRef) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTriggerCronRef.ProtoReflect.Descriptor instead.
func (*WorkflowTriggerCronRef) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{11}
}

func (x *WorkflowTriggerCronRef) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *WorkflowTriggerCronRef) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

type TriggerWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (optional) the input data for the workflow
	Input string `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	// (optional) the parent workflow run id
	ParentId *string `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	// (optional) the parent step run id
	ParentStepRunId *string `protobuf:"bytes,4,opt,name=parent_step_run_id,json=parentStepRunId,proto3,oneof" json:"parent_step_run_id,omitempty"`
	// (optional) the index of the child workflow. if this is set, matches on the index or the
	// child key will return an existing workflow run if the parent id, parent step run id, and
	// child index/key match an existing workflow run.
	ChildIndex *int32 `protobuf:"varint,5,opt,name=child_index,json=childIndex,proto3,oneof" json:"child_index,omitempty"`
	// (optional) the key for the child. if this is set, matches on the index or the
	// child key will return an existing workflow run if the parent id, parent step run id, and
	// child index/key match an existing workflow run.
	ChildKey *string `protobuf:"bytes,6,opt,name=child_key,json=childKey,proto3,oneof" json:"child_key,omitempty"`
	// (optional) additional metadata for the workflow
	AdditionalMetadata *string `protobuf:"bytes,7,opt,name=additional_metadata,json=additionalMetadata,proto3,oneof" json:"additional_metadata,omitempty"`
	// (optional) desired worker id for the workflow run,
	// requires the workflow definition to have a sticky strategy
	DesiredWorkerId *string `protobuf:"bytes,8,opt,name=desired_worker_id,json=desiredWorkerId,proto3,oneof" json:"desired_worker_id,omitempty"`
}

func (x *TriggerWorkflowRequest) Reset() {
	*x = TriggerWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerWorkflowRequest) ProtoMessage() {}

func (x *TriggerWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerWorkflowRequest.ProtoReflect.Descriptor instead.
func (*TriggerWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{12}
}

func (x *TriggerWorkflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerWorkflowRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TriggerWorkflowRequest) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *TriggerWorkflowRequest) GetParentStepRunId() string {
	if x != nil && x.ParentStepRunId != nil {
		return *x.ParentStepRunId
	}
	return ""
}

func (x *TriggerWorkflowRequest) GetChildIndex() int32 {
	if x != nil && x.ChildIndex != nil {
		return *x.ChildIndex
	}
	return 0
}

func (x *TriggerWorkflowRequest) GetChildKey() string {
	if x != nil && x.ChildKey != nil {
		return *x.ChildKey
	}
	return ""
}

func (x *TriggerWorkflowRequest) GetAdditionalMetadata() string {
	if x != nil && x.AdditionalMetadata != nil {
		return *x.AdditionalMetadata
	}
	return ""
}

func (x *TriggerWorkflowRequest) GetDesiredWorkerId() string {
	if x != nil && x.DesiredWorkerId != nil {
		return *x.DesiredWorkerId
	}
	return ""
}

type TriggerWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowRunId string `protobuf:"bytes,1,opt,name=workflow_run_id,json=workflowRunId,proto3" json:"workflow_run_id,omitempty"`
}

func (x *TriggerWorkflowResponse) Reset() {
	*x = TriggerWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerWorkflowResponse) ProtoMessage() {}

func (x *TriggerWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerWorkflowResponse.ProtoReflect.Descriptor instead.
func (*TriggerWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{13}
}

func (x *TriggerWorkflowResponse) GetWorkflowRunId() string {
	if x != nil {
		return x.WorkflowRunId
	}
	return ""
}

type PutRateLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (required) the global key for the rate limit
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// (required) the max limit for the rate limit (per unit of time)
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// (required) the duration of time for the rate limit (second|minute|hour)
	Duration RateLimitDuration `protobuf:"varint,3,opt,name=duration,proto3,enum=RateLimitDuration" json:"duration,omitempty"`
}

func (x *PutRateLimitRequest) Reset() {
	*x = PutRateLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRateLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRateLimitRequest) ProtoMessage() {}

func (x *PutRateLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRateLimitRequest.ProtoReflect.Descriptor instead.
func (*PutRateLimitRequest) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{14}
}

func (x *PutRateLimitRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutRateLimitRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PutRateLimitRequest) GetDuration() RateLimitDuration {
	if x != nil {
		return x.Duration
	}
	return RateLimitDuration_SECOND
}

type PutRateLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutRateLimitResponse) Reset() {
	*x = PutRateLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRateLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRateLimitResponse) ProtoMessage() {}

func (x *PutRateLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRateLimitResponse.ProtoReflect.Descriptor instead.
func (*PutRateLimitResponse) Descriptor() ([]byte, []int) {
	return file_workflows_proto_rawDescGZIP(), []int{15}
}

var File_workflows_proto protoreflect.FileDescriptor

var file_workflows_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x44, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x73, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x22, 0xf1, 0x04, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a,
	0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4f,
	0x70, 0x74, 0x73, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0e, 0x6f, 0x6e, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x73, 0x48, 0x02, 0x52, 0x0c, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6a, 0x6f,
	0x62, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x22, 0x8e, 0x01, 0x0a,
	0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x82, 0x01,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65,
	0x70, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x22, 0x93, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb2, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x4f,
	0x70, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x65, 0x70, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x55, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xdc, 0x02, 0x0a, 0x17, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x53,
	0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x22, 0x49, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x22, 0xb6,
	0x03, 0x0a, 0x16, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x12,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x17, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x13, 0x50, 0x75,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x75, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2a, 0x24, 0x0a, 0x0e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x41, 0x52, 0x44, 0x10, 0x01, 0x2a, 0x6c, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f,
	0x42, 0x49, 0x4e, 0x10, 0x03, 0x2a, 0x85, 0x01, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0x5d, 0x0a,
	0x11, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f,
	0x55, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10, 0x06, 0x32, 0x8a, 0x02, 0x0a,
	0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x0b, 0x50, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x13, 0x2e, 0x50, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c,
	0x50, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x2e, 0x50,
	0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x2d,
	0x64, 0x65, 0x76, 0x2f, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_workflows_proto_rawDescOnce sync.Once
	file_workflows_proto_rawDescData = file_workflows_proto_rawDesc
)

func file_workflows_proto_rawDescGZIP() []byte {
	file_workflows_proto_rawDescOnce.Do(func() {
		file_workflows_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflows_proto_rawDescData)
	})
	return file_workflows_proto_rawDescData
}

var file_workflows_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_workflows_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_workflows_proto_goTypes = []interface{}{
	(StickyStrategy)(0),               // 0: StickyStrategy
	(ConcurrencyLimitStrategy)(0),     // 1: ConcurrencyLimitStrategy
	(WorkerLabelComparator)(0),        // 2: WorkerLabelComparator
	(RateLimitDuration)(0),            // 3: RateLimitDuration
	(*PutWorkflowRequest)(nil),        // 4: PutWorkflowRequest
	(*CreateWorkflowVersionOpts)(nil), // 5: CreateWorkflowVersionOpts
	(*WorkflowConcurrencyOpts)(nil),   // 6: WorkflowConcurrencyOpts
	(*CreateWorkflowJobOpts)(nil),     // 7: CreateWorkflowJobOpts
	(*DesiredWorkerLabels)(nil),       // 8: DesiredWorkerLabels
	(*CreateWorkflowStepOpts)(nil),    // 9: CreateWorkflowStepOpts
	(*CreateStepRateLimit)(nil),       // 10: CreateStepRateLimit
	(*ListWorkflowsRequest)(nil),      // 11: ListWorkflowsRequest
	(*ScheduleWorkflowRequest)(nil),   // 12: ScheduleWorkflowRequest
	(*WorkflowVersion)(nil),           // 13: WorkflowVersion
	(*WorkflowTriggerEventRef)(nil),   // 14: WorkflowTriggerEventRef
	(*WorkflowTriggerCronRef)(nil),    // 15: WorkflowTriggerCronRef
	(*TriggerWorkflowRequest)(nil),    // 16: TriggerWorkflowRequest
	(*TriggerWorkflowResponse)(nil),   // 17: TriggerWorkflowResponse
	(*PutRateLimitRequest)(nil),       // 18: PutRateLimitRequest
	(*PutRateLimitResponse)(nil),      // 19: PutRateLimitResponse
	nil,                               // 20: CreateWorkflowStepOpts.WorkerLabelsEntry
	(*timestamppb.Timestamp)(nil),     // 21: google.protobuf.Timestamp
}
var file_workflows_proto_depIdxs = []int32{
	5,  // 0: PutWorkflowRequest.opts:type_name -> CreateWorkflowVersionOpts
	21, // 1: CreateWorkflowVersionOpts.scheduled_triggers:type_name -> google.protobuf.Timestamp
	7,  // 2: CreateWorkflowVersionOpts.jobs:type_name -> CreateWorkflowJobOpts
	6,  // 3: CreateWorkflowVersionOpts.concurrency:type_name -> WorkflowConcurrencyOpts
	7,  // 4: CreateWorkflowVersionOpts.on_failure_job:type_name -> CreateWorkflowJobOpts
	0,  // 5: CreateWorkflowVersionOpts.sticky:type_name -> StickyStrategy
	1,  // 6: WorkflowConcurrencyOpts.limit_strategy:type_name -> ConcurrencyLimitStrategy
	9,  // 7: CreateWorkflowJobOpts.steps:type_name -> CreateWorkflowStepOpts
	2,  // 8: DesiredWorkerLabels.comparator:type_name -> WorkerLabelComparator
	10, // 9: CreateWorkflowStepOpts.rate_limits:type_name -> CreateStepRateLimit
	20, // 10: CreateWorkflowStepOpts.worker_labels:type_name -> CreateWorkflowStepOpts.WorkerLabelsEntry
	21, // 11: ScheduleWorkflowRequest.schedules:type_name -> google.protobuf.Timestamp
	21, // 12: WorkflowVersion.created_at:type_name -> google.protobuf.Timestamp
	21, // 13: WorkflowVersion.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 14: PutRateLimitRequest.duration:type_name -> RateLimitDuration
	8,  // 15: CreateWorkflowStepOpts.WorkerLabelsEntry.value:type_name -> DesiredWorkerLabels
	4,  // 16: WorkflowService.PutWorkflow:input_type -> PutWorkflowRequest
	12, // 17: WorkflowService.ScheduleWorkflow:input_type -> ScheduleWorkflowRequest
	16, // 18: WorkflowService.TriggerWorkflow:input_type -> TriggerWorkflowRequest
	18, // 19: WorkflowService.PutRateLimit:input_type -> PutRateLimitRequest
	13, // 20: WorkflowService.PutWorkflow:output_type -> WorkflowVersion
	13, // 21: WorkflowService.ScheduleWorkflow:output_type -> WorkflowVersion
	17, // 22: WorkflowService.TriggerWorkflow:output_type -> TriggerWorkflowResponse
	19, // 23: WorkflowService.PutRateLimit:output_type -> PutRateLimitResponse
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_workflows_proto_init() }
func file_workflows_proto_init() {
	if File_workflows_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workflows_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowVersionOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowConcurrencyOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowJobOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredWorkerLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowStepOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStepRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTriggerEventRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTriggerCronRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRateLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRateLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_workflows_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_workflows_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_workflows_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_workflows_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflows_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflows_proto_goTypes,
		DependencyIndexes: file_workflows_proto_depIdxs,
		EnumInfos:         file_workflows_proto_enumTypes,
		MessageInfos:      file_workflows_proto_msgTypes,
	}.Build()
	File_workflows_proto = out.File
	file_workflows_proto_rawDesc = nil
	file_workflows_proto_goTypes = nil
	file_workflows_proto_depIdxs = nil
}
