// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.29.3
// source: v1/shared/condition.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action int32

const (
	Action_CREATE Action = 0
	Action_QUEUE  Action = 1
	Action_CANCEL Action = 2
	Action_SKIP   Action = 3
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "CREATE",
		1: "QUEUE",
		2: "CANCEL",
		3: "SKIP",
	}
	Action_value = map[string]int32{
		"CREATE": 0,
		"QUEUE":  1,
		"CANCEL": 2,
		"SKIP":   3,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_shared_condition_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_v1_shared_condition_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_v1_shared_condition_proto_rawDescGZIP(), []int{0}
}

type BaseMatchCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadableDataKey string `protobuf:"bytes,1,opt,name=readable_data_key,json=readableDataKey,proto3" json:"readable_data_key,omitempty"`
	Action          Action `protobuf:"varint,2,opt,name=action,proto3,enum=v1.Action" json:"action,omitempty"`
	OrGroupId       string `protobuf:"bytes,3,opt,name=or_group_id,json=orGroupId,proto3" json:"or_group_id,omitempty"` // a UUID defining the OR group for this condition
	Expression      string `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *BaseMatchCondition) Reset() {
	*x = BaseMatchCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_shared_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseMatchCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseMatchCondition) ProtoMessage() {}

func (x *BaseMatchCondition) ProtoReflect() protoreflect.Message {
	mi := &file_v1_shared_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseMatchCondition.ProtoReflect.Descriptor instead.
func (*BaseMatchCondition) Descriptor() ([]byte, []int) {
	return file_v1_shared_condition_proto_rawDescGZIP(), []int{0}
}

func (x *BaseMatchCondition) GetReadableDataKey() string {
	if x != nil {
		return x.ReadableDataKey
	}
	return ""
}

func (x *BaseMatchCondition) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_CREATE
}

func (x *BaseMatchCondition) GetOrGroupId() string {
	if x != nil {
		return x.OrGroupId
	}
	return ""
}

func (x *BaseMatchCondition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type ParentOverrideMatchCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base             *BaseMatchCondition `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ParentReadableId string              `protobuf:"bytes,2,opt,name=parent_readable_id,json=parentReadableId,proto3" json:"parent_readable_id,omitempty"`
}

func (x *ParentOverrideMatchCondition) Reset() {
	*x = ParentOverrideMatchCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_shared_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentOverrideMatchCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentOverrideMatchCondition) ProtoMessage() {}

func (x *ParentOverrideMatchCondition) ProtoReflect() protoreflect.Message {
	mi := &file_v1_shared_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentOverrideMatchCondition.ProtoReflect.Descriptor instead.
func (*ParentOverrideMatchCondition) Descriptor() ([]byte, []int) {
	return file_v1_shared_condition_proto_rawDescGZIP(), []int{1}
}

func (x *ParentOverrideMatchCondition) GetBase() *BaseMatchCondition {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ParentOverrideMatchCondition) GetParentReadableId() string {
	if x != nil {
		return x.ParentReadableId
	}
	return ""
}

type SleepMatchCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *BaseMatchCondition `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SleepFor string              `protobuf:"bytes,2,opt,name=sleep_for,json=sleepFor,proto3" json:"sleep_for,omitempty"` // a duration string indicating how long to sleep
}

func (x *SleepMatchCondition) Reset() {
	*x = SleepMatchCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_shared_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepMatchCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepMatchCondition) ProtoMessage() {}

func (x *SleepMatchCondition) ProtoReflect() protoreflect.Message {
	mi := &file_v1_shared_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepMatchCondition.ProtoReflect.Descriptor instead.
func (*SleepMatchCondition) Descriptor() ([]byte, []int) {
	return file_v1_shared_condition_proto_rawDescGZIP(), []int{2}
}

func (x *SleepMatchCondition) GetBase() *BaseMatchCondition {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SleepMatchCondition) GetSleepFor() string {
	if x != nil {
		return x.SleepFor
	}
	return ""
}

type UserEventMatchCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *BaseMatchCondition `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	UserEventKey string              `protobuf:"bytes,2,opt,name=user_event_key,json=userEventKey,proto3" json:"user_event_key,omitempty"`
}

func (x *UserEventMatchCondition) Reset() {
	*x = UserEventMatchCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_shared_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventMatchCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventMatchCondition) ProtoMessage() {}

func (x *UserEventMatchCondition) ProtoReflect() protoreflect.Message {
	mi := &file_v1_shared_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventMatchCondition.ProtoReflect.Descriptor instead.
func (*UserEventMatchCondition) Descriptor() ([]byte, []int) {
	return file_v1_shared_condition_proto_rawDescGZIP(), []int{3}
}

func (x *UserEventMatchCondition) GetBase() *BaseMatchCondition {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UserEventMatchCondition) GetUserEventKey() string {
	if x != nil {
		return x.UserEventKey
	}
	return ""
}

type TaskConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentOverrideConditions []*ParentOverrideMatchCondition `protobuf:"bytes,1,rep,name=parent_override_conditions,json=parentOverrideConditions,proto3" json:"parent_override_conditions,omitempty"`
	SleepConditions          []*SleepMatchCondition          `protobuf:"bytes,2,rep,name=sleep_conditions,json=sleepConditions,proto3" json:"sleep_conditions,omitempty"`
	UserEventConditions      []*UserEventMatchCondition      `protobuf:"bytes,3,rep,name=user_event_conditions,json=userEventConditions,proto3" json:"user_event_conditions,omitempty"`
}

func (x *TaskConditions) Reset() {
	*x = TaskConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_shared_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConditions) ProtoMessage() {}

func (x *TaskConditions) ProtoReflect() protoreflect.Message {
	mi := &file_v1_shared_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConditions.ProtoReflect.Descriptor instead.
func (*TaskConditions) Descriptor() ([]byte, []int) {
	return file_v1_shared_condition_proto_rawDescGZIP(), []int{4}
}

func (x *TaskConditions) GetParentOverrideConditions() []*ParentOverrideMatchCondition {
	if x != nil {
		return x.ParentOverrideConditions
	}
	return nil
}

func (x *TaskConditions) GetSleepConditions() []*SleepMatchCondition {
	if x != nil {
		return x.SleepConditions
	}
	return nil
}

func (x *TaskConditions) GetUserEventConditions() []*UserEventMatchCondition {
	if x != nil {
		return x.UserEventConditions
	}
	return nil
}

type DurableEventListenerConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SleepConditions     []*SleepMatchCondition     `protobuf:"bytes,1,rep,name=sleep_conditions,json=sleepConditions,proto3" json:"sleep_conditions,omitempty"`
	UserEventConditions []*UserEventMatchCondition `protobuf:"bytes,2,rep,name=user_event_conditions,json=userEventConditions,proto3" json:"user_event_conditions,omitempty"`
}

func (x *DurableEventListenerConditions) Reset() {
	*x = DurableEventListenerConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_shared_condition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurableEventListenerConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurableEventListenerConditions) ProtoMessage() {}

func (x *DurableEventListenerConditions) ProtoReflect() protoreflect.Message {
	mi := &file_v1_shared_condition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurableEventListenerConditions.ProtoReflect.Descriptor instead.
func (*DurableEventListenerConditions) Descriptor() ([]byte, []int) {
	return file_v1_shared_condition_proto_rawDescGZIP(), []int{5}
}

func (x *DurableEventListenerConditions) GetSleepConditions() []*SleepMatchCondition {
	if x != nil {
		return x.SleepConditions
	}
	return nil
}

func (x *DurableEventListenerConditions) GetUserEventConditions() []*UserEventMatchCondition {
	if x != nil {
		return x.UserEventConditions
	}
	return nil
}

var File_v1_shared_condition_proto protoreflect.FileDescriptor

var file_v1_shared_condition_proto_rawDesc = []byte{
	0x0a, 0x19, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x22,
	0xa4, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x5e, 0x0a, 0x13, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x66, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x46, 0x6f, 0x72,
	0x22, 0x6b, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x85, 0x02,
	0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5e, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x42, 0x0a, 0x10, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x1e, 0x44, 0x75, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x6c, 0x65, 0x65,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x15,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x35, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b,
	0x49, 0x50, 0x10, 0x03, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x68,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_shared_condition_proto_rawDescOnce sync.Once
	file_v1_shared_condition_proto_rawDescData = file_v1_shared_condition_proto_rawDesc
)

func file_v1_shared_condition_proto_rawDescGZIP() []byte {
	file_v1_shared_condition_proto_rawDescOnce.Do(func() {
		file_v1_shared_condition_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_shared_condition_proto_rawDescData)
	})
	return file_v1_shared_condition_proto_rawDescData
}

var file_v1_shared_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_shared_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_v1_shared_condition_proto_goTypes = []interface{}{
	(Action)(0),                            // 0: v1.Action
	(*BaseMatchCondition)(nil),             // 1: v1.BaseMatchCondition
	(*ParentOverrideMatchCondition)(nil),   // 2: v1.ParentOverrideMatchCondition
	(*SleepMatchCondition)(nil),            // 3: v1.SleepMatchCondition
	(*UserEventMatchCondition)(nil),        // 4: v1.UserEventMatchCondition
	(*TaskConditions)(nil),                 // 5: v1.TaskConditions
	(*DurableEventListenerConditions)(nil), // 6: v1.DurableEventListenerConditions
}
var file_v1_shared_condition_proto_depIdxs = []int32{
	0, // 0: v1.BaseMatchCondition.action:type_name -> v1.Action
	1, // 1: v1.ParentOverrideMatchCondition.base:type_name -> v1.BaseMatchCondition
	1, // 2: v1.SleepMatchCondition.base:type_name -> v1.BaseMatchCondition
	1, // 3: v1.UserEventMatchCondition.base:type_name -> v1.BaseMatchCondition
	2, // 4: v1.TaskConditions.parent_override_conditions:type_name -> v1.ParentOverrideMatchCondition
	3, // 5: v1.TaskConditions.sleep_conditions:type_name -> v1.SleepMatchCondition
	4, // 6: v1.TaskConditions.user_event_conditions:type_name -> v1.UserEventMatchCondition
	3, // 7: v1.DurableEventListenerConditions.sleep_conditions:type_name -> v1.SleepMatchCondition
	4, // 8: v1.DurableEventListenerConditions.user_event_conditions:type_name -> v1.UserEventMatchCondition
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_v1_shared_condition_proto_init() }
func file_v1_shared_condition_proto_init() {
	if File_v1_shared_condition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_shared_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseMatchCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_shared_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentOverrideMatchCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_shared_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepMatchCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_shared_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventMatchCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_shared_condition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_shared_condition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurableEventListenerConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_shared_condition_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_shared_condition_proto_goTypes,
		DependencyIndexes: file_v1_shared_condition_proto_depIdxs,
		EnumInfos:         file_v1_shared_condition_proto_enumTypes,
		MessageInfos:      file_v1_shared_condition_proto_msgTypes,
	}.Build()
	File_v1_shared_condition_proto = out.File
	file_v1_shared_condition_proto_rawDesc = nil
	file_v1_shared_condition_proto_goTypes = nil
	file_v1_shared_condition_proto_depIdxs = nil
}
