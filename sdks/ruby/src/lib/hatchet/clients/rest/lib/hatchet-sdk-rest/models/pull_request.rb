=begin
#Hatchet API

#The Hatchet API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module HatchetSdkRest
  class PullRequest
    attr_accessor :repository_owner

    attr_accessor :repository_name

    attr_accessor :pull_request_id

    attr_accessor :pull_request_title

    attr_accessor :pull_request_number

    attr_accessor :pull_request_head_branch

    attr_accessor :pull_request_base_branch

    attr_accessor :pull_request_state

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'repository_owner' => :'repositoryOwner',
        :'repository_name' => :'repositoryName',
        :'pull_request_id' => :'pullRequestID',
        :'pull_request_title' => :'pullRequestTitle',
        :'pull_request_number' => :'pullRequestNumber',
        :'pull_request_head_branch' => :'pullRequestHeadBranch',
        :'pull_request_base_branch' => :'pullRequestBaseBranch',
        :'pull_request_state' => :'pullRequestState'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'repository_owner' => :'String',
        :'repository_name' => :'String',
        :'pull_request_id' => :'Integer',
        :'pull_request_title' => :'String',
        :'pull_request_number' => :'Integer',
        :'pull_request_head_branch' => :'String',
        :'pull_request_base_branch' => :'String',
        :'pull_request_state' => :'PullRequestState'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `HatchetSdkRest::PullRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `HatchetSdkRest::PullRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'repository_owner')
        self.repository_owner = attributes[:'repository_owner']
      else
        self.repository_owner = nil
      end

      if attributes.key?(:'repository_name')
        self.repository_name = attributes[:'repository_name']
      else
        self.repository_name = nil
      end

      if attributes.key?(:'pull_request_id')
        self.pull_request_id = attributes[:'pull_request_id']
      else
        self.pull_request_id = nil
      end

      if attributes.key?(:'pull_request_title')
        self.pull_request_title = attributes[:'pull_request_title']
      else
        self.pull_request_title = nil
      end

      if attributes.key?(:'pull_request_number')
        self.pull_request_number = attributes[:'pull_request_number']
      else
        self.pull_request_number = nil
      end

      if attributes.key?(:'pull_request_head_branch')
        self.pull_request_head_branch = attributes[:'pull_request_head_branch']
      else
        self.pull_request_head_branch = nil
      end

      if attributes.key?(:'pull_request_base_branch')
        self.pull_request_base_branch = attributes[:'pull_request_base_branch']
      else
        self.pull_request_base_branch = nil
      end

      if attributes.key?(:'pull_request_state')
        self.pull_request_state = attributes[:'pull_request_state']
      else
        self.pull_request_state = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @repository_owner.nil?
        invalid_properties.push('invalid value for "repository_owner", repository_owner cannot be nil.')
      end

      if @repository_name.nil?
        invalid_properties.push('invalid value for "repository_name", repository_name cannot be nil.')
      end

      if @pull_request_id.nil?
        invalid_properties.push('invalid value for "pull_request_id", pull_request_id cannot be nil.')
      end

      if @pull_request_title.nil?
        invalid_properties.push('invalid value for "pull_request_title", pull_request_title cannot be nil.')
      end

      if @pull_request_number.nil?
        invalid_properties.push('invalid value for "pull_request_number", pull_request_number cannot be nil.')
      end

      if @pull_request_head_branch.nil?
        invalid_properties.push('invalid value for "pull_request_head_branch", pull_request_head_branch cannot be nil.')
      end

      if @pull_request_base_branch.nil?
        invalid_properties.push('invalid value for "pull_request_base_branch", pull_request_base_branch cannot be nil.')
      end

      if @pull_request_state.nil?
        invalid_properties.push('invalid value for "pull_request_state", pull_request_state cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @repository_owner.nil?
      return false if @repository_name.nil?
      return false if @pull_request_id.nil?
      return false if @pull_request_title.nil?
      return false if @pull_request_number.nil?
      return false if @pull_request_head_branch.nil?
      return false if @pull_request_base_branch.nil?
      return false if @pull_request_state.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] repository_owner Value to be assigned
    def repository_owner=(repository_owner)
      if repository_owner.nil?
        fail ArgumentError, 'repository_owner cannot be nil'
      end

      @repository_owner = repository_owner
    end

    # Custom attribute writer method with validation
    # @param [Object] repository_name Value to be assigned
    def repository_name=(repository_name)
      if repository_name.nil?
        fail ArgumentError, 'repository_name cannot be nil'
      end

      @repository_name = repository_name
    end

    # Custom attribute writer method with validation
    # @param [Object] pull_request_id Value to be assigned
    def pull_request_id=(pull_request_id)
      if pull_request_id.nil?
        fail ArgumentError, 'pull_request_id cannot be nil'
      end

      @pull_request_id = pull_request_id
    end

    # Custom attribute writer method with validation
    # @param [Object] pull_request_title Value to be assigned
    def pull_request_title=(pull_request_title)
      if pull_request_title.nil?
        fail ArgumentError, 'pull_request_title cannot be nil'
      end

      @pull_request_title = pull_request_title
    end

    # Custom attribute writer method with validation
    # @param [Object] pull_request_number Value to be assigned
    def pull_request_number=(pull_request_number)
      if pull_request_number.nil?
        fail ArgumentError, 'pull_request_number cannot be nil'
      end

      @pull_request_number = pull_request_number
    end

    # Custom attribute writer method with validation
    # @param [Object] pull_request_head_branch Value to be assigned
    def pull_request_head_branch=(pull_request_head_branch)
      if pull_request_head_branch.nil?
        fail ArgumentError, 'pull_request_head_branch cannot be nil'
      end

      @pull_request_head_branch = pull_request_head_branch
    end

    # Custom attribute writer method with validation
    # @param [Object] pull_request_base_branch Value to be assigned
    def pull_request_base_branch=(pull_request_base_branch)
      if pull_request_base_branch.nil?
        fail ArgumentError, 'pull_request_base_branch cannot be nil'
      end

      @pull_request_base_branch = pull_request_base_branch
    end

    # Custom attribute writer method with validation
    # @param [Object] pull_request_state Value to be assigned
    def pull_request_state=(pull_request_state)
      if pull_request_state.nil?
        fail ArgumentError, 'pull_request_state cannot be nil'
      end

      @pull_request_state = pull_request_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          repository_owner == o.repository_owner &&
          repository_name == o.repository_name &&
          pull_request_id == o.pull_request_id &&
          pull_request_title == o.pull_request_title &&
          pull_request_number == o.pull_request_number &&
          pull_request_head_branch == o.pull_request_head_branch &&
          pull_request_base_branch == o.pull_request_base_branch &&
          pull_request_state == o.pull_request_state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [repository_owner, repository_name, pull_request_id, pull_request_title, pull_request_number, pull_request_head_branch, pull_request_base_branch, pull_request_state].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = HatchetSdkRest.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
