=begin
#Hatchet API

#The Hatchet API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module HatchetSdkRest
  class StepRunArchive
    attr_accessor :step_run_id

    attr_accessor :order

    attr_accessor :retry_count

    attr_accessor :created_at

    attr_accessor :input

    attr_accessor :output

    attr_accessor :started_at

    attr_accessor :error

    attr_accessor :started_at_epoch

    attr_accessor :finished_at

    attr_accessor :finished_at_epoch

    attr_accessor :timeout_at

    attr_accessor :timeout_at_epoch

    attr_accessor :cancelled_at

    attr_accessor :cancelled_at_epoch

    attr_accessor :cancelled_reason

    attr_accessor :cancelled_error

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'step_run_id' => :'stepRunId',
        :'order' => :'order',
        :'retry_count' => :'retryCount',
        :'created_at' => :'createdAt',
        :'input' => :'input',
        :'output' => :'output',
        :'started_at' => :'startedAt',
        :'error' => :'error',
        :'started_at_epoch' => :'startedAtEpoch',
        :'finished_at' => :'finishedAt',
        :'finished_at_epoch' => :'finishedAtEpoch',
        :'timeout_at' => :'timeoutAt',
        :'timeout_at_epoch' => :'timeoutAtEpoch',
        :'cancelled_at' => :'cancelledAt',
        :'cancelled_at_epoch' => :'cancelledAtEpoch',
        :'cancelled_reason' => :'cancelledReason',
        :'cancelled_error' => :'cancelledError'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'step_run_id' => :'String',
        :'order' => :'Integer',
        :'retry_count' => :'Integer',
        :'created_at' => :'Time',
        :'input' => :'String',
        :'output' => :'String',
        :'started_at' => :'Time',
        :'error' => :'String',
        :'started_at_epoch' => :'Integer',
        :'finished_at' => :'Time',
        :'finished_at_epoch' => :'Integer',
        :'timeout_at' => :'Time',
        :'timeout_at_epoch' => :'Integer',
        :'cancelled_at' => :'Time',
        :'cancelled_at_epoch' => :'Integer',
        :'cancelled_reason' => :'String',
        :'cancelled_error' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `HatchetSdkRest::StepRunArchive` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `HatchetSdkRest::StepRunArchive`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'step_run_id')
        self.step_run_id = attributes[:'step_run_id']
      else
        self.step_run_id = nil
      end

      if attributes.key?(:'order')
        self.order = attributes[:'order']
      else
        self.order = nil
      end

      if attributes.key?(:'retry_count')
        self.retry_count = attributes[:'retry_count']
      else
        self.retry_count = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'input')
        self.input = attributes[:'input']
      end

      if attributes.key?(:'output')
        self.output = attributes[:'output']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'started_at_epoch')
        self.started_at_epoch = attributes[:'started_at_epoch']
      end

      if attributes.key?(:'finished_at')
        self.finished_at = attributes[:'finished_at']
      end

      if attributes.key?(:'finished_at_epoch')
        self.finished_at_epoch = attributes[:'finished_at_epoch']
      end

      if attributes.key?(:'timeout_at')
        self.timeout_at = attributes[:'timeout_at']
      end

      if attributes.key?(:'timeout_at_epoch')
        self.timeout_at_epoch = attributes[:'timeout_at_epoch']
      end

      if attributes.key?(:'cancelled_at')
        self.cancelled_at = attributes[:'cancelled_at']
      end

      if attributes.key?(:'cancelled_at_epoch')
        self.cancelled_at_epoch = attributes[:'cancelled_at_epoch']
      end

      if attributes.key?(:'cancelled_reason')
        self.cancelled_reason = attributes[:'cancelled_reason']
      end

      if attributes.key?(:'cancelled_error')
        self.cancelled_error = attributes[:'cancelled_error']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @step_run_id.nil?
        invalid_properties.push('invalid value for "step_run_id", step_run_id cannot be nil.')
      end

      if @order.nil?
        invalid_properties.push('invalid value for "order", order cannot be nil.')
      end

      if @retry_count.nil?
        invalid_properties.push('invalid value for "retry_count", retry_count cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @step_run_id.nil?
      return false if @order.nil?
      return false if @retry_count.nil?
      return false if @created_at.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] step_run_id Value to be assigned
    def step_run_id=(step_run_id)
      if step_run_id.nil?
        fail ArgumentError, 'step_run_id cannot be nil'
      end

      @step_run_id = step_run_id
    end

    # Custom attribute writer method with validation
    # @param [Object] order Value to be assigned
    def order=(order)
      if order.nil?
        fail ArgumentError, 'order cannot be nil'
      end

      @order = order
    end

    # Custom attribute writer method with validation
    # @param [Object] retry_count Value to be assigned
    def retry_count=(retry_count)
      if retry_count.nil?
        fail ArgumentError, 'retry_count cannot be nil'
      end

      @retry_count = retry_count
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          step_run_id == o.step_run_id &&
          order == o.order &&
          retry_count == o.retry_count &&
          created_at == o.created_at &&
          input == o.input &&
          output == o.output &&
          started_at == o.started_at &&
          error == o.error &&
          started_at_epoch == o.started_at_epoch &&
          finished_at == o.finished_at &&
          finished_at_epoch == o.finished_at_epoch &&
          timeout_at == o.timeout_at &&
          timeout_at_epoch == o.timeout_at_epoch &&
          cancelled_at == o.cancelled_at &&
          cancelled_at_epoch == o.cancelled_at_epoch &&
          cancelled_reason == o.cancelled_reason &&
          cancelled_error == o.cancelled_error
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [step_run_id, order, retry_count, created_at, input, output, started_at, error, started_at_epoch, finished_at, finished_at_epoch, timeout_at, timeout_at_epoch, cancelled_at, cancelled_at_epoch, cancelled_reason, cancelled_error].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = HatchetSdkRest.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
