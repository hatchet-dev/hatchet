=begin
#Hatchet API

#The Hatchet API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module HatchetSdkRest
  class StepRunEvent
    attr_accessor :id

    attr_accessor :time_first_seen

    attr_accessor :time_last_seen

    attr_accessor :reason

    attr_accessor :severity

    attr_accessor :message

    attr_accessor :count

    attr_accessor :step_run_id

    attr_accessor :workflow_run_id

    attr_accessor :data

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'time_first_seen' => :'timeFirstSeen',
        :'time_last_seen' => :'timeLastSeen',
        :'reason' => :'reason',
        :'severity' => :'severity',
        :'message' => :'message',
        :'count' => :'count',
        :'step_run_id' => :'stepRunId',
        :'workflow_run_id' => :'workflowRunId',
        :'data' => :'data'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'time_first_seen' => :'Time',
        :'time_last_seen' => :'Time',
        :'reason' => :'StepRunEventReason',
        :'severity' => :'StepRunEventSeverity',
        :'message' => :'String',
        :'count' => :'Integer',
        :'step_run_id' => :'String',
        :'workflow_run_id' => :'String',
        :'data' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `HatchetSdkRest::StepRunEvent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `HatchetSdkRest::StepRunEvent`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'time_first_seen')
        self.time_first_seen = attributes[:'time_first_seen']
      else
        self.time_first_seen = nil
      end

      if attributes.key?(:'time_last_seen')
        self.time_last_seen = attributes[:'time_last_seen']
      else
        self.time_last_seen = nil
      end

      if attributes.key?(:'reason')
        self.reason = attributes[:'reason']
      else
        self.reason = nil
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      else
        self.severity = nil
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      else
        self.message = nil
      end

      if attributes.key?(:'count')
        self.count = attributes[:'count']
      else
        self.count = nil
      end

      if attributes.key?(:'step_run_id')
        self.step_run_id = attributes[:'step_run_id']
      end

      if attributes.key?(:'workflow_run_id')
        self.workflow_run_id = attributes[:'workflow_run_id']
      end

      if attributes.key?(:'data')
        self.data = attributes[:'data']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @time_first_seen.nil?
        invalid_properties.push('invalid value for "time_first_seen", time_first_seen cannot be nil.')
      end

      if @time_last_seen.nil?
        invalid_properties.push('invalid value for "time_last_seen", time_last_seen cannot be nil.')
      end

      if @reason.nil?
        invalid_properties.push('invalid value for "reason", reason cannot be nil.')
      end

      if @severity.nil?
        invalid_properties.push('invalid value for "severity", severity cannot be nil.')
      end

      if @message.nil?
        invalid_properties.push('invalid value for "message", message cannot be nil.')
      end

      if @count.nil?
        invalid_properties.push('invalid value for "count", count cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @time_first_seen.nil?
      return false if @time_last_seen.nil?
      return false if @reason.nil?
      return false if @severity.nil?
      return false if @message.nil?
      return false if @count.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] time_first_seen Value to be assigned
    def time_first_seen=(time_first_seen)
      if time_first_seen.nil?
        fail ArgumentError, 'time_first_seen cannot be nil'
      end

      @time_first_seen = time_first_seen
    end

    # Custom attribute writer method with validation
    # @param [Object] time_last_seen Value to be assigned
    def time_last_seen=(time_last_seen)
      if time_last_seen.nil?
        fail ArgumentError, 'time_last_seen cannot be nil'
      end

      @time_last_seen = time_last_seen
    end

    # Custom attribute writer method with validation
    # @param [Object] reason Value to be assigned
    def reason=(reason)
      if reason.nil?
        fail ArgumentError, 'reason cannot be nil'
      end

      @reason = reason
    end

    # Custom attribute writer method with validation
    # @param [Object] severity Value to be assigned
    def severity=(severity)
      if severity.nil?
        fail ArgumentError, 'severity cannot be nil'
      end

      @severity = severity
    end

    # Custom attribute writer method with validation
    # @param [Object] message Value to be assigned
    def message=(message)
      if message.nil?
        fail ArgumentError, 'message cannot be nil'
      end

      @message = message
    end

    # Custom attribute writer method with validation
    # @param [Object] count Value to be assigned
    def count=(count)
      if count.nil?
        fail ArgumentError, 'count cannot be nil'
      end

      @count = count
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          time_first_seen == o.time_first_seen &&
          time_last_seen == o.time_last_seen &&
          reason == o.reason &&
          severity == o.severity &&
          message == o.message &&
          count == o.count &&
          step_run_id == o.step_run_id &&
          workflow_run_id == o.workflow_run_id &&
          data == o.data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, time_first_seen, time_last_seen, reason, severity, message, count, step_run_id, workflow_run_id, data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = HatchetSdkRest.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
