=begin
#Hatchet API

#The Hatchet API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module HatchetSdkRest
  class Worker
    attr_accessor :metadata

    # The name of the worker.
    attr_accessor :name

    attr_accessor :type

    # The time this worker last sent a heartbeat.
    attr_accessor :last_heartbeat_at

    # The time this worker last sent a heartbeat.
    attr_accessor :last_listener_established

    # The actions this worker can perform.
    attr_accessor :actions

    # The semaphore slot state for the worker.
    attr_accessor :slots

    # The recent step runs for the worker.
    attr_accessor :recent_step_runs

    # The status of the worker.
    attr_accessor :status

    # The maximum number of runs this worker can execute concurrently.
    attr_accessor :max_runs

    # The number of runs this worker can execute concurrently.
    attr_accessor :available_runs

    # the id of the assigned dispatcher, in UUID format
    attr_accessor :dispatcher_id

    # The current label state of the worker.
    attr_accessor :labels

    # The webhook URL for the worker.
    attr_accessor :webhook_url

    # The webhook ID for the worker.
    attr_accessor :webhook_id

    attr_accessor :runtime_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'metadata' => :'metadata',
        :'name' => :'name',
        :'type' => :'type',
        :'last_heartbeat_at' => :'lastHeartbeatAt',
        :'last_listener_established' => :'lastListenerEstablished',
        :'actions' => :'actions',
        :'slots' => :'slots',
        :'recent_step_runs' => :'recentStepRuns',
        :'status' => :'status',
        :'max_runs' => :'maxRuns',
        :'available_runs' => :'availableRuns',
        :'dispatcher_id' => :'dispatcherId',
        :'labels' => :'labels',
        :'webhook_url' => :'webhookUrl',
        :'webhook_id' => :'webhookId',
        :'runtime_info' => :'runtimeInfo'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'metadata' => :'APIResourceMeta',
        :'name' => :'String',
        :'type' => :'WorkerType',
        :'last_heartbeat_at' => :'Time',
        :'last_listener_established' => :'Time',
        :'actions' => :'Array<String>',
        :'slots' => :'Array<SemaphoreSlots>',
        :'recent_step_runs' => :'Array<RecentStepRuns>',
        :'status' => :'String',
        :'max_runs' => :'Integer',
        :'available_runs' => :'Integer',
        :'dispatcher_id' => :'String',
        :'labels' => :'Array<WorkerLabel>',
        :'webhook_url' => :'String',
        :'webhook_id' => :'String',
        :'runtime_info' => :'WorkerRuntimeInfo'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `HatchetSdkRest::Worker` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `HatchetSdkRest::Worker`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      else
        self.metadata = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'last_heartbeat_at')
        self.last_heartbeat_at = attributes[:'last_heartbeat_at']
      end

      if attributes.key?(:'last_listener_established')
        self.last_listener_established = attributes[:'last_listener_established']
      end

      if attributes.key?(:'actions')
        if (value = attributes[:'actions']).is_a?(Array)
          self.actions = value
        end
      end

      if attributes.key?(:'slots')
        if (value = attributes[:'slots']).is_a?(Array)
          self.slots = value
        end
      end

      if attributes.key?(:'recent_step_runs')
        if (value = attributes[:'recent_step_runs']).is_a?(Array)
          self.recent_step_runs = value
        end
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'max_runs')
        self.max_runs = attributes[:'max_runs']
      end

      if attributes.key?(:'available_runs')
        self.available_runs = attributes[:'available_runs']
      end

      if attributes.key?(:'dispatcher_id')
        self.dispatcher_id = attributes[:'dispatcher_id']
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'webhook_url')
        self.webhook_url = attributes[:'webhook_url']
      end

      if attributes.key?(:'webhook_id')
        self.webhook_id = attributes[:'webhook_id']
      end

      if attributes.key?(:'runtime_info')
        self.runtime_info = attributes[:'runtime_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @metadata.nil?
        invalid_properties.push('invalid value for "metadata", metadata cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if !@dispatcher_id.nil? && @dispatcher_id.to_s.length > 36
        invalid_properties.push('invalid value for "dispatcher_id", the character length must be smaller than or equal to 36.')
      end

      if !@dispatcher_id.nil? && @dispatcher_id.to_s.length < 36
        invalid_properties.push('invalid value for "dispatcher_id", the character length must be greater than or equal to 36.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @metadata.nil?
      return false if @name.nil?
      return false if @type.nil?
      status_validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE", "PAUSED"])
      return false unless status_validator.valid?(@status)
      return false if !@dispatcher_id.nil? && @dispatcher_id.to_s.length > 36
      return false if !@dispatcher_id.nil? && @dispatcher_id.to_s.length < 36
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] metadata Value to be assigned
    def metadata=(metadata)
      if metadata.nil?
        fail ArgumentError, 'metadata cannot be nil'
      end

      @metadata = metadata
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if type.nil?
        fail ArgumentError, 'type cannot be nil'
      end

      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE", "PAUSED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] dispatcher_id Value to be assigned
    def dispatcher_id=(dispatcher_id)
      if dispatcher_id.nil?
        fail ArgumentError, 'dispatcher_id cannot be nil'
      end

      if dispatcher_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "dispatcher_id", the character length must be smaller than or equal to 36.'
      end

      if dispatcher_id.to_s.length < 36
        fail ArgumentError, 'invalid value for "dispatcher_id", the character length must be greater than or equal to 36.'
      end

      @dispatcher_id = dispatcher_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          metadata == o.metadata &&
          name == o.name &&
          type == o.type &&
          last_heartbeat_at == o.last_heartbeat_at &&
          last_listener_established == o.last_listener_established &&
          actions == o.actions &&
          slots == o.slots &&
          recent_step_runs == o.recent_step_runs &&
          status == o.status &&
          max_runs == o.max_runs &&
          available_runs == o.available_runs &&
          dispatcher_id == o.dispatcher_id &&
          labels == o.labels &&
          webhook_url == o.webhook_url &&
          webhook_id == o.webhook_id &&
          runtime_info == o.runtime_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [metadata, name, type, last_heartbeat_at, last_listener_established, actions, slots, recent_step_runs, status, max_runs, available_runs, dispatcher_id, labels, webhook_url, webhook_id, runtime_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = HatchetSdkRest.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
