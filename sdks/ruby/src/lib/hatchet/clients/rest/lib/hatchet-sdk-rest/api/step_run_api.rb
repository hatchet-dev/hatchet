=begin
#Hatchet API

#The Hatchet API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module HatchetSdkRest
  class StepRunApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get step run
    # Get a step run by id
    # @param tenant [String] The tenant id
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @return [StepRun]
    def step_run_get(tenant, step_run, opts = {})
      data, _status_code, _headers = step_run_get_with_http_info(tenant, step_run, opts)
      data
    end

    # Get step run
    # Get a step run by id
    # @param tenant [String] The tenant id
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @return [Array<(StepRun, Integer, Hash)>] StepRun data, response status code and response headers
    def step_run_get_with_http_info(tenant, step_run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StepRunApi.step_run_get ...'
      end
      # verify the required parameter 'tenant' is set
      if @api_client.config.client_side_validation && tenant.nil?
        fail ArgumentError, "Missing the required parameter 'tenant' when calling StepRunApi.step_run_get"
      end
      if @api_client.config.client_side_validation && tenant.to_s.length > 36
        fail ArgumentError, 'invalid value for "tenant" when calling StepRunApi.step_run_get, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && tenant.to_s.length < 36
        fail ArgumentError, 'invalid value for "tenant" when calling StepRunApi.step_run_get, the character length must be greater than or equal to 36.'
      end

      # verify the required parameter 'step_run' is set
      if @api_client.config.client_side_validation && step_run.nil?
        fail ArgumentError, "Missing the required parameter 'step_run' when calling StepRunApi.step_run_get"
      end
      if @api_client.config.client_side_validation && step_run.to_s.length > 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_get, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && step_run.to_s.length < 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_get, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/tenants/{tenant}/step-runs/{step-run}'.sub('{' + 'tenant' + '}', CGI.escape(tenant.to_s)).sub('{' + 'step-run' + '}', CGI.escape(step_run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StepRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"StepRunApi.step_run_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StepRunApi#step_run_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get step run schema
    # Get the schema for a step run
    # @param tenant [String] The tenant id
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def step_run_get_schema(tenant, step_run, opts = {})
      data, _status_code, _headers = step_run_get_schema_with_http_info(tenant, step_run, opts)
      data
    end

    # Get step run schema
    # Get the schema for a step run
    # @param tenant [String] The tenant id
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def step_run_get_schema_with_http_info(tenant, step_run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StepRunApi.step_run_get_schema ...'
      end
      # verify the required parameter 'tenant' is set
      if @api_client.config.client_side_validation && tenant.nil?
        fail ArgumentError, "Missing the required parameter 'tenant' when calling StepRunApi.step_run_get_schema"
      end
      if @api_client.config.client_side_validation && tenant.to_s.length > 36
        fail ArgumentError, 'invalid value for "tenant" when calling StepRunApi.step_run_get_schema, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && tenant.to_s.length < 36
        fail ArgumentError, 'invalid value for "tenant" when calling StepRunApi.step_run_get_schema, the character length must be greater than or equal to 36.'
      end

      # verify the required parameter 'step_run' is set
      if @api_client.config.client_side_validation && step_run.nil?
        fail ArgumentError, "Missing the required parameter 'step_run' when calling StepRunApi.step_run_get_schema"
      end
      if @api_client.config.client_side_validation && step_run.to_s.length > 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_get_schema, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && step_run.to_s.length < 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_get_schema, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/tenants/{tenant}/step-runs/{step-run}/schema'.sub('{' + 'tenant' + '}', CGI.escape(tenant.to_s)).sub('{' + 'step-run' + '}', CGI.escape(step_run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"StepRunApi.step_run_get_schema",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StepRunApi#step_run_get_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List archives for step run
    # List archives for a step run
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number to skip
    # @option opts [Integer] :limit The number to limit by
    # @return [StepRunArchiveList]
    def step_run_list_archives(step_run, opts = {})
      data, _status_code, _headers = step_run_list_archives_with_http_info(step_run, opts)
      data
    end

    # List archives for step run
    # List archives for a step run
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number to skip
    # @option opts [Integer] :limit The number to limit by
    # @return [Array<(StepRunArchiveList, Integer, Hash)>] StepRunArchiveList data, response status code and response headers
    def step_run_list_archives_with_http_info(step_run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StepRunApi.step_run_list_archives ...'
      end
      # verify the required parameter 'step_run' is set
      if @api_client.config.client_side_validation && step_run.nil?
        fail ArgumentError, "Missing the required parameter 'step_run' when calling StepRunApi.step_run_list_archives"
      end
      if @api_client.config.client_side_validation && step_run.to_s.length > 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_list_archives, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && step_run.to_s.length < 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_list_archives, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/step-runs/{step-run}/archives'.sub('{' + 'step-run' + '}', CGI.escape(step_run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StepRunArchiveList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"StepRunApi.step_run_list_archives",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StepRunApi#step_run_list_archives\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List events for step run
    # List events for a step run
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number to skip
    # @option opts [Integer] :limit The number to limit by
    # @return [StepRunEventList]
    def step_run_list_events(step_run, opts = {})
      data, _status_code, _headers = step_run_list_events_with_http_info(step_run, opts)
      data
    end

    # List events for step run
    # List events for a step run
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number to skip
    # @option opts [Integer] :limit The number to limit by
    # @return [Array<(StepRunEventList, Integer, Hash)>] StepRunEventList data, response status code and response headers
    def step_run_list_events_with_http_info(step_run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StepRunApi.step_run_list_events ...'
      end
      # verify the required parameter 'step_run' is set
      if @api_client.config.client_side_validation && step_run.nil?
        fail ArgumentError, "Missing the required parameter 'step_run' when calling StepRunApi.step_run_list_events"
      end
      if @api_client.config.client_side_validation && step_run.to_s.length > 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_list_events, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && step_run.to_s.length < 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_list_events, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/step-runs/{step-run}/events'.sub('{' + 'step-run' + '}', CGI.escape(step_run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StepRunEventList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"StepRunApi.step_run_list_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StepRunApi#step_run_list_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attempts to cancel a step run
    # Attempts to cancel a step run
    # @param tenant [String] The tenant id
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @return [StepRun]
    def step_run_update_cancel(tenant, step_run, opts = {})
      data, _status_code, _headers = step_run_update_cancel_with_http_info(tenant, step_run, opts)
      data
    end

    # Attempts to cancel a step run
    # Attempts to cancel a step run
    # @param tenant [String] The tenant id
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @return [Array<(StepRun, Integer, Hash)>] StepRun data, response status code and response headers
    def step_run_update_cancel_with_http_info(tenant, step_run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StepRunApi.step_run_update_cancel ...'
      end
      # verify the required parameter 'tenant' is set
      if @api_client.config.client_side_validation && tenant.nil?
        fail ArgumentError, "Missing the required parameter 'tenant' when calling StepRunApi.step_run_update_cancel"
      end
      if @api_client.config.client_side_validation && tenant.to_s.length > 36
        fail ArgumentError, 'invalid value for "tenant" when calling StepRunApi.step_run_update_cancel, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && tenant.to_s.length < 36
        fail ArgumentError, 'invalid value for "tenant" when calling StepRunApi.step_run_update_cancel, the character length must be greater than or equal to 36.'
      end

      # verify the required parameter 'step_run' is set
      if @api_client.config.client_side_validation && step_run.nil?
        fail ArgumentError, "Missing the required parameter 'step_run' when calling StepRunApi.step_run_update_cancel"
      end
      if @api_client.config.client_side_validation && step_run.to_s.length > 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_update_cancel, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && step_run.to_s.length < 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_update_cancel, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/tenants/{tenant}/step-runs/{step-run}/cancel'.sub('{' + 'tenant' + '}', CGI.escape(tenant.to_s)).sub('{' + 'step-run' + '}', CGI.escape(step_run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StepRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"StepRunApi.step_run_update_cancel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StepRunApi#step_run_update_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rerun step run
    # Reruns a step run
    # @param tenant [String] The tenant id
    # @param step_run [String] The step run id
    # @param rerun_step_run_request [RerunStepRunRequest] The input to the rerun
    # @param [Hash] opts the optional parameters
    # @return [StepRun]
    def step_run_update_rerun(tenant, step_run, rerun_step_run_request, opts = {})
      data, _status_code, _headers = step_run_update_rerun_with_http_info(tenant, step_run, rerun_step_run_request, opts)
      data
    end

    # Rerun step run
    # Reruns a step run
    # @param tenant [String] The tenant id
    # @param step_run [String] The step run id
    # @param rerun_step_run_request [RerunStepRunRequest] The input to the rerun
    # @param [Hash] opts the optional parameters
    # @return [Array<(StepRun, Integer, Hash)>] StepRun data, response status code and response headers
    def step_run_update_rerun_with_http_info(tenant, step_run, rerun_step_run_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StepRunApi.step_run_update_rerun ...'
      end
      # verify the required parameter 'tenant' is set
      if @api_client.config.client_side_validation && tenant.nil?
        fail ArgumentError, "Missing the required parameter 'tenant' when calling StepRunApi.step_run_update_rerun"
      end
      if @api_client.config.client_side_validation && tenant.to_s.length > 36
        fail ArgumentError, 'invalid value for "tenant" when calling StepRunApi.step_run_update_rerun, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && tenant.to_s.length < 36
        fail ArgumentError, 'invalid value for "tenant" when calling StepRunApi.step_run_update_rerun, the character length must be greater than or equal to 36.'
      end

      # verify the required parameter 'step_run' is set
      if @api_client.config.client_side_validation && step_run.nil?
        fail ArgumentError, "Missing the required parameter 'step_run' when calling StepRunApi.step_run_update_rerun"
      end
      if @api_client.config.client_side_validation && step_run.to_s.length > 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_update_rerun, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && step_run.to_s.length < 36
        fail ArgumentError, 'invalid value for "step_run" when calling StepRunApi.step_run_update_rerun, the character length must be greater than or equal to 36.'
      end

      # verify the required parameter 'rerun_step_run_request' is set
      if @api_client.config.client_side_validation && rerun_step_run_request.nil?
        fail ArgumentError, "Missing the required parameter 'rerun_step_run_request' when calling StepRunApi.step_run_update_rerun"
      end
      # resource path
      local_var_path = '/api/v1/tenants/{tenant}/step-runs/{step-run}/rerun'.sub('{' + 'tenant' + '}', CGI.escape(tenant.to_s)).sub('{' + 'step-run' + '}', CGI.escape(step_run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rerun_step_run_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StepRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"StepRunApi.step_run_update_rerun",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StepRunApi#step_run_update_rerun\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List events for all step runs for a workflow run
    # List events for all step runs for a workflow run
    # @param tenant [String] The tenant id
    # @param workflow_run [String] The workflow run id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :last_id Last ID of the last event
    # @return [StepRunEventList]
    def workflow_run_list_step_run_events(tenant, workflow_run, opts = {})
      data, _status_code, _headers = workflow_run_list_step_run_events_with_http_info(tenant, workflow_run, opts)
      data
    end

    # List events for all step runs for a workflow run
    # List events for all step runs for a workflow run
    # @param tenant [String] The tenant id
    # @param workflow_run [String] The workflow run id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :last_id Last ID of the last event
    # @return [Array<(StepRunEventList, Integer, Hash)>] StepRunEventList data, response status code and response headers
    def workflow_run_list_step_run_events_with_http_info(tenant, workflow_run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StepRunApi.workflow_run_list_step_run_events ...'
      end
      # verify the required parameter 'tenant' is set
      if @api_client.config.client_side_validation && tenant.nil?
        fail ArgumentError, "Missing the required parameter 'tenant' when calling StepRunApi.workflow_run_list_step_run_events"
      end
      if @api_client.config.client_side_validation && tenant.to_s.length > 36
        fail ArgumentError, 'invalid value for "tenant" when calling StepRunApi.workflow_run_list_step_run_events, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && tenant.to_s.length < 36
        fail ArgumentError, 'invalid value for "tenant" when calling StepRunApi.workflow_run_list_step_run_events, the character length must be greater than or equal to 36.'
      end

      # verify the required parameter 'workflow_run' is set
      if @api_client.config.client_side_validation && workflow_run.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_run' when calling StepRunApi.workflow_run_list_step_run_events"
      end
      if @api_client.config.client_side_validation && workflow_run.to_s.length > 36
        fail ArgumentError, 'invalid value for "workflow_run" when calling StepRunApi.workflow_run_list_step_run_events, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && workflow_run.to_s.length < 36
        fail ArgumentError, 'invalid value for "workflow_run" when calling StepRunApi.workflow_run_list_step_run_events, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/step-run-events'.sub('{' + 'tenant' + '}', CGI.escape(tenant.to_s)).sub('{' + 'workflow-run' + '}', CGI.escape(workflow_run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'lastId'] = opts[:'last_id'] if !opts[:'last_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StepRunEventList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"StepRunApi.workflow_run_list_step_run_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StepRunApi#workflow_run_list_step_run_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
