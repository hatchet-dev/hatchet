=begin
#Hatchet API

#The Hatchet API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module HatchetSdkRest
  class LogApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List log lines
    # Lists log lines for a step run.
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number to skip
    # @option opts [Integer] :limit The number to limit by
    # @option opts [Array<LogLineLevel>] :levels A list of levels to filter by
    # @option opts [String] :search The search query to filter for
    # @option opts [LogLineOrderByField] :order_by_field What to order by
    # @option opts [LogLineOrderByDirection] :order_by_direction The order direction
    # @return [LogLineList]
    def log_line_list(step_run, opts = {})
      data, _status_code, _headers = log_line_list_with_http_info(step_run, opts)
      data
    end

    # List log lines
    # Lists log lines for a step run.
    # @param step_run [String] The step run id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number to skip
    # @option opts [Integer] :limit The number to limit by
    # @option opts [Array<LogLineLevel>] :levels A list of levels to filter by
    # @option opts [String] :search The search query to filter for
    # @option opts [LogLineOrderByField] :order_by_field What to order by
    # @option opts [LogLineOrderByDirection] :order_by_direction The order direction
    # @return [Array<(LogLineList, Integer, Hash)>] LogLineList data, response status code and response headers
    def log_line_list_with_http_info(step_run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogApi.log_line_list ...'
      end
      # verify the required parameter 'step_run' is set
      if @api_client.config.client_side_validation && step_run.nil?
        fail ArgumentError, "Missing the required parameter 'step_run' when calling LogApi.log_line_list"
      end
      if @api_client.config.client_side_validation && step_run.to_s.length > 36
        fail ArgumentError, 'invalid value for "step_run" when calling LogApi.log_line_list, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && step_run.to_s.length < 36
        fail ArgumentError, 'invalid value for "step_run" when calling LogApi.log_line_list, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/step-runs/{step-run}/logs'.sub('{' + 'step-run' + '}', CGI.escape(step_run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'levels'] = @api_client.build_collection_param(opts[:'levels'], :multi) if !opts[:'levels'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'orderByField'] = opts[:'order_by_field'] if !opts[:'order_by_field'].nil?
      query_params[:'orderByDirection'] = opts[:'order_by_direction'] if !opts[:'order_by_direction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LogLineList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"LogApi.log_line_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogApi#log_line_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List log lines
    # Lists log lines for a task
    # @param task [String] The task id
    # @param [Hash] opts the optional parameters
    # @return [V1LogLineList]
    def v1_log_line_list(task, opts = {})
      data, _status_code, _headers = v1_log_line_list_with_http_info(task, opts)
      data
    end

    # List log lines
    # Lists log lines for a task
    # @param task [String] The task id
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1LogLineList, Integer, Hash)>] V1LogLineList data, response status code and response headers
    def v1_log_line_list_with_http_info(task, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogApi.v1_log_line_list ...'
      end
      # verify the required parameter 'task' is set
      if @api_client.config.client_side_validation && task.nil?
        fail ArgumentError, "Missing the required parameter 'task' when calling LogApi.v1_log_line_list"
      end
      if @api_client.config.client_side_validation && task.to_s.length > 36
        fail ArgumentError, 'invalid value for "task" when calling LogApi.v1_log_line_list, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && task.to_s.length < 36
        fail ArgumentError, 'invalid value for "task" when calling LogApi.v1_log_line_list, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/stable/tasks/{task}/logs'.sub('{' + 'task' + '}', CGI.escape(task.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V1LogLineList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"LogApi.v1_log_line_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogApi#v1_log_line_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
