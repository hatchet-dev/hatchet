=begin
#Hatchet API

#The Hatchet API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module HatchetSdkRest
  class SNSApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create SNS integration
    # Create SNS integration
    # @param tenant [String] The tenant id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSNSIntegrationRequest] :create_sns_integration_request 
    # @return [SNSIntegration]
    def sns_create(tenant, opts = {})
      data, _status_code, _headers = sns_create_with_http_info(tenant, opts)
      data
    end

    # Create SNS integration
    # Create SNS integration
    # @param tenant [String] The tenant id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSNSIntegrationRequest] :create_sns_integration_request 
    # @return [Array<(SNSIntegration, Integer, Hash)>] SNSIntegration data, response status code and response headers
    def sns_create_with_http_info(tenant, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SNSApi.sns_create ...'
      end
      # verify the required parameter 'tenant' is set
      if @api_client.config.client_side_validation && tenant.nil?
        fail ArgumentError, "Missing the required parameter 'tenant' when calling SNSApi.sns_create"
      end
      if @api_client.config.client_side_validation && tenant.to_s.length > 36
        fail ArgumentError, 'invalid value for "tenant" when calling SNSApi.sns_create, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && tenant.to_s.length < 36
        fail ArgumentError, 'invalid value for "tenant" when calling SNSApi.sns_create, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/tenants/{tenant}/sns'.sub('{' + 'tenant' + '}', CGI.escape(tenant.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_sns_integration_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SNSIntegration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SNSApi.sns_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SNSApi#sns_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete SNS integration
    # Delete SNS integration
    # @param sns [String] The SNS integration id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sns_delete(sns, opts = {})
      sns_delete_with_http_info(sns, opts)
      nil
    end

    # Delete SNS integration
    # Delete SNS integration
    # @param sns [String] The SNS integration id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sns_delete_with_http_info(sns, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SNSApi.sns_delete ...'
      end
      # verify the required parameter 'sns' is set
      if @api_client.config.client_side_validation && sns.nil?
        fail ArgumentError, "Missing the required parameter 'sns' when calling SNSApi.sns_delete"
      end
      if @api_client.config.client_side_validation && sns.to_s.length > 36
        fail ArgumentError, 'invalid value for "sns" when calling SNSApi.sns_delete, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && sns.to_s.length < 36
        fail ArgumentError, 'invalid value for "sns" when calling SNSApi.sns_delete, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/sns/{sns}'.sub('{' + 'sns' + '}', CGI.escape(sns.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SNSApi.sns_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SNSApi#sns_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SNS integrations
    # List SNS integrations
    # @param tenant [String] The tenant id
    # @param [Hash] opts the optional parameters
    # @return [ListSNSIntegrations]
    def sns_list(tenant, opts = {})
      data, _status_code, _headers = sns_list_with_http_info(tenant, opts)
      data
    end

    # List SNS integrations
    # List SNS integrations
    # @param tenant [String] The tenant id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListSNSIntegrations, Integer, Hash)>] ListSNSIntegrations data, response status code and response headers
    def sns_list_with_http_info(tenant, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SNSApi.sns_list ...'
      end
      # verify the required parameter 'tenant' is set
      if @api_client.config.client_side_validation && tenant.nil?
        fail ArgumentError, "Missing the required parameter 'tenant' when calling SNSApi.sns_list"
      end
      if @api_client.config.client_side_validation && tenant.to_s.length > 36
        fail ArgumentError, 'invalid value for "tenant" when calling SNSApi.sns_list, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && tenant.to_s.length < 36
        fail ArgumentError, 'invalid value for "tenant" when calling SNSApi.sns_list, the character length must be greater than or equal to 36.'
      end

      # resource path
      local_var_path = '/api/v1/tenants/{tenant}/sns'.sub('{' + 'tenant' + '}', CGI.escape(tenant.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListSNSIntegrations'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SNSApi.sns_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SNSApi#sns_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
