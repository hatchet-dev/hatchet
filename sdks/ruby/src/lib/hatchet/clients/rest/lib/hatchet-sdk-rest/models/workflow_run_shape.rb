=begin
#Hatchet API

#The Hatchet API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module HatchetSdkRest
  class WorkflowRunShape
    attr_accessor :metadata

    attr_accessor :tenant_id

    attr_accessor :workflow_version_id

    attr_accessor :status

    attr_accessor :triggered_by

    attr_accessor :workflow_id

    attr_accessor :workflow_version

    attr_accessor :display_name

    attr_accessor :job_runs

    attr_accessor :input

    attr_accessor :error

    attr_accessor :started_at

    attr_accessor :finished_at

    attr_accessor :duration

    attr_accessor :parent_id

    attr_accessor :parent_step_run_id

    attr_accessor :additional_metadata

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'metadata' => :'metadata',
        :'tenant_id' => :'tenantId',
        :'workflow_version_id' => :'workflowVersionId',
        :'status' => :'status',
        :'triggered_by' => :'triggeredBy',
        :'workflow_id' => :'workflowId',
        :'workflow_version' => :'workflowVersion',
        :'display_name' => :'displayName',
        :'job_runs' => :'jobRuns',
        :'input' => :'input',
        :'error' => :'error',
        :'started_at' => :'startedAt',
        :'finished_at' => :'finishedAt',
        :'duration' => :'duration',
        :'parent_id' => :'parentId',
        :'parent_step_run_id' => :'parentStepRunId',
        :'additional_metadata' => :'additionalMetadata'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'metadata' => :'APIResourceMeta',
        :'tenant_id' => :'String',
        :'workflow_version_id' => :'String',
        :'status' => :'WorkflowRunStatus',
        :'triggered_by' => :'WorkflowRunTriggeredBy',
        :'workflow_id' => :'String',
        :'workflow_version' => :'WorkflowVersion',
        :'display_name' => :'String',
        :'job_runs' => :'Array<JobRun>',
        :'input' => :'Hash<String, Object>',
        :'error' => :'String',
        :'started_at' => :'Time',
        :'finished_at' => :'Time',
        :'duration' => :'Integer',
        :'parent_id' => :'String',
        :'parent_step_run_id' => :'String',
        :'additional_metadata' => :'Hash<String, Object>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `HatchetSdkRest::WorkflowRunShape` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `HatchetSdkRest::WorkflowRunShape`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      else
        self.metadata = nil
      end

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      else
        self.tenant_id = nil
      end

      if attributes.key?(:'workflow_version_id')
        self.workflow_version_id = attributes[:'workflow_version_id']
      else
        self.workflow_version_id = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'triggered_by')
        self.triggered_by = attributes[:'triggered_by']
      else
        self.triggered_by = nil
      end

      if attributes.key?(:'workflow_id')
        self.workflow_id = attributes[:'workflow_id']
      end

      if attributes.key?(:'workflow_version')
        self.workflow_version = attributes[:'workflow_version']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'job_runs')
        if (value = attributes[:'job_runs']).is_a?(Array)
          self.job_runs = value
        end
      end

      if attributes.key?(:'input')
        if (value = attributes[:'input']).is_a?(Hash)
          self.input = value
        end
      end

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'finished_at')
        self.finished_at = attributes[:'finished_at']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'parent_step_run_id')
        self.parent_step_run_id = attributes[:'parent_step_run_id']
      end

      if attributes.key?(:'additional_metadata')
        if (value = attributes[:'additional_metadata']).is_a?(Hash)
          self.additional_metadata = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @metadata.nil?
        invalid_properties.push('invalid value for "metadata", metadata cannot be nil.')
      end

      if @tenant_id.nil?
        invalid_properties.push('invalid value for "tenant_id", tenant_id cannot be nil.')
      end

      if @workflow_version_id.nil?
        invalid_properties.push('invalid value for "workflow_version_id", workflow_version_id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @triggered_by.nil?
        invalid_properties.push('invalid value for "triggered_by", triggered_by cannot be nil.')
      end

      if !@parent_id.nil? && @parent_id.to_s.length > 36
        invalid_properties.push('invalid value for "parent_id", the character length must be smaller than or equal to 36.')
      end

      if !@parent_id.nil? && @parent_id.to_s.length < 36
        invalid_properties.push('invalid value for "parent_id", the character length must be greater than or equal to 36.')
      end

      if !@parent_step_run_id.nil? && @parent_step_run_id.to_s.length > 36
        invalid_properties.push('invalid value for "parent_step_run_id", the character length must be smaller than or equal to 36.')
      end

      if !@parent_step_run_id.nil? && @parent_step_run_id.to_s.length < 36
        invalid_properties.push('invalid value for "parent_step_run_id", the character length must be greater than or equal to 36.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @metadata.nil?
      return false if @tenant_id.nil?
      return false if @workflow_version_id.nil?
      return false if @status.nil?
      return false if @triggered_by.nil?
      return false if !@parent_id.nil? && @parent_id.to_s.length > 36
      return false if !@parent_id.nil? && @parent_id.to_s.length < 36
      return false if !@parent_step_run_id.nil? && @parent_step_run_id.to_s.length > 36
      return false if !@parent_step_run_id.nil? && @parent_step_run_id.to_s.length < 36
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] metadata Value to be assigned
    def metadata=(metadata)
      if metadata.nil?
        fail ArgumentError, 'metadata cannot be nil'
      end

      @metadata = metadata
    end

    # Custom attribute writer method with validation
    # @param [Object] tenant_id Value to be assigned
    def tenant_id=(tenant_id)
      if tenant_id.nil?
        fail ArgumentError, 'tenant_id cannot be nil'
      end

      @tenant_id = tenant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] workflow_version_id Value to be assigned
    def workflow_version_id=(workflow_version_id)
      if workflow_version_id.nil?
        fail ArgumentError, 'workflow_version_id cannot be nil'
      end

      @workflow_version_id = workflow_version_id
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.nil?
        fail ArgumentError, 'status cannot be nil'
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] triggered_by Value to be assigned
    def triggered_by=(triggered_by)
      if triggered_by.nil?
        fail ArgumentError, 'triggered_by cannot be nil'
      end

      @triggered_by = triggered_by
    end

    # Custom attribute writer method with validation
    # @param [Object] parent_id Value to be assigned
    def parent_id=(parent_id)
      if parent_id.nil?
        fail ArgumentError, 'parent_id cannot be nil'
      end

      if parent_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "parent_id", the character length must be smaller than or equal to 36.'
      end

      if parent_id.to_s.length < 36
        fail ArgumentError, 'invalid value for "parent_id", the character length must be greater than or equal to 36.'
      end

      @parent_id = parent_id
    end

    # Custom attribute writer method with validation
    # @param [Object] parent_step_run_id Value to be assigned
    def parent_step_run_id=(parent_step_run_id)
      if parent_step_run_id.nil?
        fail ArgumentError, 'parent_step_run_id cannot be nil'
      end

      if parent_step_run_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "parent_step_run_id", the character length must be smaller than or equal to 36.'
      end

      if parent_step_run_id.to_s.length < 36
        fail ArgumentError, 'invalid value for "parent_step_run_id", the character length must be greater than or equal to 36.'
      end

      @parent_step_run_id = parent_step_run_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          metadata == o.metadata &&
          tenant_id == o.tenant_id &&
          workflow_version_id == o.workflow_version_id &&
          status == o.status &&
          triggered_by == o.triggered_by &&
          workflow_id == o.workflow_id &&
          workflow_version == o.workflow_version &&
          display_name == o.display_name &&
          job_runs == o.job_runs &&
          input == o.input &&
          error == o.error &&
          started_at == o.started_at &&
          finished_at == o.finished_at &&
          duration == o.duration &&
          parent_id == o.parent_id &&
          parent_step_run_id == o.parent_step_run_id &&
          additional_metadata == o.additional_metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [metadata, tenant_id, workflow_version_id, status, triggered_by, workflow_id, workflow_version, display_name, job_runs, input, error, started_at, finished_at, duration, parent_id, parent_step_run_id, additional_metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = HatchetSdkRest.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
