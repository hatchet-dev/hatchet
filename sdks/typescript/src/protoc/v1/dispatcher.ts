// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: v1/dispatcher.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { DurableEventListenerConditions } from "./shared/condition";

export const protobufPackage = "v1";

export interface RegisterDurableEventRequest {
  /** external uuid for the task run */
  taskId: string;
  /** the signal key for the event */
  signalKey: string;
  /** the task conditions for creating the task */
  conditions: DurableEventListenerConditions | undefined;
}

export interface RegisterDurableEventResponse {
}

export interface ListenForDurableEventRequest {
  /** single listener per worker */
  taskId: string;
  /** the match id for the listener */
  signalKey: string;
}

export interface DurableEvent {
  taskId: string;
  signalKey: string;
  /** the data for the event */
  data: Uint8Array;
}

function createBaseRegisterDurableEventRequest(): RegisterDurableEventRequest {
  return { taskId: "", signalKey: "", conditions: undefined };
}

export const RegisterDurableEventRequest: MessageFns<RegisterDurableEventRequest> = {
  encode(message: RegisterDurableEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.signalKey !== "") {
      writer.uint32(18).string(message.signalKey);
    }
    if (message.conditions !== undefined) {
      DurableEventListenerConditions.encode(message.conditions, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterDurableEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterDurableEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signalKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.conditions = DurableEventListenerConditions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterDurableEventRequest {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      signalKey: isSet(object.signalKey) ? globalThis.String(object.signalKey) : "",
      conditions: isSet(object.conditions) ? DurableEventListenerConditions.fromJSON(object.conditions) : undefined,
    };
  },

  toJSON(message: RegisterDurableEventRequest): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.signalKey !== "") {
      obj.signalKey = message.signalKey;
    }
    if (message.conditions !== undefined) {
      obj.conditions = DurableEventListenerConditions.toJSON(message.conditions);
    }
    return obj;
  },

  create(base?: DeepPartial<RegisterDurableEventRequest>): RegisterDurableEventRequest {
    return RegisterDurableEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegisterDurableEventRequest>): RegisterDurableEventRequest {
    const message = createBaseRegisterDurableEventRequest();
    message.taskId = object.taskId ?? "";
    message.signalKey = object.signalKey ?? "";
    message.conditions = (object.conditions !== undefined && object.conditions !== null)
      ? DurableEventListenerConditions.fromPartial(object.conditions)
      : undefined;
    return message;
  },
};

function createBaseRegisterDurableEventResponse(): RegisterDurableEventResponse {
  return {};
}

export const RegisterDurableEventResponse: MessageFns<RegisterDurableEventResponse> = {
  encode(_: RegisterDurableEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterDurableEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterDurableEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RegisterDurableEventResponse {
    return {};
  },

  toJSON(_: RegisterDurableEventResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RegisterDurableEventResponse>): RegisterDurableEventResponse {
    return RegisterDurableEventResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RegisterDurableEventResponse>): RegisterDurableEventResponse {
    const message = createBaseRegisterDurableEventResponse();
    return message;
  },
};

function createBaseListenForDurableEventRequest(): ListenForDurableEventRequest {
  return { taskId: "", signalKey: "" };
}

export const ListenForDurableEventRequest: MessageFns<ListenForDurableEventRequest> = {
  encode(message: ListenForDurableEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.signalKey !== "") {
      writer.uint32(18).string(message.signalKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListenForDurableEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListenForDurableEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signalKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListenForDurableEventRequest {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      signalKey: isSet(object.signalKey) ? globalThis.String(object.signalKey) : "",
    };
  },

  toJSON(message: ListenForDurableEventRequest): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.signalKey !== "") {
      obj.signalKey = message.signalKey;
    }
    return obj;
  },

  create(base?: DeepPartial<ListenForDurableEventRequest>): ListenForDurableEventRequest {
    return ListenForDurableEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListenForDurableEventRequest>): ListenForDurableEventRequest {
    const message = createBaseListenForDurableEventRequest();
    message.taskId = object.taskId ?? "";
    message.signalKey = object.signalKey ?? "";
    return message;
  },
};

function createBaseDurableEvent(): DurableEvent {
  return { taskId: "", signalKey: "", data: new Uint8Array(0) };
}

export const DurableEvent: MessageFns<DurableEvent> = {
  encode(message: DurableEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.signalKey !== "") {
      writer.uint32(18).string(message.signalKey);
    }
    if (message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DurableEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDurableEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signalKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DurableEvent {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      signalKey: isSet(object.signalKey) ? globalThis.String(object.signalKey) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: DurableEvent): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.signalKey !== "") {
      obj.signalKey = message.signalKey;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<DurableEvent>): DurableEvent {
    return DurableEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DurableEvent>): DurableEvent {
    const message = createBaseDurableEvent();
    message.taskId = object.taskId ?? "";
    message.signalKey = object.signalKey ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

export type V1DispatcherDefinition = typeof V1DispatcherDefinition;
export const V1DispatcherDefinition = {
  name: "V1Dispatcher",
  fullName: "v1.V1Dispatcher",
  methods: {
    registerDurableEvent: {
      name: "RegisterDurableEvent",
      requestType: RegisterDurableEventRequest,
      requestStream: false,
      responseType: RegisterDurableEventResponse,
      responseStream: false,
      options: {},
    },
    listenForDurableEvent: {
      name: "ListenForDurableEvent",
      requestType: ListenForDurableEventRequest,
      requestStream: true,
      responseType: DurableEvent,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface V1DispatcherServiceImplementation<CallContextExt = {}> {
  registerDurableEvent(
    request: RegisterDurableEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RegisterDurableEventResponse>>;
  listenForDurableEvent(
    request: AsyncIterable<ListenForDurableEventRequest>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<DurableEvent>>;
}

export interface V1DispatcherClient<CallOptionsExt = {}> {
  registerDurableEvent(
    request: DeepPartial<RegisterDurableEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RegisterDurableEventResponse>;
  listenForDurableEvent(
    request: AsyncIterable<DeepPartial<ListenForDurableEventRequest>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<DurableEvent>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
