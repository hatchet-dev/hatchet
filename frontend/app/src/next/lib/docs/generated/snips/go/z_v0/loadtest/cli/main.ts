import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  'language': 'go',
  'content': 'package main\n\nimport (\n\t\'log\'\n\t\'os\'\n\t\'time\'\n\n\t\'github.com/rs/zerolog\'\n\t\'github.com/spf13/cobra\'\n\n\t\'github.com/hatchet-dev/hatchet/pkg/config/shared\'\n\t\'github.com/hatchet-dev/hatchet/pkg/logger\'\n\n\t\'net/http\'\n\t_ \'net/http/pprof\'\n)\n\nvar l zerolog.Logger\n\nfunc main() {\n\tvar events int\n\tvar concurrency int\n\tvar duration time.Duration\n\tvar wait time.Duration\n\tvar delay time.Duration\n\tvar workerDelay time.Duration\n\tvar logLevel string\n\tvar slots int\n\tvar failureRate float32\n\tvar payloadSize string\n\tvar eventFanout int\n\n\tvar loadtest = &cobra.Command{\n\t\tUse: \'loadtest\',\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tl = logger.NewStdErr(\n\t\t\t\t&shared.LoggerConfigFile{\n\t\t\t\t\tLevel:  logLevel,\n\t\t\t\t\tFormat: \'console\',\n\t\t\t\t},\n\t\t\t\t\'loadtest\',\n\t\t\t)\n\n\t\t\t// enable pprof if requested\n\t\t\tif os.Getenv(\'PPROF_ENABLED\') == \'true\' {\n\t\t\t\tgo func() {\n\t\t\t\t\tlog.Println(http.ListenAndServe(\'localhost:6060\', nil))\n\t\t\t\t}()\n\t\t\t}\n\n\t\t\tif err := do(duration, events, delay, wait, concurrency, workerDelay, slots, failureRate, payloadSize, eventFanout); err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t\tpanic(\'load test failed\')\n\t\t\t}\n\t\t},\n\t}\n\n\tloadtest.Flags().IntVarP(&events, \'events\', \'e\', 10, \'events per second\')\n\tloadtest.Flags().IntVarP(&concurrency, \'concurrency\', \'c\', 0, \'concurrency specifies the maximum events to run at the same time\')\n\tloadtest.Flags().DurationVarP(&duration, \'duration\', \'d\', 10*time.Second, \'duration specifies the total time to run the load test\')\n\tloadtest.Flags().DurationVarP(&delay, \'delay\', \'D\', 0, \'delay specifies the time to wait in each event to simulate slow tasks\')\n\tloadtest.Flags().DurationVarP(&wait, \'wait\', \'w\', 10*time.Second, \'wait specifies the total time to wait until events complete\')\n\tloadtest.Flags().DurationVarP(&workerDelay, \'workerDelay\', \'p\', 0*time.Second, \'workerDelay specifies the time to wait before starting the worker\')\n\tloadtest.Flags().StringVarP(&logLevel, \'level\', \'l\', \'info\', \'logLevel specifies the log level (debug, info, warn, error)\')\n\tloadtest.Flags().IntVarP(&slots, \'slots\', \'s\', 0, \'slots specifies the number of slots to use in the worker\')\n\tloadtest.Flags().Float32VarP(&failureRate, \'failureRate\', \'f\', 0, \'failureRate specifies the rate of failure for the worker\')\n\tloadtest.Flags().StringVarP(&payloadSize, \'payloadSize\', \'P\', \'0kb\', \'payload specifies the size of the payload to send\')\n\tloadtest.Flags().IntVarP(&eventFanout, \'eventFanout\', \'F\', 1, \'eventFanout specifies the number of events to fanout\')\n\n\tcmd := &cobra.Command{Use: \'app\'}\n\tcmd.AddCommand(loadtest)\n\tif err := cmd.Execute(); err != nil {\n\t\tpanic(err)\n\t}\n}\n',
  'source': 'out/go/z_v0/loadtest/cli/main.go',
  'blocks': {},
  'highlights': {}
};  // Then replace double quotes with single quotes

export default snippet;
