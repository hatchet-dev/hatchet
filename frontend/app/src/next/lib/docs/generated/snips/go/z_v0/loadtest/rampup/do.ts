import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  'language': 'go',
  'content': 'package rampup\n\nimport (\n\t\'context\'\n\t\'fmt\'\n\t\'log\'\n\t\'slices\'\n\t\'sync\'\n\t\'time\'\n\n\t\'github.com/rs/zerolog\'\n)\n\nvar l zerolog.Logger\n\nfunc do(duration time.Duration, startEventsPerSecond, amount int, increase, delay, wait, maxAcceptableDuration, maxAcceptableSchedule time.Duration, includeDroppedEvents bool, concurrency int) error {\n\tl.Debug().Msgf(\'testing with duration=%s, amount=%d, increase=%d, delay=%s, wait=%s, concurrency=%d\', duration, amount, increase, delay, wait, concurrency)\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tafter := 10 * time.Second\n\n\tgo func() {\n\t\ttime.Sleep(duration + after + wait + 5*time.Second)\n\t\tcancel()\n\t}()\n\n\thook := make(chan time.Duration, 1)\n\n\tscheduled := make(chan int64, 100000)\n\texecuted := make(chan int64, 100000)\n\n\tids := []int64{}\n\tidLock := sync.Mutex{}\n\n\tgo func() {\n\t\tfor s := range scheduled {\n\t\t\tl.Debug().Msgf(\'scheduled %d\', s)\n\t\t\tidLock.Lock()\n\t\t\tids = append(ids, s)\n\t\t\tidLock.Unlock()\n\n\t\t\tgo func(s int64) {\n\t\t\t\ttime.Sleep(maxAcceptableDuration)\n\t\t\t\tidLock.Lock()\n\t\t\t\tdefer idLock.Unlock()\n\t\t\t\tfor _, e := range ids {\n\t\t\t\t\tif e == s {\n\t\t\t\t\t\tif includeDroppedEvents {\n\t\t\t\t\t\t\tpanic(fmt.Errorf(\'event %d did not execute in time\', s))\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tl.Warn().Msgf(\'event %d did not execute in time\', s)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}(s)\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tfor e := range executed {\n\t\t\tl.Debug().Msgf(\'executed %d\', e)\n\t\t\tidLock.Lock()\n\t\t\tids = slices.DeleteFunc(ids, func(s int64) bool {\n\t\t\t\treturn s == e\n\t\t\t})\n\t\t\tidLock.Unlock()\n\t\t}\n\t}()\n\n\tgo func() {\n\t\trun(ctx, delay, concurrency, maxAcceptableDuration, hook, executed)\n\t}()\n\n\temit(ctx, startEventsPerSecond, amount, increase, duration, maxAcceptableSchedule, hook, scheduled)\n\n\ttime.Sleep(after)\n\n\tlog.Printf(\'âœ… success\')\n\n\treturn nil\n}\n',
  'source': 'out/go/z_v0/loadtest/rampup/do.go',
  'blocks': {},
  'highlights': {}
};  // Then replace double quotes with single quotes

export default snippet;
