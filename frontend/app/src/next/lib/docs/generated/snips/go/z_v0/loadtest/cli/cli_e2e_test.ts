import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  language: 'go',
  content:
    "//go:build load\n\npackage main\n\nimport (\n\t'context'\n\t'log'\n\t'sync'\n\t'testing'\n\t'time'\n\n\t'go.uber.org/goleak'\n\n\t'github.com/hatchet-dev/hatchet/internal/testutils'\n\t'github.com/hatchet-dev/hatchet/pkg/config/shared'\n\t'github.com/hatchet-dev/hatchet/pkg/logger'\n)\n\nfunc TestLoadCLI(t *testing.T) {\n\ttestutils.Prepare(t)\n\n\ttype args struct {\n\t\tduration        time.Duration\n\t\teventsPerSecond int\n\t\tdelay           time.Duration\n\t\twait            time.Duration\n\t\tworkerDelay     time.Duration\n\t\tconcurrency     int\n\t}\n\n\tl = logger.NewStdErr(\n\t\t&shared.LoggerConfigFile{\n\t\t\tLevel:  'warn',\n\t\t\tFormat: 'console',\n\t\t},\n\t\t'loadtest',\n\t)\n\n\ttests := []struct {\n\t\tname    string\n\t\targs    args\n\t\twantErr bool\n\t}{{\n\t\tname: 'test with high step delay',\n\t\targs: args{\n\t\t\tduration:        10 * time.Second,\n\t\t\teventsPerSecond: 10,\n\t\t\tdelay:           10 * time.Second,\n\t\t\twait:            60 * time.Second,\n\t\t\tconcurrency:     0,\n\t\t},\n\t}, {\n\t\tname: 'test simple with unlimited concurrency',\n\t\targs: args{\n\t\t\tduration:        10 * time.Second,\n\t\t\teventsPerSecond: 10,\n\t\t\tdelay:           0 * time.Second,\n\t\t\twait:            60 * time.Second,\n\t\t\tconcurrency:     0,\n\t\t},\n\t}, {\n\t\tname: 'test for many queued events and little worker throughput',\n\t\targs: args{\n\t\t\tduration:        60 * time.Second,\n\t\t\teventsPerSecond: 100,\n\t\t\tdelay:           0 * time.Second,\n\t\t\tworkerDelay:     60 * time.Second,\n\t\t\twait:            240 * time.Second,\n\t\t\tconcurrency:     0,\n\t\t},\n\t}}\n\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Minute)\n\n\tsetup := sync.WaitGroup{}\n\n\tgo func() {\n\t\tsetup.Add(1)\n\t\tlog.Printf('setup start')\n\t\ttestutils.SetupEngine(ctx, t)\n\t\tsetup.Done()\n\t\tlog.Printf('setup end')\n\t}()\n\n\t// TODO instead of waiting, figure out when the engine setup is complete\n\ttime.Sleep(15 * time.Second)\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif err := do(tt.args.duration, tt.args.eventsPerSecond, tt.args.delay, tt.args.wait, tt.args.concurrency, tt.args.workerDelay, 100, 0.0, '0kb', 1); (err != nil) != tt.wantErr {\n\t\t\t\tt.Errorf('do() error = %v, wantErr %v', err, tt.wantErr)\n\t\t\t}\n\t\t})\n\t}\n\n\tcancel()\n\n\tlog.Printf('test complete')\n\tsetup.Wait()\n\tlog.Printf('cleanup complete')\n\n\tgoleak.VerifyNone(\n\t\tt,\n\t\t// worker\n\t\tgoleak.IgnoreTopFunction('go.opencensus.io/stats/view.(*worker).start'),\n\t\tgoleak.IgnoreTopFunction('google.golang.org/grpc/internal/grpcsync.(*CallbackSerializer).run'),\n\t\tgoleak.IgnoreTopFunction('internal/poll.runtime_pollWait'),\n\t\tgoleak.IgnoreTopFunction('google.golang.org/grpc/internal/transport.(*controlBuffer).get'),\n\t\t// all engine related packages\n\t\tgoleak.IgnoreTopFunction('github.com/jackc/pgx/v5/pgxpool.(*Pool).backgroundHealthCheck'),\n\t\tgoleak.IgnoreTopFunction('github.com/rabbitmq/amqp091-go.(*Connection).heartbeater'),\n\t\tgoleak.IgnoreTopFunction('github.com/rabbitmq/amqp091-go.(*consumers).buffer'),\n\t\tgoleak.IgnoreTopFunction('google.golang.org/grpc/internal/transport.(*http2Server).keepalive'),\n\t)\n}\n",
  source: 'out/go/z_v0/loadtest/cli/cli_e2e_test.go',
  blocks: {},
  highlights: {},
}; // Then replace double quotes with single quotes

export default snippet;
