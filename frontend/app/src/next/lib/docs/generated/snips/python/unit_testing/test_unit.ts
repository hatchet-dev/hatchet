import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  language: 'python',
  content:
    'import pytest\n\nfrom examples.unit_testing.workflows import (\n    Lifespan,\n    UnitTestInput,\n    UnitTestOutput,\n    async_complex_workflow,\n    async_simple_workflow,\n    async_standalone,\n    durable_async_complex_workflow,\n    durable_async_simple_workflow,\n    durable_async_standalone,\n    durable_sync_complex_workflow,\n    durable_sync_simple_workflow,\n    durable_sync_standalone,\n    start,\n    sync_complex_workflow,\n    sync_simple_workflow,\n    sync_standalone,\n)\nfrom hatchet_sdk import Task\n\n\n@pytest.mark.parametrize(\n    "func",\n    [\n        sync_standalone,\n        durable_sync_standalone,\n        sync_simple_workflow,\n        durable_sync_simple_workflow,\n        sync_complex_workflow,\n        durable_sync_complex_workflow,\n    ],\n)\ndef test_simple_unit_sync(func: Task[UnitTestInput, UnitTestOutput]) -> None:\n    input = UnitTestInput(key="test_key", number=42)\n    additional_metadata = {"meta_key": "meta_value"}\n    lifespan = Lifespan(mock_db_url="sqlite:///:memory:")\n    retry_count = 1\n\n    expected_output = UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=additional_metadata,\n        retry_count=retry_count,\n        mock_db_url=lifespan.mock_db_url,\n    )\n\n    assert (\n        func.mock_run(\n            input=input,\n            additional_metadata=additional_metadata,\n            lifespan=lifespan,\n            retry_count=retry_count,\n            parent_outputs={start.name: expected_output.model_dump()},\n        )\n        == expected_output\n    )\n\n\n@pytest.mark.parametrize(\n    "func",\n    [\n        async_standalone,\n        durable_async_standalone,\n        async_simple_workflow,\n        durable_async_simple_workflow,\n        async_complex_workflow,\n        durable_async_complex_workflow,\n    ],\n)\n@pytest.mark.asyncio(loop_scope="session")\nasync def test_simple_unit_async(func: Task[UnitTestInput, UnitTestOutput]) -> None:\n    input = UnitTestInput(key="test_key", number=42)\n    additional_metadata = {"meta_key": "meta_value"}\n    lifespan = Lifespan(mock_db_url="sqlite:///:memory:")\n    retry_count = 1\n\n    expected_output = UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=additional_metadata,\n        retry_count=retry_count,\n        mock_db_url=lifespan.mock_db_url,\n    )\n\n    assert (\n        await func.aio_mock_run(\n            input=input,\n            additional_metadata=additional_metadata,\n            lifespan=lifespan,\n            retry_count=retry_count,\n            parent_outputs={start.name: expected_output.model_dump()},\n        )\n        == expected_output\n    )\n',
  source: 'out/python/unit_testing/test_unit.py',
  blocks: {},
  highlights: {},
};

export default snippet;
