import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  'language': 'go',
  'content': '//go:build e2e\n\npackage main\n\nimport (\n\t\'context\'\n\t\'fmt\'\n\t\'net/http\'\n\t\'testing\'\n\t\'time\'\n\n\t\'github.com/stretchr/testify/assert\'\n\n\t\'github.com/hatchet-dev/hatchet/internal/testutils\'\n\t\'github.com/hatchet-dev/hatchet/pkg/client\'\n\t\'github.com/hatchet-dev/hatchet/pkg/worker\'\n)\n\nfunc TestWebhook(t *testing.T) {\n\ttestutils.Prepare(t)\n\n\tc, err := client.New()\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\'error creating client: %w\', err))\n\t}\n\n\ttests := []struct {\n\t\tname string\n\t\tjob  func(t *testing.T)\n\t}{\n\t\t{\n\t\t\tname: \'simple action\',\n\t\t\tjob: func(t *testing.T) {\n\t\t\t\tevents := make(chan string, 10)\n\n\t\t\t\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\t\t\t\tdefer cancel()\n\n\t\t\t\tevent := \'user:webhook-simple\'\n\t\t\t\tworkflow := \'simple-webhook\'\n\t\t\t\twf := &worker.WorkflowJob{\n\t\t\t\t\tOn:          worker.Event(event),\n\t\t\t\t\tName:        workflow,\n\t\t\t\t\tDescription: workflow,\n\t\t\t\t\tSteps: []*worker.WorkflowStep{\n\t\t\t\t\t\tworker.Fn(func(ctx worker.HatchetContext) (*output, error) {\n\t\t\t\t\t\t\t//verifyStepRuns(client, c.TenantId(), db.JobRunStatusRunning, db.StepRunStatusRunning, nil)\n\n\t\t\t\t\t\t\tevents <- \'webhook-step-one\'\n\n\t\t\t\t\t\t\treturn &output{\n\t\t\t\t\t\t\t\tMessage: \'hi from \' + ctx.StepName(),\n\t\t\t\t\t\t\t}, nil\n\t\t\t\t\t\t}).SetName(\'webhook-step-one\').SetTimeout(\'60s\'),\n\t\t\t\t\t\tworker.Fn(func(ctx worker.HatchetContext) (*output, error) {\n\t\t\t\t\t\t\tvar out output\n\t\t\t\t\t\t\tif err := ctx.StepOutput(\'webhook-step-one\', &out); err != nil {\n\t\t\t\t\t\t\t\tpanic(err)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif out.Message != \'hi from webhook-step-one\' {\n\t\t\t\t\t\t\t\tpanic(fmt.Errorf(\'expected step run output to be valid, got %s\', out.Message))\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tevents <- \'webhook-step-two\'\n\n\t\t\t\t\t\t\t//verifyStepRuns(client, c.TenantId(), db.JobRunStatusRunning, db.StepRunStatusRunning, nil)\n\n\t\t\t\t\t\t\treturn &output{\n\t\t\t\t\t\t\t\tMessage: \'hi from \' + ctx.StepName(),\n\t\t\t\t\t\t\t}, nil\n\t\t\t\t\t\t}).SetName(\'webhook-step-two\').SetTimeout(\'60s\').AddParents(\'webhook-step-one\'),\n\t\t\t\t\t},\n\t\t\t\t}\n\n\t\t\t\tw, err := worker.NewWorker(\n\t\t\t\t\tworker.WithClient(\n\t\t\t\t\t\tc,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(fmt.Errorf(\'error creating worker: %w\', err))\n\t\t\t\t}\n\n\t\t\t\thandler := w.WebhookHttpHandler(worker.WebhookHandlerOptions{\n\t\t\t\t\tSecret: \'secret\',\n\t\t\t\t}, wf)\n\t\t\t\terr = run(\'simple action\', w, \'8742\', handler, c, workflow, event)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatalf(\'run() error = %s\', err)\n\t\t\t\t}\n\n\t\t\t\tvar items []string\n\t\t\touter:\n\t\t\t\tfor {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase item := <-events:\n\t\t\t\t\t\titems = append(items, item)\n\t\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\t\tbreak outer\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassert.Equal(t, []string{\n\t\t\t\t\t\'webhook-step-one\',\n\t\t\t\t\t\'webhook-step-two\',\n\t\t\t\t}, items)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \'mark action as failed immediately if webhook fails\',\n\t\t\tjob: func(t *testing.T) {\n\t\t\t\tworkflow := \'simple-webhook-failure\'\n\t\t\t\twf := &worker.WorkflowJob{\n\t\t\t\t\tName:        workflow,\n\t\t\t\t\tDescription: workflow,\n\t\t\t\t\tSteps: []*worker.WorkflowStep{\n\t\t\t\t\t\tworker.Fn(func(ctx worker.HatchetContext) (*output, error) {\n\t\t\t\t\t\t\treturn &output{\n\t\t\t\t\t\t\t\tMessage: \'hi from \' + ctx.StepName(),\n\t\t\t\t\t\t\t}, nil\n\t\t\t\t\t\t}).SetName(\'webhook-failure-step-one\').SetTimeout(\'60s\'),\n\t\t\t\t\t},\n\t\t\t\t}\n\n\t\t\t\tw, err := worker.NewWorker(\n\t\t\t\t\tworker.WithClient(\n\t\t\t\t\t\tc,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(fmt.Errorf(\'error creating worker: %w\', err))\n\t\t\t\t}\n\n\t\t\t\tevent := \'user:create-webhook-failure\'\n\t\t\t\terr = w.On(worker.Events(event), wf)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(fmt.Errorf(\'error registering webhook workflow: %w\', err))\n\t\t\t\t}\n\t\t\t\thandler := func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\t\tif r.Method == http.MethodPut {\n\t\t\t\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\t\t\t\t_, _ = w.Write([]byte(fmt.Sprintf(`{\'actions\': [\'default:%s\']}`, \'webhook-failure-step-one\')))\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tw.WriteHeader(http.StatusInternalServerError) // simulate a failure\n\t\t\t\t}\n\t\t\t\terr = run(\'mark action as failed immediately if webhook fails\', w, \'8743\', handler, c, workflow, event)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatalf(\'run() error = %s\', err)\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \'register action\',\n\t\t\tjob: func(t *testing.T) {\n\t\t\t\tevents := make(chan string, 10)\n\n\t\t\t\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\t\t\t\tdefer cancel()\n\n\t\t\t\tw, err := worker.NewWorker(\n\t\t\t\t\tworker.WithClient(\n\t\t\t\t\t\tc,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(fmt.Errorf(\'error creating worker: %w\', err))\n\t\t\t\t}\n\n\t\t\t\ttestSvc := w.NewService(\'test\')\n\n\t\t\t\terr = testSvc.RegisterAction(func(ctx worker.HatchetContext) (*output, error) {\n\t\t\t\t\ttime.Sleep(5 * time.Second)\n\n\t\t\t\t\tevents <- \'wha-webhook-action-1\'\n\n\t\t\t\t\treturn &output{\n\t\t\t\t\t\tMessage: \'hi from wha-webhook-action-1\',\n\t\t\t\t\t}, nil\n\t\t\t\t}, worker.WithActionName(\'wha-webhook-action-1\'))\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\n\t\t\t\tevent := \'user:wha-webhook-actions\'\n\n\t\t\t\terr = testSvc.On(\n\t\t\t\t\tworker.Event(event),\n\t\t\t\t\ttestSvc.Call(\'wha-webhook-action-1\'),\n\t\t\t\t)\n\n\t\t\t\tworkflow := \'wha-webhook-with-actions\'\n\t\t\t\twf := &worker.WorkflowJob{\n\t\t\t\t\tOn:          worker.Event(event),\n\t\t\t\t\tName:        workflow,\n\t\t\t\t\tDescription: workflow,\n\t\t\t\t\tSteps: []*worker.WorkflowStep{\n\t\t\t\t\t\tworker.Fn(func(ctx worker.HatchetContext) (*output, error) {\n\t\t\t\t\t\t\t//verifyStepRuns(client, c.TenantId(), db.JobRunStatusRunning, db.StepRunStatusRunning, nil)\n\n\t\t\t\t\t\t\tevents <- \'wha-webhook-step-one\'\n\n\t\t\t\t\t\t\treturn &output{\n\t\t\t\t\t\t\t\tMessage: \'hi from \' + ctx.StepName(),\n\t\t\t\t\t\t\t}, nil\n\t\t\t\t\t\t}).SetName(\'wha-webhook-step-one\').SetTimeout(\'60s\'),\n\t\t\t\t\t\tworker.Fn(func(ctx worker.HatchetContext) (*output, error) {\n\t\t\t\t\t\t\tvar out output\n\t\t\t\t\t\t\tif err := ctx.StepOutput(\'wha-webhook-step-one\', &out); err != nil {\n\t\t\t\t\t\t\t\tpanic(err)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif out.Message != \'hi from wha-webhook-step-one\' {\n\t\t\t\t\t\t\t\tpanic(fmt.Errorf(\'expected step run output to be valid, got %s\', out.Message))\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tevents <- \'wha-webhook-step-two\'\n\n\t\t\t\t\t\t\t//verifyStepRuns(client, c.TenantId(), db.JobRunStatusRunning, db.StepRunStatusRunning, nil)\n\n\t\t\t\t\t\t\treturn &output{\n\t\t\t\t\t\t\t\tMessage: \'hi from \' + ctx.StepName(),\n\t\t\t\t\t\t\t}, nil\n\t\t\t\t\t\t}).SetName(\'wha-webhook-step-two\').SetTimeout(\'60s\').AddParents(\'wha-webhook-step-one\'),\n\t\t\t\t\t},\n\t\t\t\t}\n\n\t\t\t\thandler := w.WebhookHttpHandler(worker.WebhookHandlerOptions{\n\t\t\t\t\tSecret: \'secret\',\n\t\t\t\t}, wf)\n\t\t\t\terr = run(\'register action\', w, \'8744\', handler, c, workflow, event)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatalf(\'run() error = %s\', err)\n\t\t\t\t}\n\n\t\t\t\tvar items []string\n\t\t\touter:\n\t\t\t\tfor {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase item := <-events:\n\t\t\t\t\t\titems = append(items, item)\n\t\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\t\tbreak outer\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassert.Equal(t, []string{\n\t\t\t\t\t\'wha-webhook-step-one\',\n\t\t\t\t\t\'wha-webhook-step-two\',\n\t\t\t\t\t\'wha-webhook-action-1\',\n\t\t\t\t}, items)\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\ttt.job(t)\n\t\t})\n\t}\n}\n',
  'source': 'out/go/z_v0/webhook/main_e2e_test.go',
  'blocks': {},
  'highlights': {}
};  // Then replace double quotes with single quotes

export default snippet;
