import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  'language': 'go',
  'content': '//go:build e2e\n\npackage main\n\nimport (\n\t\'context\'\n\t\'testing\'\n\t\'time\'\n\n\t\'github.com/stretchr/testify/assert\'\n\n\t\'github.com/hatchet-dev/hatchet/internal/testutils\'\n\t\'github.com/hatchet-dev/hatchet/pkg/worker\'\n)\n\nfunc TestTimeout(t *testing.T) {\n\ttestutils.Prepare(t)\n\n\ttests := []struct {\n\t\tname string\n\t\tjob  func(done func()) worker.WorkflowJob\n\t}{\n\t\t{\n\t\t\tname: \'step timeout\',\n\t\t\tjob: func(done func()) worker.WorkflowJob {\n\t\t\t\treturn worker.WorkflowJob{\n\t\t\t\t\tName:        \'timeout\',\n\t\t\t\t\tDescription: \'timeout\',\n\t\t\t\t\tSteps: []*worker.WorkflowStep{\n\t\t\t\t\t\tworker.Fn(func(ctx worker.HatchetContext) (result *stepOneOutput, err error) {\n\t\t\t\t\t\t\tselect {\n\t\t\t\t\t\t\tcase <-time.After(time.Second * 30):\n\t\t\t\t\t\t\t\treturn &stepOneOutput{\n\t\t\t\t\t\t\t\t\tMessage: \'finished\',\n\t\t\t\t\t\t\t\t}, nil\n\t\t\t\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\t\t\t\tdone()\n\t\t\t\t\t\t\t\treturn nil, nil\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).SetName(\'step-one\').SetTimeout(\'10s\'),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n\t\t\tdefer cancel()\n\n\t\t\tevents := make(chan string, 50)\n\n\t\t\tcleanup, err := run(events, tt.job(func() {\n\t\t\t\tevents <- \'done\'\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\'run() error = %s\', err)\n\t\t\t}\n\n\t\t\tvar items []string\n\n\t\touter:\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase item := <-events:\n\t\t\t\t\titems = append(items, item)\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\tbreak outer\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassert.Equal(t, []string{\n\t\t\t\t\'done\', // cancellation signal\n\t\t\t\t\'done\', // test check\n\t\t\t}, items)\n\n\t\t\tif err := cleanup(); err != nil {\n\t\t\t\tt.Fatalf(\'cleanup() error = %s\', err)\n\t\t\t}\n\t\t})\n\t}\n}\n',
  'source': 'out/go/z_v0/timeout/main_e2e_test.go',
  'blocks': {},
  'highlights': {}
};  // Then replace double quotes with single quotes

export default snippet;
