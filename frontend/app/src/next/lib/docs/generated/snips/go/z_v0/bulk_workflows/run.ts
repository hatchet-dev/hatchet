import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  language: 'go',
  content:
    "package main\n\nimport (\n\t'fmt'\n\t'log'\n\n\t'github.com/hatchet-dev/hatchet/pkg/client'\n)\n\nfunc runBulk(workflowName string, quantity int) error {\n\tc, err := client.New()\n\tif err != nil {\n\t\treturn fmt.Errorf('error creating client: %w', err)\n\t}\n\n\tlog.Printf('pushing %d workflows in bulk', quantity)\n\n\tvar workflows []*client.WorkflowRun\n\tfor i := 0; i < quantity; i++ {\n\t\tdata := map[string]interface{}{\n\t\t\t'username': fmt.Sprintf('echo-test-%d', i),\n\t\t\t'user_id':  fmt.Sprintf('1234-%d', i),\n\t\t}\n\t\tworkflows = append(workflows, &client.WorkflowRun{\n\t\t\tName:  workflowName,\n\t\t\tInput: data,\n\t\t\tOptions: []client.RunOptFunc{\n\t\t\t\t// setting a dedupe key so these shouldn't all run\n\t\t\t\tclient.WithRunMetadata(map[string]interface{}{\n\t\t\t\t\t// 'dedupe': 'dedupe1',\n\t\t\t\t}),\n\t\t\t},\n\t\t})\n\n\t}\n\n\touts, err := c.Admin().BulkRunWorkflow(workflows)\n\tif err != nil {\n\t\tpanic(fmt.Errorf('error pushing event: %w', err))\n\t}\n\n\tfor _, out := range outs {\n\t\tlog.Printf('workflow run id: %v', out)\n\t}\n\n\treturn nil\n\n}\n\nfunc runSingles(workflowName string, quantity int) error {\n\tc, err := client.New()\n\tif err != nil {\n\t\treturn fmt.Errorf('error creating client: %w', err)\n\t}\n\n\tlog.Printf('pushing %d single workflows', quantity)\n\n\tvar workflows []*client.WorkflowRun\n\tfor i := 0; i < quantity; i++ {\n\t\tdata := map[string]interface{}{\n\t\t\t'username': fmt.Sprintf('echo-test-%d', i),\n\t\t\t'user_id':  fmt.Sprintf('1234-%d', i),\n\t\t}\n\t\tworkflows = append(workflows, &client.WorkflowRun{\n\t\t\tName:  workflowName,\n\t\t\tInput: data,\n\t\t\tOptions: []client.RunOptFunc{\n\t\t\t\tclient.WithRunMetadata(map[string]interface{}{\n\t\t\t\t\t// 'dedupe': 'dedupe1',\n\t\t\t\t}),\n\t\t\t},\n\t\t})\n\t}\n\n\tfor _, wf := range workflows {\n\n\t\tgo func() {\n\t\t\tout, err := c.Admin().RunWorkflow(wf.Name, wf.Input, wf.Options...)\n\t\t\tif err != nil {\n\t\t\t\tpanic(fmt.Errorf('error pushing event: %w', err))\n\t\t\t}\n\n\t\t\tlog.Printf('workflow run id: %v', out)\n\t\t}()\n\n\t}\n\n\treturn nil\n}\n",
  source: 'out/go/z_v0/bulk_workflows/run.go',
  blocks: {},
  highlights: {},
}; // Then replace double quotes with single quotes

export default snippet;
