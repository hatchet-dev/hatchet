import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  'language': 'go',
  'content': 'package main\n\nimport (\n\t\'context\'\n\t\'fmt\'\n\t\'math/rand\'\n\t\'os\'\n\t\'time\'\n\n\t\'github.com/google/uuid\'\n\tv1_workflows \'github.com/hatchet-dev/hatchet/examples/go/workflows\'\n\t\'github.com/hatchet-dev/hatchet/pkg/client\'\n\t\'github.com/hatchet-dev/hatchet/pkg/client/rest\'\n\tv1 \'github.com/hatchet-dev/hatchet/pkg/v1\'\n\t\'github.com/joho/godotenv\'\n\t\'github.com/oapi-codegen/runtime/types\'\n)\n\nfunc main() {\n\terr := godotenv.Load()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\thatchet, err := v1.NewHatchetClient()\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Get workflow name from command line arguments\n\tvar workflowName string\n\tif len(os.Args) > 1 {\n\t\tworkflowName = os.Args[1]\n\t\tfmt.Println(\'workflow name provided:\', workflowName)\n\t} else {\n\t\tfmt.Println(\'No workflow name provided. Defaulting to \'simple\'\')\n\t\tworkflowName = \'simple\'\n\t}\n\n\tctx := context.Background()\n\n\t// Define workflow runners map\n\trunnerMap := map[string]func() error{\n\t\t\'simple\': func() error {\n\t\t\tsimple := v1_workflows.Simple(hatchet)\n\t\t\tresult, err := simple.Run(ctx, v1_workflows.SimpleInput{\n\t\t\t\tMessage: \'Hello, World!\',\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfmt.Println(result.TransformedMessage)\n\t\t\treturn nil\n\t\t},\n\t\t\'child\': func() error {\n\t\t\tparent := v1_workflows.Parent(hatchet)\n\n\t\t\tresult, err := parent.Run(ctx, v1_workflows.ParentInput{\n\t\t\t\tN: 50,\n\t\t\t})\n\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfmt.Println(\'Parent result:\', result.Result)\n\t\t\treturn nil\n\t\t},\n\t\t\'dag\': func() error {\n\t\t\tdag := v1_workflows.DagWorkflow(hatchet)\n\t\t\tresult, err := dag.Run(ctx, v1_workflows.DagInput{\n\t\t\t\tMessage: \'Hello, DAG!\',\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfmt.Println(result.Step1.Step)\n\t\t\tfmt.Println(result.Step2.Step)\n\t\t\treturn nil\n\t\t},\n\t\t\'sleep\': func() error {\n\t\t\tsleep := v1_workflows.DurableSleep(hatchet)\n\t\t\t_, err := sleep.Run(ctx, v1_workflows.DurableSleepInput{\n\t\t\t\tMessage: \'Hello, Sleep!\',\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfmt.Println(\'Sleep workflow completed\')\n\t\t\treturn nil\n\t\t},\n\t\t\'durable-event\': func() error {\n\t\t\tdurableEventWorkflow := v1_workflows.DurableEvent(hatchet)\n\t\t\trun, err := durableEventWorkflow.RunNoWait(ctx, v1_workflows.DurableEventInput{\n\t\t\t\tMessage: \'Hello, World!\',\n\t\t\t})\n\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t_, err = hatchet.Runs().Cancel(ctx, rest.V1CancelTaskRequest{\n\t\t\t\tExternalIds: &[]types.UUID{uuid.MustParse(run.WorkflowRunId())},\n\t\t\t})\n\n\t\t\tif err != nil {\n\t\t\t\treturn nil // We expect an error here\n\t\t\t}\n\n\t\t\t_, err = run.Result()\n\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\'Received expected error:\', err)\n\t\t\t\treturn nil // We expect an error here\n\t\t\t}\n\t\t\tfmt.Println(\'Cancellation workflow completed unexpectedly\')\n\t\t\treturn nil\n\t\t},\n\t\t\'timeout\': func() error {\n\t\t\ttimeout := v1_workflows.Timeout(hatchet)\n\t\t\t_, err := timeout.Run(ctx, v1_workflows.TimeoutInput{})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\'Received expected error:\', err)\n\t\t\t\treturn nil // We expect an error here\n\t\t\t}\n\t\t\tfmt.Println(\'Timeout workflow completed unexpectedly\')\n\t\t\treturn nil\n\t\t},\n\t\t\'sticky\': func() error {\n\t\t\tsticky := v1_workflows.Sticky(hatchet)\n\t\t\tresult, err := sticky.Run(ctx, v1_workflows.StickyInput{})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfmt.Println(\'Value from child workflow:\', result.Result)\n\t\t\treturn nil\n\t\t},\n\t\t\'sticky-dag\': func() error {\n\t\t\tstickyDag := v1_workflows.StickyDag(hatchet)\n\t\t\tresult, err := stickyDag.Run(ctx, v1_workflows.StickyInput{})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfmt.Println(\'Value from task 1:\', result.StickyTask1.Result)\n\t\t\tfmt.Println(\'Value from task 2:\', result.StickyTask2.Result)\n\t\t\treturn nil\n\t\t},\n\t\t\'retries\': func() error {\n\t\t\tretries := v1_workflows.Retries(hatchet)\n\t\t\t_, err := retries.Run(ctx, v1_workflows.RetriesInput{})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\'Received expected error:\', err)\n\t\t\t\treturn nil // We expect an error here\n\t\t\t}\n\t\t\tfmt.Println(\'Retries workflow completed unexpectedly\')\n\t\t\treturn nil\n\t\t},\n\t\t\'retries-count\': func() error {\n\t\t\tretriesCount := v1_workflows.RetriesWithCount(hatchet)\n\t\t\tresult, err := retriesCount.Run(ctx, v1_workflows.RetriesWithCountInput{})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfmt.Println(\'Result message:\', result.Message)\n\t\t\treturn nil\n\t\t},\n\t\t\'with-backoff\': func() error {\n\t\t\twithBackoff := v1_workflows.WithBackoff(hatchet)\n\t\t\t_, err := withBackoff.Run(ctx, v1_workflows.BackoffInput{})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\'Received expected error:\', err)\n\t\t\t\treturn nil // We expect an error here\n\t\t\t}\n\t\t\tfmt.Println(\'WithBackoff workflow completed unexpectedly\')\n\t\t\treturn nil\n\t\t},\n\t\t\'non-retryable\': func() error {\n\t\t\tnonRetryable := v1_workflows.NonRetryableError(hatchet)\n\t\t\t_, err := nonRetryable.Run(ctx, v1_workflows.NonRetryableInput{})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\'Received expected error:\', err)\n\t\t\t\treturn nil // We expect an error here\n\t\t\t}\n\t\t\tfmt.Println(\'NonRetryable workflow completed unexpectedly\')\n\t\t\treturn nil\n\t\t},\n\t\t\'on-cron\': func() error {\n\t\t\tcronTask := v1_workflows.OnCron(hatchet)\n\t\t\tresult, err := cronTask.Run(ctx, v1_workflows.OnCronInput{\n\t\t\t\tMessage: \'Hello, Cron!\',\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfmt.Println(\'Cron task result:\', result.Job.TransformedMessage)\n\t\t\treturn nil\n\t\t},\n\t\t\'priority\': func() error {\n\n\t\t\tnRuns := 10\n\t\t\tpriorityWorkflow := v1_workflows.Priority(hatchet)\n\n\t\t\tfor i := 0; i < nRuns; i++ {\n\t\t\t\trandomPrio := int32(rand.Intn(3) + 1)\n\n\t\t\t\tfmt.Println(\'Random priority:\', randomPrio)\n\n\t\t\t\tpriorityWorkflow.RunNoWait(ctx, v1_workflows.PriorityInput{\n\t\t\t\t\tUserId: \'1234\',\n\t\t\t\t}, client.WithRunMetadata(map[string]int32{\'priority\': randomPrio}), client.WithPriority(randomPrio))\n\t\t\t}\n\n\t\t\ttriggerAt := time.Now().Add(time.Second + 5)\n\n\t\t\tfor i := 0; i < nRuns; i++ {\n\t\t\t\trandomPrio := int32(rand.Intn(3) + 1)\n\n\t\t\t\tfmt.Println(\'Random priority:\', randomPrio)\n\n\t\t\t\tpriorityWorkflow.Schedule(ctx, triggerAt, v1_workflows.PriorityInput{\n\t\t\t\t\tUserId: \'1234\',\n\t\t\t\t}, client.WithRunMetadata(map[string]int32{\'priority\': randomPrio}), client.WithPriority(randomPrio))\n\t\t\t}\n\n\t\t\treturn nil\n\t\t},\n\t}\n\n\t// Lookup workflow runner from map\n\trunner, ok := runnerMap[workflowName]\n\tif !ok {\n\t\tfmt.Println(\'Invalid workflow name provided. Usage: go run examples/v1/run/simple.go [workflow-name]\')\n\t\tfmt.Println(\'Available workflows:\', getAvailableWorkflows(runnerMap))\n\t\tos.Exit(1)\n\t}\n\n\t// Run the selected workflow\n\terr = runner()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Helper function to get available workflows as a formatted string\nfunc getAvailableWorkflows(runnerMap map[string]func() error) string {\n\tvar workflows string\n\tcount := 0\n\tfor name := range runnerMap {\n\t\tif count > 0 {\n\t\t\tworkflows += \', \'\n\t\t}\n\t\tworkflows += fmt.Sprintf(\'\'%s\'\', name)\n\t\tcount++\n\t}\n\treturn workflows\n}\n',
  'source': 'out/go/run/all.go',
  'blocks': {},
  'highlights': {}
};  // Then replace double quotes with single quotes

export default snippet;
