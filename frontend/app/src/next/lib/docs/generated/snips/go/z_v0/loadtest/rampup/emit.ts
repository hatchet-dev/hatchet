import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  'language': 'go',
  'content': 'package rampup\n\nimport (\n\t\'context\'\n\t\'fmt\'\n\t\'sync\'\n\t\'time\'\n\n\t\'github.com/hatchet-dev/hatchet/pkg/client\'\n)\n\ntype Event struct {\n\tID        int64     `json:\'id\'`\n\tCreatedAt time.Time `json:\'created_at\'`\n}\n\nfunc emit(ctx context.Context, startEventsPerSecond, amount int, increase, duration, maxAcceptableSchedule time.Duration, hook <-chan time.Duration, scheduled chan<- int64) int64 {\n\tc, err := client.New()\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar id int64\n\tmx := sync.Mutex{}\n\tgo func() {\n\t\ttimer := time.After(duration)\n\t\tstart := time.Now()\n\n\t\tvar eventsPerSecond int\n\t\tgo func() {\n\t\t\ttook := <-hook\n\t\t\tpanic(fmt.Errorf(\'event took too long to schedule: %s at %d events/s\', took, eventsPerSecond))\n\t\t}()\n\t\tfor {\n\t\t\t// emit amount * increase events per second\n\t\t\teventsPerSecond = startEventsPerSecond + (amount * int(time.Since(start).Seconds()) / int(increase.Seconds()))\n\t\t\tincrease += 1\n\t\t\tif eventsPerSecond < 1 {\n\t\t\t\teventsPerSecond = 1\n\t\t\t}\n\t\t\tl.Debug().Msgf(\'emitting %d events per second\', eventsPerSecond)\n\t\t\tselect {\n\t\t\tcase <-time.After(time.Second / time.Duration(eventsPerSecond)):\n\t\t\t\tmx.Lock()\n\t\t\t\tid += 1\n\n\t\t\t\tgo func(id int64) {\n\t\t\t\t\tvar err error\n\t\t\t\t\tev := Event{CreatedAt: time.Now(), ID: id}\n\t\t\t\t\tl.Debug().Msgf(\'pushed event %d\', ev.ID)\n\t\t\t\t\terr = c.Event().Push(context.Background(), \'load-test:event\', ev)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tpanic(fmt.Errorf(\'error pushing event: %w\', err))\n\t\t\t\t\t}\n\t\t\t\t\ttook := time.Since(ev.CreatedAt)\n\t\t\t\t\tl.Debug().Msgf(\'pushed event %d took %s\', ev.ID, took)\n\n\t\t\t\t\tif took > maxAcceptableSchedule {\n\t\t\t\t\t\tpanic(fmt.Errorf(\'event took too long to schedule: %s at %d events/s\', took, eventsPerSecond))\n\t\t\t\t\t}\n\n\t\t\t\t\tscheduled <- id\n\t\t\t\t}(id)\n\n\t\t\t\tmx.Unlock()\n\t\t\tcase <-timer:\n\t\t\t\tl.Debug().Msgf(\'done emitting events due to timer at %d\', id)\n\t\t\t\treturn\n\t\t\tcase <-ctx.Done():\n\t\t\t\tl.Debug().Msgf(\'done emitting events due to interruption at %d\', id)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tmx.Lock()\n\t\t\tdefer mx.Unlock()\n\t\t\treturn id\n\t\tdefault:\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}\n}\n',
  'source': 'out/go/z_v0/loadtest/rampup/emit.go',
  'blocks': {},
  'highlights': {}
};  // Then replace double quotes with single quotes

export default snippet;
