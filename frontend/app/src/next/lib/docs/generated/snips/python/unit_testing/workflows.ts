import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  language: 'python',
  content:
    'from typing import cast\n\nfrom pydantic import BaseModel\n\nfrom hatchet_sdk import Context, DurableContext, EmptyModel, Hatchet\n\n\nclass UnitTestInput(BaseModel):\n    key: str\n    number: int\n\n\nclass Lifespan(BaseModel):\n    mock_db_url: str\n\n\nclass UnitTestOutput(UnitTestInput, Lifespan):\n    additional_metadata: dict[str, str]\n    retry_count: int\n\n\nhatchet = Hatchet()\n\n\n@hatchet.task(input_validator=UnitTestInput)\ndef sync_standalone(input: UnitTestInput, ctx: Context) -> UnitTestOutput:\n    return UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=ctx.additional_metadata,\n        retry_count=ctx.retry_count,\n        mock_db_url=cast(Lifespan, ctx.lifespan).mock_db_url,\n    )\n\n\n@hatchet.task(input_validator=UnitTestInput)\nasync def async_standalone(input: UnitTestInput, ctx: Context) -> UnitTestOutput:\n    return UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=ctx.additional_metadata,\n        retry_count=ctx.retry_count,\n        mock_db_url=cast(Lifespan, ctx.lifespan).mock_db_url,\n    )\n\n\n@hatchet.durable_task(input_validator=UnitTestInput)\ndef durable_sync_standalone(\n    input: UnitTestInput, ctx: DurableContext\n) -> UnitTestOutput:\n    return UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=ctx.additional_metadata,\n        retry_count=ctx.retry_count,\n        mock_db_url=cast(Lifespan, ctx.lifespan).mock_db_url,\n    )\n\n\n@hatchet.durable_task(input_validator=UnitTestInput)\nasync def durable_async_standalone(\n    input: UnitTestInput, ctx: DurableContext\n) -> UnitTestOutput:\n    return UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=ctx.additional_metadata,\n        retry_count=ctx.retry_count,\n        mock_db_url=cast(Lifespan, ctx.lifespan).mock_db_url,\n    )\n\n\nsimple_workflow = hatchet.workflow(\n    name="simple-unit-test-workflow", input_validator=UnitTestInput\n)\n\n\n@simple_workflow.task()\ndef sync_simple_workflow(input: UnitTestInput, ctx: Context) -> UnitTestOutput:\n    return UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=ctx.additional_metadata,\n        retry_count=ctx.retry_count,\n        mock_db_url=cast(Lifespan, ctx.lifespan).mock_db_url,\n    )\n\n\n@simple_workflow.task()\nasync def async_simple_workflow(input: UnitTestInput, ctx: Context) -> UnitTestOutput:\n    return UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=ctx.additional_metadata,\n        retry_count=ctx.retry_count,\n        mock_db_url=cast(Lifespan, ctx.lifespan).mock_db_url,\n    )\n\n\n@simple_workflow.durable_task()\ndef durable_sync_simple_workflow(\n    input: UnitTestInput, ctx: DurableContext\n) -> UnitTestOutput:\n    return UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=ctx.additional_metadata,\n        retry_count=ctx.retry_count,\n        mock_db_url=cast(Lifespan, ctx.lifespan).mock_db_url,\n    )\n\n\n@simple_workflow.durable_task()\nasync def durable_async_simple_workflow(\n    input: UnitTestInput, ctx: DurableContext\n) -> UnitTestOutput:\n    return UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=ctx.additional_metadata,\n        retry_count=ctx.retry_count,\n        mock_db_url=cast(Lifespan, ctx.lifespan).mock_db_url,\n    )\n\n\ncomplex_workflow = hatchet.workflow(\n    name="complex-unit-test-workflow", input_validator=UnitTestInput\n)\n\n\n@complex_workflow.task()\nasync def start(input: UnitTestInput, ctx: Context) -> UnitTestOutput:\n    return UnitTestOutput(\n        key=input.key,\n        number=input.number,\n        additional_metadata=ctx.additional_metadata,\n        retry_count=ctx.retry_count,\n        mock_db_url=cast(Lifespan, ctx.lifespan).mock_db_url,\n    )\n\n\n@complex_workflow.task(\n    parents=[start],\n)\ndef sync_complex_workflow(input: UnitTestInput, ctx: Context) -> UnitTestOutput:\n    return ctx.task_output(start)\n\n\n@complex_workflow.task(\n    parents=[start],\n)\nasync def async_complex_workflow(input: UnitTestInput, ctx: Context) -> UnitTestOutput:\n    return ctx.task_output(start)\n\n\n@complex_workflow.durable_task(\n    parents=[start],\n)\ndef durable_sync_complex_workflow(\n    input: UnitTestInput, ctx: DurableContext\n) -> UnitTestOutput:\n    return ctx.task_output(start)\n\n\n@complex_workflow.durable_task(\n    parents=[start],\n)\nasync def durable_async_complex_workflow(\n    input: UnitTestInput, ctx: DurableContext\n) -> UnitTestOutput:\n    return ctx.task_output(start)\n',
  source: 'out/python/unit_testing/workflows.py',
  blocks: {},
  highlights: {},
};

export default snippet;
