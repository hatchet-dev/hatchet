import { Snippet } from '@/next/lib/docs/generated/snips/types';

const snippet: Snippet = {
  'language': 'unknown',
  'content': '{\n  \'compilerOptions\': {\n    /* Visit https://aka.ms/tsconfig to read more about this file */\n\n    /* Projects */\n    // \'incremental\': true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */\n    // \'composite\': true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */\n    // \'tsBuildInfoFile\': \'./.tsbuildinfo\',              /* Specify the path to .tsbuildinfo incremental compilation file. */\n    // \'disableSourceOfProjectReferenceRedirect\': true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */\n    // \'disableSolutionSearching\': true,                 /* Opt a project out of multi-project reference checking when editing. */\n    // \'disableReferencedProjectLoad\': true,             /* Reduce the number of projects loaded automatically by TypeScript. */\n\n    /* Language and Environment */\n    \'target\': \'es2016\',                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\n    // \'lib\': [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */\n    // \'jsx\': \'preserve\',                                /* Specify what JSX code is generated. */\n    // \'libReplacement\': true,                           /* Enable lib replacement. */\n    // \'experimentalDecorators\': true,                   /* Enable experimental support for legacy experimental decorators. */\n    // \'emitDecoratorMetadata\': true,                    /* Emit design-type metadata for decorated declarations in source files. */\n    // \'jsxFactory\': \'\',                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. \'React.createElement\' or \'h\'. */\n    // \'jsxFragmentFactory\': \'\',                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. \'React.Fragment\' or \'Fragment\'. */\n    // \'jsxImportSource\': \'\',                            /* Specify module specifier used to import the JSX factory functions when using \'jsx: react-jsx*\'. */\n    // \'reactNamespace\': \'\',                             /* Specify the object invoked for \'createElement\'. This only applies when targeting \'react\' JSX emit. */\n    // \'noLib\': true,                                    /* Disable including any library files, including the default lib.d.ts. */\n    // \'useDefineForClassFields\': true,                  /* Emit ECMAScript-standard-compliant class fields. */\n    // \'moduleDetection\': \'auto\',                        /* Control what method is used to detect module-format JS files. */\n\n    /* Modules */\n    \'module\': \'commonjs\',                                /* Specify what module code is generated. */\n    // \'rootDir\': \'./\',                                  /* Specify the root folder within your source files. */\n    // \'moduleResolution\': \'node10\',                     /* Specify how TypeScript looks up a file from a given module specifier. */\n    // \'baseUrl\': \'./\',                                  /* Specify the base directory to resolve non-relative module names. */\n    // \'paths\': {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */\n    // \'rootDirs\': [],                                   /* Allow multiple folders to be treated as one when resolving modules. */\n    // \'typeRoots\': [],                                  /* Specify multiple folders that act like \'./node_modules/@types\'. */\n    // \'types\': [],                                      /* Specify type package names to be included without being referenced in a source file. */\n    // \'allowUmdGlobalAccess\': true,                     /* Allow accessing UMD globals from modules. */\n    // \'moduleSuffixes\': [],                             /* List of file name suffixes to search when resolving a module. */\n    // \'allowImportingTsExtensions\': true,               /* Allow imports to include TypeScript file extensions. Requires \'--moduleResolution bundler\' and either \'--noEmit\' or \'--emitDeclarationOnly\' to be set. */\n    // \'rewriteRelativeImportExtensions\': true,          /* Rewrite \'.ts\', \'.tsx\', \'.mts\', and \'.cts\' file extensions in relative import paths to their JavaScript equivalent in output files. */\n    // \'resolvePackageJsonExports\': true,                /* Use the package.json \'exports\' field when resolving package imports. */\n    // \'resolvePackageJsonImports\': true,                /* Use the package.json \'imports\' field when resolving imports. */\n    // \'customConditions\': [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */\n    // \'noUncheckedSideEffectImports\': true,             /* Check side effect imports. */\n    // \'resolveJsonModule\': true,                        /* Enable importing .json files. */\n    // \'allowArbitraryExtensions\': true,                 /* Enable importing files with any extension, provided a declaration file is present. */\n    // \'noResolve\': true,                                /* Disallow \'import\'s, \'require\'s or \'<reference>\'s from expanding the number of files TypeScript should add to a project. */\n\n    /* JavaScript Support */\n    // \'allowJs\': true,                                  /* Allow JavaScript files to be a part of your program. Use the \'checkJS\' option to get errors from these files. */\n    // \'checkJs\': true,                                  /* Enable error reporting in type-checked JavaScript files. */\n    // \'maxNodeModuleJsDepth\': 1,                        /* Specify the maximum folder depth used for checking JavaScript files from \'node_modules\'. Only applicable with \'allowJs\'. */\n\n    /* Emit */\n    // \'declaration\': true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */\n    // \'declarationMap\': true,                           /* Create sourcemaps for d.ts files. */\n    // \'emitDeclarationOnly\': true,                      /* Only output d.ts files and not JavaScript files. */\n    // \'sourceMap\': true,                                /* Create source map files for emitted JavaScript files. */\n    // \'inlineSourceMap\': true,                          /* Include sourcemap files inside the emitted JavaScript. */\n    // \'noEmit\': true,                                   /* Disable emitting files from a compilation. */\n    // \'outFile\': \'./\',                                  /* Specify a file that bundles all outputs into one JavaScript file. If \'declaration\' is true, also designates a file that bundles all .d.ts output. */\n    // \'outDir\': \'./\',                                   /* Specify an output folder for all emitted files. */\n    // \'removeComments\': true,                           /* Disable emitting comments. */\n    // \'importHelpers\': true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\n    // \'downlevelIteration\': true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */\n    // \'sourceRoot\': \'\',                                 /* Specify the root path for debuggers to find the reference source code. */\n    // \'mapRoot\': \'\',                                    /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \'inlineSources\': true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */\n    // \'emitBOM\': true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\n    // \'newLine\': \'crlf\',                                /* Set the newline character for emitting files. */\n    // \'stripInternal\': true,                            /* Disable emitting declarations that have \'@internal\' in their JSDoc comments. */\n    // \'noEmitHelpers\': true,                            /* Disable generating custom helper functions like \'__extends\' in compiled output. */\n    // \'noEmitOnError\': true,                            /* Disable emitting files if any type checking errors are reported. */\n    // \'preserveConstEnums\': true,                       /* Disable erasing \'const enum\' declarations in generated code. */\n    // \'declarationDir\': \'./\',                           /* Specify the output directory for generated declaration files. */\n\n    /* Interop Constraints */\n    // \'isolatedModules\': true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */\n    // \'verbatimModuleSyntax\': true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file\'s format based on the \'module\' setting. */\n    // \'isolatedDeclarations\': true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */\n    // \'erasableSyntaxOnly\': true,                       /* Do not allow runtime constructs that are not part of ECMAScript. */\n    // \'allowSyntheticDefaultImports\': true,             /* Allow \'import x from y\' when a module doesn\'t have a default export. */\n    \'esModuleInterop\': true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables \'allowSyntheticDefaultImports\' for type compatibility. */\n    // \'preserveSymlinks\': true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\n    \'forceConsistentCasingInFileNames\': true,            /* Ensure that casing is correct in imports. */\n\n    /* Type Checking */\n    \'strict\': true,                                      /* Enable all strict type-checking options. */\n    // \'noImplicitAny\': true,                            /* Enable error reporting for expressions and declarations with an implied \'any\' type. */\n    // \'strictNullChecks\': true,                         /* When type checking, take into account \'null\' and \'undefined\'. */\n    // \'strictFunctionTypes\': true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\n    // \'strictBindCallApply\': true,                      /* Check that the arguments for \'bind\', \'call\', and \'apply\' methods match the original function. */\n    // \'strictPropertyInitialization\': true,             /* Check for class properties that are declared but not set in the constructor. */\n    // \'strictBuiltinIteratorReturn\': true,              /* Built-in iterators are instantiated with a \'TReturn\' type of \'undefined\' instead of \'any\'. */\n    // \'noImplicitThis\': true,                           /* Enable error reporting when \'this\' is given the type \'any\'. */\n    // \'useUnknownInCatchVariables\': true,               /* Default catch clause variables as \'unknown\' instead of \'any\'. */\n    // \'alwaysStrict\': true,                             /* Ensure \'use strict\' is always emitted. */\n    // \'noUnusedLocals\': true,                           /* Enable error reporting when local variables aren\'t read. */\n    // \'noUnusedParameters\': true,                       /* Raise an error when a function parameter isn\'t read. */\n    // \'exactOptionalPropertyTypes\': true,               /* Interpret optional property types as written, rather than adding \'undefined\'. */\n    // \'noImplicitReturns\': true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */\n    // \'noFallthroughCasesInSwitch\': true,               /* Enable error reporting for fallthrough cases in switch statements. */\n    // \'noUncheckedIndexedAccess\': true,                 /* Add \'undefined\' to a type when accessed using an index. */\n    // \'noImplicitOverride\': true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */\n    // \'noPropertyAccessFromIndexSignature\': true,       /* Enforces using indexed accessors for keys declared using an indexed type. */\n    // \'allowUnusedLabels\': true,                        /* Disable error reporting for unused labels. */\n    // \'allowUnreachableCode\': true,                     /* Disable error reporting for unreachable code. */\n\n    /* Completeness */\n    // \'skipDefaultLibCheck\': true,                      /* Skip type checking .d.ts files that are included with TypeScript. */\n    \'skipLibCheck\': true                                 /* Skip type checking all .d.ts files. */\n  }\n}\n',
  'source': 'out/typescript/quickstart/tsconfig.json',
  'blocks': {},
  'highlights': {}
};  // Then replace double quotes with single quotes

export default snippet;
