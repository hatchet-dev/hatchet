{
  "extends": ["../../.eslintrc.json"],
  "env": {
    "browser": true,
    "es2020": true
  },
  "ignorePatterns": ["dist"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["./tsconfig.json", "./tsconfig.node.json"],
    "warnOnUnsupportedTypeScriptVersion": false
  },
  "plugins": ["react-refresh", "import", "unused-imports", "prettier"],
  "settings": {
    "react": {
      "version": "18.3.1"
    }
  },
  "rules": {
    "@typescript-eslint/no-shadow": "off",
    "@typescript-eslint/no-throw-literal": "off",
    "react/prop-types": "off",
    "react/no-unescaped-entities": "off",
    "import/extensions": "off",
    "react/react-in-jsx-scope": "off",
    "react-refresh/only-export-components": "off",
    "unused-imports/no-unused-imports": "error",
    "prettier/prettier": "error",
    "curly": "error",
    "import/prefer-default-export": "off",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": ["vite.config.ts"]
      }
    ],

    // We need to re-enable these and get rid of all the `any` types
    // "@typescript-eslint/no-explicit-any": "error",
    // "@typescript-eslint/no-unsafe-assignment": "error",
    // "@typescript-eslint/no-unsafe-call": "error",
    // "@typescript-eslint/no-unsafe-member-access": "error",
    // "@typescript-eslint/no-unsafe-return": "error",
    // "@typescript-eslint/no-unsafe-argument": "error",

    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",

    // We should turn this back on to help get rid of tri-boolean handling
    // "@typescript-eslint/strict-boolean-expressions": "error",

    "@typescript-eslint/prefer-includes": "error",
    "@typescript-eslint/prefer-string-starts-ends-with": "error",
    "@typescript-eslint/no-floating-promises": "error",

    "no-console": ["error", { "allow": ["warn", "error"] }],
    "no-debugger": "error",
    "no-alert": "error",
    "no-var": "error",
    "prefer-const": "error",
    "eqeqeq": ["error", "always"],
    "no-eval": "error",
    "no-implied-eval": "error",
    "no-new-func": "error",
    "no-return-assign": "error",
    "no-sequences": "error",
    "no-throw-literal": "error",
    "no-unmodified-loop-condition": "error",
    "no-unused-expressions": "error",
    "no-useless-call": "error",
    "no-useless-concat": "error",
    "no-useless-return": "error",
    "prefer-promise-reject-errors": "error",

    "react/jsx-no-bind": [
      "error",
      {
        // We should turn this on later to enforce using `useCallback` instead of inline functions
        "allowArrowFunctions": true,
        "allowBind": false,
        "allowFunctions": true
      }
    ],
    "react/jsx-no-leaked-render": "error",
    "react/jsx-no-useless-fragment": "error",

    // We should turn this on later
    // "react/no-array-index-key": "error",
    "react/no-object-type-as-default-prop": "error",
    "react/hook-use-state": "error",
    "react/no-unstable-nested-components": "error",

    "import/no-duplicates": "error",
    "import/no-self-import": "error",
    "import/no-useless-path-segments": "error"
  }
}
