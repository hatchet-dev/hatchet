{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Hatchet SDK","text":"<p>Welcome to the Hatchet SDK documentation.</p> <p>This documentation provides a comprehensive guide to using the Hatchet SDK for Python.</p>"},{"location":"index.html#installation","title":"Installation","text":"<pre><code>pip install hatchet-sdk\n</code></pre>"},{"location":"client.html","title":"Client API","text":""},{"location":"client.html#hatchet_sdk.client-classes","title":"Classes","text":""},{"location":"client.html#hatchet_sdk.client.Client","title":"<code>Client</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client-attributes","title":"Attributes","text":""},{"location":"client.html#hatchet_sdk.client.Client.config","title":"<code>config = config</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.dispatcher","title":"<code>dispatcher = dispatcher_client or DispatcherClient(config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.event","title":"<code>event = event_client or EventClient(config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.listener","title":"<code>listener = RunEventListenerClient(config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.workflow_listener","title":"<code>workflow_listener = workflow_listener or PooledWorkflowRunListener(config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.log_interceptor","title":"<code>log_interceptor = config.logger</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.debug","title":"<code>debug = debug</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.cron","title":"<code>cron = CronClient(self.config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.logs","title":"<code>logs = LogsClient(self.config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.metrics","title":"<code>metrics = MetricsClient(self.config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.rate_limits","title":"<code>rate_limits = RateLimitsClient(self.config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.runs","title":"<code>runs = RunsClient(config=self.config, workflow_run_event_listener=self.listener, workflow_run_listener=self.workflow_listener)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.scheduled","title":"<code>scheduled = ScheduledClient(self.config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.workers","title":"<code>workers = WorkersClient(self.config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.workflows","title":"<code>workflows = WorkflowsClient(self.config)</code>  <code>instance-attribute</code>","text":""},{"location":"client.html#hatchet_sdk.client.Client.admin","title":"<code>admin = admin_client or AdminClient(config, self.workflow_listener, self.listener, self.runs)</code>  <code>instance-attribute</code>","text":""},{"location":"features.html","title":"Features","text":""},{"location":"features.html#features.cron-classes","title":"Classes","text":""},{"location":"features.html#features.cron.CreateCronTriggerConfig","title":"<code>CreateCronTriggerConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for creating a workflow run triggered by a cron.</p> <p>Attributes:</p> Name Type Description <code>expression</code> <code>str</code> <p>The cron expression defining the schedule.</p> <code>input</code> <code>dict</code> <p>The input data for the cron workflow.</p> <code>additional_metadata</code> <code>dict[str, str]</code> <p>Additional metadata associated with the cron trigger (e.g. {\"key1\": \"value1\", \"key2\": \"value2\"}).</p>"},{"location":"features.html#features.cron.CreateCronTriggerConfig-functions","title":"Functions","text":""},{"location":"features.html#features.cron.CreateCronTriggerConfig.validate_cron_expression","title":"<code>validate_cron_expression(v)</code>  <code>classmethod</code>","text":"<p>Validates the cron expression to ensure it adheres to the expected format.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>str</code> <p>The cron expression to validate.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the expression is invalid.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The validated cron expression.</p>"},{"location":"features.html#features.cron.CronClient","title":"<code>CronClient</code>","text":"<p>               Bases: <code>BaseRestClient</code></p>"},{"location":"features.html#features.cron.CronClient-functions","title":"Functions","text":""},{"location":"features.html#features.cron.CronClient.create","title":"<code>create(workflow_name, cron_name, expression, input, additional_metadata)</code>","text":"<p>Asynchronously creates a new workflow cron trigger.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_name</code> <code>str</code> <p>The name of the workflow to trigger.</p> required <code>cron_name</code> <code>str</code> <p>The name of the cron trigger.</p> required <code>expression</code> <code>str</code> <p>The cron expression defining the schedule.</p> required <code>input</code> <code>dict</code> <p>The input data for the cron workflow.</p> required <code>additional_metadata</code> <code>dict[str, str]</code> <p>Additional metadata associated with the cron trigger (e.g. {\"key1\": \"value1\", \"key2\": \"value2\"}).</p> required <p>Returns:</p> Name Type Description <code>CronWorkflows</code> <code>CronWorkflows</code> <p>The created cron workflow instance.</p>"},{"location":"features.html#features.cron.CronClient.delete","title":"<code>delete(cron_id)</code>","text":"<p>Asynchronously deletes a workflow cron trigger.</p> <p>Parameters:</p> Name Type Description Default <code>cron_id</code> <code>str</code> <p>The cron trigger ID or CronWorkflows instance to delete.</p> required"},{"location":"features.html#features.cron.CronClient.aio_list","title":"<code>aio_list(offset=None, limit=None, workflow_id=None, additional_metadata=None, order_by_field=None, order_by_direction=None)</code>  <code>async</code>","text":"<p>Synchronously retrieves a list of all workflow cron triggers matching the criteria.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int | None</code> <p>The offset to start the list from.</p> <code>None</code> <code>limit</code> <code>int | None</code> <p>The maximum number of items to return.</p> <code>None</code> <code>workflow_id</code> <code>str | None</code> <p>The ID of the workflow to filter by.</p> <code>None</code> <code>additional_metadata</code> <code>list[str] | None</code> <p>Filter by additional metadata keys (e.g. [\"key1:value1\", \"key2:value2\"]).</p> <code>None</code> <code>order_by_field</code> <code>CronWorkflowsOrderByField | None</code> <p>The field to order the list by.</p> <code>None</code> <code>order_by_direction</code> <code>WorkflowRunOrderByDirection | None</code> <p>The direction to order the list by.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>CronWorkflowsList</code> <code>CronWorkflowsList</code> <p>A list of cron workflows.</p>"},{"location":"features.html#features.cron.CronClient.list","title":"<code>list(offset=None, limit=None, workflow_id=None, additional_metadata=None, order_by_field=None, order_by_direction=None)</code>","text":"<p>Asynchronously retrieves a list of all workflow cron triggers matching the criteria.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int | None</code> <p>The offset to start the list from.</p> <code>None</code> <code>limit</code> <code>int | None</code> <p>The maximum number of items to return.</p> <code>None</code> <code>workflow_id</code> <code>str | None</code> <p>The ID of the workflow to filter by.</p> <code>None</code> <code>additional_metadata</code> <code>list[str] | None</code> <p>Filter by additional metadata keys (e.g. [\"key1:value1\", \"key2:value2\"]).</p> <code>None</code> <code>order_by_field</code> <code>CronWorkflowsOrderByField | None</code> <p>The field to order the list by.</p> <code>None</code> <code>order_by_direction</code> <code>WorkflowRunOrderByDirection | None</code> <p>The direction to order the list by.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>CronWorkflowsList</code> <code>CronWorkflowsList</code> <p>A list of cron workflows.</p>"},{"location":"features.html#features.cron.CronClient.get","title":"<code>get(cron_id)</code>","text":"<p>Asynchronously retrieves a specific workflow cron trigger by ID.</p> <p>Parameters:</p> Name Type Description Default <code>cron_id</code> <code>str</code> <p>The cron trigger ID or CronWorkflows instance to retrieve.</p> required <p>Returns:</p> Name Type Description <code>CronWorkflows</code> <code>CronWorkflows</code> <p>The requested cron workflow instance.</p>"},{"location":"features.html#features.cron.CronClient.aio_get","title":"<code>aio_get(cron_id)</code>  <code>async</code>","text":"<p>Synchronously retrieves a specific workflow cron trigger by ID.</p> <p>Parameters:</p> Name Type Description Default <code>cron_id</code> <code>str</code> <p>The cron trigger ID or CronWorkflows instance to retrieve.</p> required <p>Returns:</p> Name Type Description <code>CronWorkflows</code> <code>CronWorkflows</code> <p>The requested cron workflow instance.</p>"},{"location":"runnables.html","title":"Runnables","text":""},{"location":"runnables.html#runnables.workflow-attributes","title":"Attributes","text":""},{"location":"runnables.html#runnables.workflow-classes","title":"Classes","text":""},{"location":"runnables.html#runnables.workflow.TypedTriggerWorkflowRunConfig","title":"<code>TypedTriggerWorkflowRunConfig</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>Generic[TWorkflowInput]</code></p>"},{"location":"runnables.html#runnables.workflow.TypedTriggerWorkflowRunConfig-attributes","title":"Attributes","text":""},{"location":"runnables.html#runnables.workflow.TypedTriggerWorkflowRunConfig.input","title":"<code>input</code>  <code>instance-attribute</code>","text":""},{"location":"runnables.html#runnables.workflow.TypedTriggerWorkflowRunConfig.options","title":"<code>options</code>  <code>instance-attribute</code>","text":""},{"location":"runnables.html#runnables.workflow.BaseWorkflow","title":"<code>BaseWorkflow</code>","text":"<p>               Bases: <code>Generic[TWorkflowInput]</code></p>"},{"location":"runnables.html#runnables.workflow.BaseWorkflow-attributes","title":"Attributes","text":""},{"location":"runnables.html#runnables.workflow.BaseWorkflow.config","title":"<code>config = config</code>  <code>instance-attribute</code>","text":""},{"location":"runnables.html#runnables.workflow.BaseWorkflow.client","title":"<code>client = client</code>  <code>instance-attribute</code>","text":""},{"location":"runnables.html#runnables.workflow.BaseWorkflow.service_name","title":"<code>service_name</code>  <code>property</code>","text":""},{"location":"runnables.html#runnables.workflow.BaseWorkflow.tasks","title":"<code>tasks</code>  <code>property</code>","text":""},{"location":"runnables.html#runnables.workflow.BaseWorkflow.is_durable","title":"<code>is_durable</code>  <code>property</code>","text":""},{"location":"runnables.html#runnables.workflow.BaseWorkflow.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"runnables.html#runnables.workflow.BaseWorkflow-functions","title":"Functions","text":""},{"location":"runnables.html#runnables.workflow.BaseWorkflow.to_proto","title":"<code>to_proto()</code>","text":""},{"location":"runnables.html#runnables.workflow.BaseWorkflow.create_bulk_run_item","title":"<code>create_bulk_run_item(input=cast(TWorkflowInput, EmptyModel()), key=None, options=TriggerWorkflowOptions())</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow","title":"<code>Workflow</code>","text":"<p>               Bases: <code>BaseWorkflow[TWorkflowInput]</code></p> <p>A Hatchet workflow, which allows you to define tasks to be run and perform actions on the workflow, such as running / spawning children and scheduling future runs.</p>"},{"location":"runnables.html#runnables.workflow.Workflow-functions","title":"Functions","text":""},{"location":"runnables.html#runnables.workflow.Workflow.run_no_wait","title":"<code>run_no_wait(input=cast(TWorkflowInput, EmptyModel()), options=TriggerWorkflowOptions())</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.run","title":"<code>run(input=cast(TWorkflowInput, EmptyModel()), options=TriggerWorkflowOptions())</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.aio_run_no_wait","title":"<code>aio_run_no_wait(input=cast(TWorkflowInput, EmptyModel()), options=TriggerWorkflowOptions())</code>  <code>async</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.aio_run","title":"<code>aio_run(input=cast(TWorkflowInput, EmptyModel()), options=TriggerWorkflowOptions())</code>  <code>async</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.run_many","title":"<code>run_many(workflows)</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.aio_run_many","title":"<code>aio_run_many(workflows)</code>  <code>async</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.run_many_no_wait","title":"<code>run_many_no_wait(workflows)</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.aio_run_many_no_wait","title":"<code>aio_run_many_no_wait(workflows)</code>  <code>async</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.schedule","title":"<code>schedule(run_at, input=cast(TWorkflowInput, EmptyModel()), options=ScheduleTriggerWorkflowOptions())</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.aio_schedule","title":"<code>aio_schedule(run_at, input=cast(TWorkflowInput, EmptyModel()), options=ScheduleTriggerWorkflowOptions())</code>  <code>async</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.create_cron","title":"<code>create_cron(cron_name, expression, input=cast(TWorkflowInput, EmptyModel()), additional_metadata={})</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.aio_create_cron","title":"<code>aio_create_cron(cron_name, expression, input=cast(TWorkflowInput, EmptyModel()), additional_metadata={})</code>  <code>async</code>","text":""},{"location":"runnables.html#runnables.workflow.Workflow.task","title":"<code>task(name=None, schedule_timeout=DEFAULT_SCHEDULE_TIMEOUT, execution_timeout=DEFAULT_EXECUTION_TIMEOUT, parents=[], retries=0, rate_limits=[], desired_worker_labels={}, backoff_factor=None, backoff_max_seconds=None, concurrency=[], wait_for=[], skip_if=[], cancel_if=[])</code>","text":"<p>A decorator to transform a function into a Hatchet task that run as part of a workflow.</p> <p>:param name: The name of the task. If not specified, defaults to the name of the function being wrapped by the <code>task</code> decorator. :type name: str | None</p> <p>:param timeout: The execution timeout of the task. Defaults to 60 minutes. :type timeout: datetime.timedelta | str</p> <p>:param parents: A list of tasks that are parents of the task. Note: Parents must be defined before their children. Defaults to an empty list (no parents). :type parents: list[Task]</p> <p>:param retries: The number of times to retry the task before failing. Default: <code>0</code> :type retries: int</p> <p>:param rate_limits: A list of rate limit configurations for the task. Defaults to an empty list (no rate limits). :type rate_limits: list[RateLimit]</p> <p>:param desired_worker_labels: A dictionary of desired worker labels that determine to which worker the task should be assigned. See documentation and examples on affinity and worker labels for more details. Defaults to an empty dictionary (no desired worker labels). :type desired_worker_labels: dict[str, DesiredWorkerLabel]</p> <p>:param backoff_factor: The backoff factor for controlling exponential backoff in retries. Default: <code>None</code> :type backoff_factor: float | None</p> <p>:param backoff_max_seconds: The maximum number of seconds to allow retries with exponential backoff to continue. Default: <code>None</code> :type backoff_max_seconds: int | None</p> <p>:param concurrency: A list of concurrency expressions for the task. Defaults to an empty list (no concurrency). :type concurrency: list[ConcurrencyExpression]</p> <p>:param wait_for: A list of conditions that must be met before the task can run. Defaults to an empty list (no conditions). :type wait_for: list[Condition | OrGroup]</p> <p>:param skip_if: A list of conditions that, if met, will cause the task to be skipped. Defaults to an empty list (no conditions). :type skip_if: list[Condition | OrGroup]</p> <p>:param cancel_if: A list of conditions that, if met, will cause the task to be canceled. Defaults to an empty list (no conditions). :type cancel_if: list[Condition | OrGroup]</p> <p>:returns: A decorator which creates a <code>Task</code> object. :rtype: Callable[[Callable[[Type[BaseModel], Context], R]], Task[Type[BaseModel], R]]</p>"},{"location":"runnables.html#runnables.workflow.Workflow.durable_task","title":"<code>durable_task(name=None, schedule_timeout=DEFAULT_SCHEDULE_TIMEOUT, execution_timeout=DEFAULT_EXECUTION_TIMEOUT, parents=[], retries=0, rate_limits=[], desired_worker_labels={}, backoff_factor=None, backoff_max_seconds=None, concurrency=[], wait_for=[], skip_if=[], cancel_if=[])</code>","text":"<p>A decorator to transform a function into a durable Hatchet task that run as part of a workflow.</p> <p>IMPORTANT: This decorator creates a durable task, which works using Hatchet's durable execution capabilities. This is an advanced feature of Hatchet.</p> <p>See the Hatchet docs for more information on durable execution to decide if this is right for you.</p> <p>:param name: The name of the task. If not specified, defaults to the name of the function being wrapped by the <code>task</code> decorator. :type name: str | None</p> <p>:param timeout: The execution timeout of the task. Defaults to 60 minutes. :type timeout: datetime.timedelta | str</p> <p>:param parents: A list of tasks that are parents of the task. Note: Parents must be defined before their children. Defaults to an empty list (no parents). :type parents: list[Task]</p> <p>:param retries: The number of times to retry the task before failing. Default: <code>0</code> :type retries: int</p> <p>:param rate_limits: A list of rate limit configurations for the task. Defaults to an empty list (no rate limits). :type rate_limits: list[RateLimit]</p> <p>:param desired_worker_labels: A dictionary of desired worker labels that determine to which worker the task should be assigned. See documentation and examples on affinity and worker labels for more details. Defaults to an empty dictionary (no desired worker labels). :type desired_worker_labels: dict[str, DesiredWorkerLabel]</p> <p>:param backoff_factor: The backoff factor for controlling exponential backoff in retries. Default: <code>None</code> :type backoff_factor: float | None</p> <p>:param backoff_max_seconds: The maximum number of seconds to allow retries with exponential backoff to continue. Default: <code>None</code> :type backoff_max_seconds: int | None</p> <p>:param concurrency: A list of concurrency expressions for the task. Defaults to an empty list (no concurrency). :type concurrency: list[ConcurrencyExpression]</p> <p>:param wait_for: A list of conditions that must be met before the task can run. Defaults to an empty list (no conditions). :type wait_for: list[Condition | OrGroup]</p> <p>:param skip_if: A list of conditions that, if met, will cause the task to be skipped. Defaults to an empty list (no conditions). :type skip_if: list[Condition | OrGroup]</p> <p>:param cancel_if: A list of conditions that, if met, will cause the task to be canceled. Defaults to an empty list (no conditions). :type cancel_if: list[Condition | OrGroup]</p> <p>:returns: A decorator which creates a <code>Task</code> object. :rtype: Callable[[Callable[[Type[BaseModel], Context], R]], Task[Type[BaseModel], R]]</p>"},{"location":"runnables.html#runnables.workflow.Workflow.on_failure_task","title":"<code>on_failure_task(name=None, schedule_timeout=DEFAULT_SCHEDULE_TIMEOUT, execution_timeout=DEFAULT_EXECUTION_TIMEOUT, retries=0, rate_limits=[], backoff_factor=None, backoff_max_seconds=None, concurrency=[])</code>","text":"<p>A decorator to transform a function into a Hatchet on-failure task that runs as the last step in a workflow that had at least one task fail.</p> <p>:param name: The name of the on-failure task. If not specified, defaults to the name of the function being wrapped by the <code>on_failure_task</code> decorator. :type name: str | None</p> <p>:param timeout: The execution timeout of the on-failure task. Defaults to 60 minutes. :type timeout: datetime.timedelta | str</p> <p>:param retries: The number of times to retry the on-failure task before failing. Default: <code>0</code> :type retries: int</p> <p>:param rate_limits: A list of rate limit configurations for the on-failure task. Defaults to an empty list (no rate limits). :type rate_limits: list[RateLimit]</p> <p>:param backoff_factor: The backoff factor for controlling exponential backoff in retries. Default: <code>None</code> :type backoff_factor: float | None</p> <p>:param backoff_max_seconds: The maximum number of seconds to allow retries with exponential backoff to continue. Default: <code>None</code> :type backoff_max_seconds: int | None</p> <p>:returns: A decorator which creates a <code>Task</code> object. :rtype: Callable[[Callable[[Type[BaseModel], Context], R]], Task[Type[BaseModel], R]]</p>"},{"location":"runnables.html#runnables.workflow.Workflow.on_success_task","title":"<code>on_success_task(name=None, schedule_timeout=DEFAULT_SCHEDULE_TIMEOUT, execution_timeout=DEFAULT_EXECUTION_TIMEOUT, retries=0, rate_limits=[], backoff_factor=None, backoff_max_seconds=None, concurrency=[])</code>","text":"<p>A decorator to transform a function into a Hatchet on-success task that runs as the last step in a workflow that had all upstream tasks succeed.</p> <p>:param name: The name of the on-success task. If not specified, defaults to the name of the function being wrapped by the <code>on_failure_task</code> decorator. :type name: str | None</p> <p>:param timeout: The execution timeout of the on-success task. Defaults to 60 minutes. :type timeout: datetime.timedelta | str</p> <p>:param retries: The number of times to retry the on-success task before failing. Default: <code>0</code> :type retries: int</p> <p>:param rate_limits: A list of rate limit configurations for the on-success task. Defaults to an empty list (no rate limits). :type rate_limits: list[RateLimit]</p> <p>:param backoff_factor: The backoff factor for controlling exponential backoff in retries. Default: <code>None</code> :type backoff_factor: float | None</p> <p>:param backoff_max_seconds: The maximum number of seconds to allow retries with exponential backoff to continue. Default: <code>None</code> :type backoff_max_seconds: int | None</p> <p>:returns: A decorator which creates a <code>Task</code> object. :rtype: Callable[[Callable[[Type[BaseModel], Context], R]], Task[Type[BaseModel], R]]</p>"},{"location":"runnables.html#runnables.workflow.Workflow.add_task","title":"<code>add_task(task)</code>","text":"<p>Add a task to a workflow. Intended to be used with a previously existing task (a Standalone), such as one created with <code>@hatchet.task()</code>, which has been converted to a <code>Task</code> object using <code>to_task</code>.</p> <p>For example:</p> <pre><code>@hatchet.task()\ndef my_task(input, ctx) -&gt; None:\n    pass\n\nwf = hatchet.workflow()\n\nwf.add_task(my_task.to_task())\n</code></pre>"},{"location":"runnables.html#runnables.workflow-functions","title":"Functions","text":""},{"location":"runnables.html#runnables.workflow.transform_desired_worker_label","title":"<code>transform_desired_worker_label(d)</code>","text":""},{"location":"runnables.html#runnables.task-classes","title":"Classes","text":""},{"location":"runnables.html#runnables.types-classes","title":"Classes","text":""},{"location":"runnables.html#runnables.types.ConcurrencyExpression","title":"<code>ConcurrencyExpression</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines concurrency limits for a workflow using a CEL expression. Args:     expression (str): CEL expression to determine concurrency grouping. (i.e. \"input.user_id\")     max_runs (int): Maximum number of concurrent workflow runs.     limit_strategy (ConcurrencyLimitStrategy): Strategy for handling limit violations. Example:     ConcurrencyExpression(\"input.user_id\", 5, ConcurrencyLimitStrategy.CANCEL_IN_PROGRESS)</p>"},{"location":"worker.html","title":"Worker","text":""}]}
