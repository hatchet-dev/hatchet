import { Snippet } from '@/lib/generated/snips/types';

const snippet: Snippet = {
  'language': 'typescript ',
  'content': 'import sleep from \'@hatchet-dev/typescript-sdk/util/sleep\';\nimport { hatchet } from \'../hatchet-client\';\n\ntype SimpleInput = {\n  Message: string;\n  N: number;\n};\n\ntype Output = {\n  transformer: {\n    Sum: number;\n  };\n};\n\nexport const child1 = hatchet.workflow<SimpleInput, Output>({\n  name: \'child1\',\n});\n\nchild1.task({\n  name: \'transformer\',\n  fn: () => {\n    sleep(15);\n    return {\n      Sum: 1,\n    };\n  },\n});\n\nexport const child2 = hatchet.workflow<SimpleInput, Output>({\n  name: \'child2\',\n});\n\nchild2.task({\n  name: \'transformer\',\n  fn: async (input, ctx) => {\n    const count = input.N;\n    const promises = Array(count)\n      .fill(null)\n      .map(() => ({ workflow: child1, input }));\n\n    const results = await ctx.bulkRunChildren(promises);\n\n    sleep(15);\n    return {\n      Sum: results.reduce((acc, r) => acc + r.transformer.Sum, 0),\n    };\n  },\n});\n\nexport const child3 = hatchet.workflow<SimpleInput, Output>({\n  name: \'child3\',\n});\n\nchild3.task({\n  name: \'transformer\',\n  fn: async (input, ctx) => {\n    const count = input.N;\n    const promises = Array(count)\n      .fill(null)\n      .map(() => ({ workflow: child2, input }));\n\n    const results = await ctx.bulkRunChildren(promises);\n\n    return {\n      Sum: results.reduce((acc, r) => acc + r.transformer.Sum, 0),\n    };\n  },\n});\n\nexport const child4 = hatchet.workflow<SimpleInput, Output>({\n  name: \'child4\',\n});\n\nchild4.task({\n  name: \'transformer\',\n  fn: async (input, ctx) => {\n    const count = input.N;\n    const promises = Array(count)\n      .fill(null)\n      .map(() => ({ workflow: child3, input }));\n\n    const results = await ctx.bulkRunChildren(promises);\n\n    return {\n      Sum: results.reduce((acc, r) => acc + r.transformer.Sum, 0),\n    };\n  },\n});\n\nexport const child5 = hatchet.workflow<SimpleInput, Output>({\n  name: \'child5\',\n});\n\nchild5.task({\n  name: \'transformer\',\n  fn: async (input, ctx) => {\n    const count = input.N;\n    const promises = Array(count)\n      .fill(null)\n      .map(() => ({ workflow: child4, input }));\n\n    const results = await ctx.bulkRunChildren(promises);\n\n    return {\n      Sum: results.reduce((acc, r) => acc + r.transformer.Sum, 0),\n    };\n  },\n});\n\nexport const parent = hatchet.workflow<SimpleInput, { parent: Output[\'transformer\'] }>({\n  name: \'parent\',\n});\n\nparent.task({\n  name: \'parent\',\n  fn: async (input, ctx) => {\n    const count = input.N; // Random number between 2-4\n    const promises = Array(count)\n      .fill(null)\n      .map(() => ({ workflow: child5, input }));\n\n    const results = await ctx.bulkRunChildren(promises);\n\n    return {\n      Sum: results.reduce((acc, r) => acc + r.transformer.Sum, 0),\n    };\n  },\n});\n',
  'source': 'out/typescript/deep/workflow.ts',
  'blocks': {},
  'highlights': {}
};  // Then replace double quotes with single quotes

export default snippet;
