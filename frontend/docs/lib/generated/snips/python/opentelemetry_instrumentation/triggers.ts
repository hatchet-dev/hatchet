import { Snippet } from '@/lib/generated/snips/types';

const snippet: Snippet = {
  'language': 'python',
  'content': 'import asyncio\n\nfrom examples.opentelemetry_instrumentation.client import hatchet\nfrom examples.opentelemetry_instrumentation.tracer import trace_provider\nfrom examples.opentelemetry_instrumentation.worker import otel_workflow\nfrom hatchet_sdk.clients.admin import TriggerWorkflowOptions\nfrom hatchet_sdk.clients.events import BulkPushEventWithMetadata, PushEventOptions\nfrom hatchet_sdk.opentelemetry.instrumentor import (\n    HatchetInstrumentor,\n    inject_traceparent_into_metadata,\n)\n\ninstrumentor = HatchetInstrumentor(tracer_provider=trace_provider)\ntracer = trace_provider.get_tracer(__name__)\n\n\ndef create_additional_metadata() -> dict[str, str]:\n    return inject_traceparent_into_metadata({\'hello\': \'world\'})\n\n\ndef create_push_options() -> PushEventOptions:\n    return PushEventOptions(additional_metadata=create_additional_metadata())\n\n\ndef push_event() -> None:\n    print(\'\\npush_event\')\n    with tracer.start_as_current_span(\'push_event\'):\n        hatchet.event.push(\n            \'otel:event\',\n            {\'test\': \'test\'},\n            options=create_push_options(),\n        )\n\n\nasync def async_push_event() -> None:\n    print(\'\\nasync_push_event\')\n    with tracer.start_as_current_span(\'async_push_event\'):\n        await hatchet.event.aio_push(\n            \'otel:event\', {\'test\': \'test\'}, options=create_push_options()\n        )\n\n\ndef bulk_push_event() -> None:\n    print(\'\\nbulk_push_event\')\n    with tracer.start_as_current_span(\'bulk_push_event\'):\n        hatchet.event.bulk_push(\n            [\n                BulkPushEventWithMetadata(\n                    key=\'otel:event\',\n                    payload={\'test\': \'test 1\'},\n                    additional_metadata=create_additional_metadata(),\n                ),\n                BulkPushEventWithMetadata(\n                    key=\'otel:event\',\n                    payload={\'test\': \'test 2\'},\n                    additional_metadata=create_additional_metadata(),\n                ),\n            ],\n        )\n\n\nasync def async_bulk_push_event() -> None:\n    print(\'\\nasync_bulk_push_event\')\n    with tracer.start_as_current_span(\'bulk_push_event\'):\n        await hatchet.event.aio_bulk_push(\n            [\n                BulkPushEventWithMetadata(\n                    key=\'otel:event\',\n                    payload={\'test\': \'test 1\'},\n                    additional_metadata=create_additional_metadata(),\n                ),\n                BulkPushEventWithMetadata(\n                    key=\'otel:event\',\n                    payload={\'test\': \'test 2\'},\n                    additional_metadata=create_additional_metadata(),\n                ),\n            ],\n        )\n\n\ndef run_workflow() -> None:\n    print(\'\\nrun_workflow\')\n    with tracer.start_as_current_span(\'run_workflow\'):\n        otel_workflow.run(\n            options=TriggerWorkflowOptions(\n                additional_metadata=create_additional_metadata()\n            ),\n        )\n\n\nasync def async_run_workflow() -> None:\n    print(\'\\nasync_run_workflow\')\n    with tracer.start_as_current_span(\'async_run_workflow\'):\n        await otel_workflow.aio_run(\n            options=TriggerWorkflowOptions(\n                additional_metadata=create_additional_metadata()\n            ),\n        )\n\n\ndef run_workflows() -> None:\n    print(\'\\nrun_workflows\')\n    with tracer.start_as_current_span(\'run_workflows\'):\n        otel_workflow.run_many(\n            [\n                otel_workflow.create_bulk_run_item(\n                    options=TriggerWorkflowOptions(\n                        additional_metadata=create_additional_metadata()\n                    )\n                ),\n                otel_workflow.create_bulk_run_item(\n                    options=TriggerWorkflowOptions(\n                        additional_metadata=create_additional_metadata()\n                    )\n                ),\n            ],\n        )\n\n\nasync def async_run_workflows() -> None:\n    print(\'\\nasync_run_workflows\')\n    with tracer.start_as_current_span(\'async_run_workflows\'):\n        await otel_workflow.aio_run_many(\n            [\n                otel_workflow.create_bulk_run_item(\n                    options=TriggerWorkflowOptions(\n                        additional_metadata=create_additional_metadata()\n                    )\n                ),\n                otel_workflow.create_bulk_run_item(\n                    options=TriggerWorkflowOptions(\n                        additional_metadata=create_additional_metadata()\n                    )\n                ),\n            ],\n        )\n\n\nasync def main() -> None:\n    push_event()\n    await async_push_event()\n    bulk_push_event()\n    await async_bulk_push_event()\n    run_workflow()\n    # await async_run_workflow()\n    run_workflows()\n    # await async_run_workflows()\n\n\nif __name__ == \'__main__\':\n    asyncio.run(main())\n',
  'source': 'out/python/opentelemetry_instrumentation/triggers.py',
  'blocks': {},
  'highlights': {}
};  // Then replace double quotes with single quotes

export default snippet;
