// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/hatchet-dev/hatchet/api/v1/server/oas/openapi"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for ConcurrencyLimitStrategy.
const (
	CANCELINPROGRESS ConcurrencyLimitStrategy = "CANCEL_IN_PROGRESS"
	DROPNEWEST       ConcurrencyLimitStrategy = "DROP_NEWEST"
	GROUPROUNDROBIN  ConcurrencyLimitStrategy = "GROUP_ROUND_ROBIN"
	QUEUENEWEST      ConcurrencyLimitStrategy = "QUEUE_NEWEST"
)

// Defines values for CronWorkflowsMethod.
const (
	CronWorkflowsMethodAPI     CronWorkflowsMethod = "API"
	CronWorkflowsMethodDEFAULT CronWorkflowsMethod = "DEFAULT"
)

// Defines values for CronWorkflowsOrderByField.
const (
	CronWorkflowsOrderByFieldCreatedAt CronWorkflowsOrderByField = "createdAt"
	CronWorkflowsOrderByFieldName      CronWorkflowsOrderByField = "name"
)

// Defines values for EventOrderByDirection.
const (
	EventOrderByDirectionAsc  EventOrderByDirection = "asc"
	EventOrderByDirectionDesc EventOrderByDirection = "desc"
)

// Defines values for EventOrderByField.
const (
	EventOrderByFieldCreatedAt EventOrderByField = "createdAt"
)

// Defines values for JobRunStatus.
const (
	JobRunStatusBACKOFF   JobRunStatus = "BACKOFF"
	JobRunStatusCANCELLED JobRunStatus = "CANCELLED"
	JobRunStatusFAILED    JobRunStatus = "FAILED"
	JobRunStatusPENDING   JobRunStatus = "PENDING"
	JobRunStatusRUNNING   JobRunStatus = "RUNNING"
	JobRunStatusSUCCEEDED JobRunStatus = "SUCCEEDED"
)

// Defines values for LogLineLevel.
const (
	LogLineLevelDEBUG LogLineLevel = "DEBUG"
	LogLineLevelERROR LogLineLevel = "ERROR"
	LogLineLevelINFO  LogLineLevel = "INFO"
	LogLineLevelWARN  LogLineLevel = "WARN"
)

// Defines values for LogLineOrderByDirection.
const (
	LogLineOrderByDirectionAsc  LogLineOrderByDirection = "asc"
	LogLineOrderByDirectionDesc LogLineOrderByDirection = "desc"
)

// Defines values for LogLineOrderByField.
const (
	LogLineOrderByFieldCreatedAt LogLineOrderByField = "createdAt"
)

// Defines values for RateLimitOrderByDirection.
const (
	Asc  RateLimitOrderByDirection = "asc"
	Desc RateLimitOrderByDirection = "desc"
)

// Defines values for RateLimitOrderByField.
const (
	Key        RateLimitOrderByField = "key"
	LimitValue RateLimitOrderByField = "limitValue"
	Value      RateLimitOrderByField = "value"
)

// Defines values for ScheduledRunStatus.
const (
	ScheduledRunStatusCANCELLED ScheduledRunStatus = "CANCELLED"
	ScheduledRunStatusFAILED    ScheduledRunStatus = "FAILED"
	ScheduledRunStatusPENDING   ScheduledRunStatus = "PENDING"
	ScheduledRunStatusQUEUED    ScheduledRunStatus = "QUEUED"
	ScheduledRunStatusRUNNING   ScheduledRunStatus = "RUNNING"
	ScheduledRunStatusSCHEDULED ScheduledRunStatus = "SCHEDULED"
	ScheduledRunStatusSUCCEEDED ScheduledRunStatus = "SUCCEEDED"
)

// Defines values for ScheduledWorkflowsMethod.
const (
	ScheduledWorkflowsMethodAPI     ScheduledWorkflowsMethod = "API"
	ScheduledWorkflowsMethodDEFAULT ScheduledWorkflowsMethod = "DEFAULT"
)

// Defines values for ScheduledWorkflowsOrderByField.
const (
	ScheduledWorkflowsOrderByFieldCreatedAt ScheduledWorkflowsOrderByField = "createdAt"
	ScheduledWorkflowsOrderByFieldTriggerAt ScheduledWorkflowsOrderByField = "triggerAt"
)

// Defines values for StepRunEventReason.
const (
	StepRunEventReasonACKNOWLEDGED                 StepRunEventReason = "ACKNOWLEDGED"
	StepRunEventReasonASSIGNED                     StepRunEventReason = "ASSIGNED"
	StepRunEventReasonCANCELLED                    StepRunEventReason = "CANCELLED"
	StepRunEventReasonFAILED                       StepRunEventReason = "FAILED"
	StepRunEventReasonFINISHED                     StepRunEventReason = "FINISHED"
	StepRunEventReasonREASSIGNED                   StepRunEventReason = "REASSIGNED"
	StepRunEventReasonREQUEUEDNOWORKER             StepRunEventReason = "REQUEUED_NO_WORKER"
	StepRunEventReasonREQUEUEDRATELIMIT            StepRunEventReason = "REQUEUED_RATE_LIMIT"
	StepRunEventReasonRETRIEDBYUSER                StepRunEventReason = "RETRIED_BY_USER"
	StepRunEventReasonRETRYING                     StepRunEventReason = "RETRYING"
	StepRunEventReasonSCHEDULINGTIMEDOUT           StepRunEventReason = "SCHEDULING_TIMED_OUT"
	StepRunEventReasonSLOTRELEASED                 StepRunEventReason = "SLOT_RELEASED"
	StepRunEventReasonSTARTED                      StepRunEventReason = "STARTED"
	StepRunEventReasonTIMEDOUT                     StepRunEventReason = "TIMED_OUT"
	StepRunEventReasonTIMEOUTREFRESHED             StepRunEventReason = "TIMEOUT_REFRESHED"
	StepRunEventReasonWORKFLOWRUNGROUPKEYFAILED    StepRunEventReason = "WORKFLOW_RUN_GROUP_KEY_FAILED"
	StepRunEventReasonWORKFLOWRUNGROUPKEYSUCCEEDED StepRunEventReason = "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED"
)

// Defines values for StepRunEventSeverity.
const (
	StepRunEventSeverityCRITICAL StepRunEventSeverity = "CRITICAL"
	StepRunEventSeverityINFO     StepRunEventSeverity = "INFO"
	StepRunEventSeverityWARNING  StepRunEventSeverity = "WARNING"
)

// Defines values for StepRunStatus.
const (
	StepRunStatusASSIGNED          StepRunStatus = "ASSIGNED"
	StepRunStatusBACKOFF           StepRunStatus = "BACKOFF"
	StepRunStatusCANCELLED         StepRunStatus = "CANCELLED"
	StepRunStatusCANCELLING        StepRunStatus = "CANCELLING"
	StepRunStatusFAILED            StepRunStatus = "FAILED"
	StepRunStatusPENDING           StepRunStatus = "PENDING"
	StepRunStatusPENDINGASSIGNMENT StepRunStatus = "PENDING_ASSIGNMENT"
	StepRunStatusRUNNING           StepRunStatus = "RUNNING"
	StepRunStatusSUCCEEDED         StepRunStatus = "SUCCEEDED"
)

// Defines values for TenantMemberRole.
const (
	ADMIN  TenantMemberRole = "ADMIN"
	MEMBER TenantMemberRole = "MEMBER"
	OWNER  TenantMemberRole = "OWNER"
)

// Defines values for TenantResource.
const (
	CRON        TenantResource = "CRON"
	EVENT       TenantResource = "EVENT"
	SCHEDULE    TenantResource = "SCHEDULE"
	TASKRUN     TenantResource = "TASK_RUN"
	WORKER      TenantResource = "WORKER"
	WORKERSLOT  TenantResource = "WORKER_SLOT"
	WORKFLOWRUN TenantResource = "WORKFLOW_RUN"
)

// Defines values for TenantUIVersion.
const (
	TenantUIVersionV0 TenantUIVersion = "V0"
	TenantUIVersionV1 TenantUIVersion = "V1"
)

// Defines values for TenantVersion.
const (
	TenantVersionV0 TenantVersion = "V0"
	TenantVersionV1 TenantVersion = "V1"
)

// Defines values for V1LogLineLevel.
const (
	DEBUG V1LogLineLevel = "DEBUG"
	ERROR V1LogLineLevel = "ERROR"
	INFO  V1LogLineLevel = "INFO"
	WARN  V1LogLineLevel = "WARN"
)

// Defines values for V1TaskEventType.
const (
	V1TaskEventTypeACKNOWLEDGED       V1TaskEventType = "ACKNOWLEDGED"
	V1TaskEventTypeASSIGNED           V1TaskEventType = "ASSIGNED"
	V1TaskEventTypeCANCELLED          V1TaskEventType = "CANCELLED"
	V1TaskEventTypeCREATED            V1TaskEventType = "CREATED"
	V1TaskEventTypeFAILED             V1TaskEventType = "FAILED"
	V1TaskEventTypeFINISHED           V1TaskEventType = "FINISHED"
	V1TaskEventTypeQUEUED             V1TaskEventType = "QUEUED"
	V1TaskEventTypeRATELIMITERROR     V1TaskEventType = "RATE_LIMIT_ERROR"
	V1TaskEventTypeREASSIGNED         V1TaskEventType = "REASSIGNED"
	V1TaskEventTypeREQUEUEDNOWORKER   V1TaskEventType = "REQUEUED_NO_WORKER"
	V1TaskEventTypeREQUEUEDRATELIMIT  V1TaskEventType = "REQUEUED_RATE_LIMIT"
	V1TaskEventTypeRETRIEDBYUSER      V1TaskEventType = "RETRIED_BY_USER"
	V1TaskEventTypeRETRYING           V1TaskEventType = "RETRYING"
	V1TaskEventTypeSCHEDULINGTIMEDOUT V1TaskEventType = "SCHEDULING_TIMED_OUT"
	V1TaskEventTypeSENTTOWORKER       V1TaskEventType = "SENT_TO_WORKER"
	V1TaskEventTypeSKIPPED            V1TaskEventType = "SKIPPED"
	V1TaskEventTypeSLOTRELEASED       V1TaskEventType = "SLOT_RELEASED"
	V1TaskEventTypeSTARTED            V1TaskEventType = "STARTED"
	V1TaskEventTypeTIMEDOUT           V1TaskEventType = "TIMED_OUT"
	V1TaskEventTypeTIMEOUTREFRESHED   V1TaskEventType = "TIMEOUT_REFRESHED"
)

// Defines values for V1TaskStatus.
const (
	V1TaskStatusCANCELLED V1TaskStatus = "CANCELLED"
	V1TaskStatusCOMPLETED V1TaskStatus = "COMPLETED"
	V1TaskStatusFAILED    V1TaskStatus = "FAILED"
	V1TaskStatusQUEUED    V1TaskStatus = "QUEUED"
	V1TaskStatusRUNNING   V1TaskStatus = "RUNNING"
)

// Defines values for V1WorkflowType.
const (
	V1WorkflowTypeDAG  V1WorkflowType = "DAG"
	V1WorkflowTypeTASK V1WorkflowType = "TASK"
)

// Defines values for WorkerStatus.
const (
	ACTIVE   WorkerStatus = "ACTIVE"
	INACTIVE WorkerStatus = "INACTIVE"
	PAUSED   WorkerStatus = "PAUSED"
)

// Defines values for WorkerRuntimeSDKs.
const (
	GOLANG     WorkerRuntimeSDKs = "GOLANG"
	PYTHON     WorkerRuntimeSDKs = "PYTHON"
	TYPESCRIPT WorkerRuntimeSDKs = "TYPESCRIPT"
)

// Defines values for WorkerType.
const (
	MANAGED    WorkerType = "MANAGED"
	SELFHOSTED WorkerType = "SELFHOSTED"
	WEBHOOK    WorkerType = "WEBHOOK"
)

// Defines values for WorkflowKind.
const (
	WorkflowKindDAG      WorkflowKind = "DAG"
	WorkflowKindDURABLE  WorkflowKind = "DURABLE"
	WorkflowKindFUNCTION WorkflowKind = "FUNCTION"
)

// Defines values for WorkflowRunOrderByDirection.
const (
	ASC  WorkflowRunOrderByDirection = "ASC"
	DESC WorkflowRunOrderByDirection = "DESC"
)

// Defines values for WorkflowRunOrderByField.
const (
	CreatedAt  WorkflowRunOrderByField = "createdAt"
	Duration   WorkflowRunOrderByField = "duration"
	FinishedAt WorkflowRunOrderByField = "finishedAt"
	StartedAt  WorkflowRunOrderByField = "startedAt"
)

// Defines values for WorkflowRunStatus.
const (
	BACKOFF   WorkflowRunStatus = "BACKOFF"
	CANCELLED WorkflowRunStatus = "CANCELLED"
	FAILED    WorkflowRunStatus = "FAILED"
	PENDING   WorkflowRunStatus = "PENDING"
	QUEUED    WorkflowRunStatus = "QUEUED"
	RUNNING   WorkflowRunStatus = "RUNNING"
	SUCCEEDED WorkflowRunStatus = "SUCCEEDED"
)

// APIError defines model for APIError.
type APIError struct {
	// Code a custom Hatchet error code
	Code *uint64 `json:"code,omitempty"`

	// Description a description for this error
	Description string `json:"description"`

	// DocsLink a link to the documentation for this error, if it exists
	DocsLink *string `json:"docs_link,omitempty"`

	// Field the field that this error is associated with, if applicable
	Field *string `json:"field,omitempty"`
}

// APIErrors defines model for APIErrors.
type APIErrors struct {
	Errors []APIError `json:"errors"`
}

// APIMeta defines model for APIMeta.
type APIMeta struct {
	// AllowChangePassword whether or not users can change their password
	AllowChangePassword *bool `json:"allowChangePassword,omitempty"`

	// AllowCreateTenant whether or not users can create new tenants
	AllowCreateTenant *bool `json:"allowCreateTenant,omitempty"`

	// AllowInvites whether or not users can invite other users to this instance
	AllowInvites *bool `json:"allowInvites,omitempty"`

	// AllowSignup whether or not users can sign up for this instance
	AllowSignup *bool           `json:"allowSignup,omitempty"`
	Auth        *APIMetaAuth    `json:"auth,omitempty"`
	Posthog     *APIMetaPosthog `json:"posthog,omitempty"`

	// PylonAppId the Pylon app ID for usepylon.com chat support
	PylonAppId *string `json:"pylonAppId,omitempty"`
}

// APIMetaAuth defines model for APIMetaAuth.
type APIMetaAuth struct {
	// Schemes the supported types of authentication
	Schemes *[]string `json:"schemes,omitempty"`
}

// APIMetaIntegration defines model for APIMetaIntegration.
type APIMetaIntegration struct {
	// Enabled whether this integration is enabled on the instance
	Enabled bool `json:"enabled"`

	// Name the name of the integration
	Name string `json:"name"`
}

// APIMetaPosthog defines model for APIMetaPosthog.
type APIMetaPosthog struct {
	// ApiHost the PostHog API host
	ApiHost *string `json:"apiHost,omitempty"`

	// ApiKey the PostHog API key
	ApiKey *string `json:"apiKey,omitempty"`
}

// APIResourceMeta defines model for APIResourceMeta.
type APIResourceMeta struct {
	// CreatedAt the time that this resource was created
	CreatedAt time.Time `json:"createdAt"`

	// Id the id of this resource, in UUID format
	Id string `json:"id"`

	// UpdatedAt the time that this resource was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// APIToken defines model for APIToken.
type APIToken struct {
	// ExpiresAt When the API token expires.
	ExpiresAt time.Time       `json:"expiresAt"`
	Metadata  APIResourceMeta `json:"metadata"`

	// Name The name of the API token.
	Name string `json:"name"`
}

// AcceptInviteRequest defines model for AcceptInviteRequest.
type AcceptInviteRequest struct {
	Invite string `json:"invite" validate:"required,uuid"`
}

// BulkCreateEventRequest defines model for BulkCreateEventRequest.
type BulkCreateEventRequest struct {
	Events []CreateEventRequest `json:"events"`
}

// CancelEventRequest defines model for CancelEventRequest.
type CancelEventRequest struct {
	EventIds []openapi_types.UUID `json:"eventIds"`
}

// ConcurrencyLimitStrategy defines model for ConcurrencyLimitStrategy.
type ConcurrencyLimitStrategy string

// CreateAPITokenRequest defines model for CreateAPITokenRequest.
type CreateAPITokenRequest struct {
	// ExpiresIn The duration for which the token is valid.
	ExpiresIn *string `json:"expiresIn,omitempty" validate:"omitnil,duration"`

	// Name A name for the API token.
	Name string `json:"name"`
}

// CreateAPITokenResponse defines model for CreateAPITokenResponse.
type CreateAPITokenResponse struct {
	// Token The API token.
	Token string `json:"token"`
}

// CreateCronWorkflowTriggerRequest defines model for CreateCronWorkflowTriggerRequest.
type CreateCronWorkflowTriggerRequest struct {
	AdditionalMetadata map[string]interface{} `json:"additionalMetadata"`
	CronExpression     string                 `json:"cronExpression"`
	CronName           string                 `json:"cronName"`
	Input              map[string]interface{} `json:"input"`
	Priority           *int32                 `json:"priority,omitempty"`
}

// CreateEventRequest defines model for CreateEventRequest.
type CreateEventRequest struct {
	// AdditionalMetadata Additional metadata for the event.
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`

	// Data The data for the event.
	Data map[string]interface{} `json:"data"`

	// Key The key for the event.
	Key string `json:"key"`

	// Priority The priority of the event.
	Priority *int32 `json:"priority,omitempty"`

	// Scope The scope for event filtering.
	Scope *string `json:"scope,omitempty"`
}

// CreateSNSIntegrationRequest defines model for CreateSNSIntegrationRequest.
type CreateSNSIntegrationRequest struct {
	// TopicArn The Amazon Resource Name (ARN) of the SNS topic.
	TopicArn string `json:"topicArn" validate:"required,min=1,max=256"`
}

// CreateTenantAlertEmailGroupRequest defines model for CreateTenantAlertEmailGroupRequest.
type CreateTenantAlertEmailGroupRequest struct {
	// Emails A list of emails for users
	Emails []string `json:"emails" validate:"required,dive,email"`
}

// CreateTenantInviteRequest defines model for CreateTenantInviteRequest.
type CreateTenantInviteRequest struct {
	// Email The email of the user to invite.
	Email string           `json:"email" validate:"required,email"`
	Role  TenantMemberRole `json:"role"`
}

// CreateTenantRequest defines model for CreateTenantRequest.
type CreateTenantRequest struct {
	EngineVersion *TenantVersion `json:"engineVersion,omitempty"`

	// Name The name of the tenant.
	Name string `json:"name" validate:"required"`

	// Slug The slug of the tenant.
	Slug      string           `json:"slug" validate:"required,hatchetName"`
	UiVersion *TenantUIVersion `json:"uiVersion,omitempty"`
}

// CronWorkflows defines model for CronWorkflows.
type CronWorkflows struct {
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`
	Cron               string                  `json:"cron"`
	Enabled            bool                    `json:"enabled"`
	Input              *map[string]interface{} `json:"input,omitempty"`
	Metadata           APIResourceMeta         `json:"metadata"`
	Method             CronWorkflowsMethod     `json:"method"`
	Name               *string                 `json:"name,omitempty"`
	Priority           *int32                  `json:"priority,omitempty"`
	TenantId           string                  `json:"tenantId"`
	WorkflowId         string                  `json:"workflowId"`
	WorkflowName       string                  `json:"workflowName"`
	WorkflowVersionId  string                  `json:"workflowVersionId"`
}

// CronWorkflowsList defines model for CronWorkflowsList.
type CronWorkflowsList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]CronWorkflows    `json:"rows,omitempty"`
}

// CronWorkflowsMethod defines model for CronWorkflowsMethod.
type CronWorkflowsMethod string

// CronWorkflowsOrderByField defines model for CronWorkflowsOrderByField.
type CronWorkflowsOrderByField string

// Event defines model for Event.
type Event struct {
	// AdditionalMetadata Additional metadata for the event.
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`

	// Key The key for the event.
	Key      string          `json:"key"`
	Metadata APIResourceMeta `json:"metadata"`
	Tenant   *Tenant         `json:"tenant,omitempty"`

	// TenantId The ID of the tenant associated with this event.
	TenantId           string                   `json:"tenantId"`
	WorkflowRunSummary *EventWorkflowRunSummary `json:"workflowRunSummary,omitempty"`
}

// EventData defines model for EventData.
type EventData struct {
	// Data The data for the event (JSON bytes).
	Data string `json:"data"`
}

// EventKey The key for the event.
type EventKey = string

// EventKeyList defines model for EventKeyList.
type EventKeyList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]EventKey         `json:"rows,omitempty"`
}

// EventList defines model for EventList.
type EventList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]Event            `json:"rows,omitempty"`
}

// EventOrderByDirection defines model for EventOrderByDirection.
type EventOrderByDirection string

// EventOrderByField defines model for EventOrderByField.
type EventOrderByField string

// EventSearch defines model for EventSearch.
type EventSearch = string

// EventWorkflowRunSummary defines model for EventWorkflowRunSummary.
type EventWorkflowRunSummary struct {
	// Cancelled The number of cancelled runs.
	Cancelled *int64 `json:"cancelled,omitempty"`

	// Failed The number of failed runs.
	Failed *int64 `json:"failed,omitempty"`

	// Pending The number of pending runs.
	Pending *int64 `json:"pending,omitempty"`

	// Queued The number of queued runs.
	Queued *int64 `json:"queued,omitempty"`

	// Running The number of running runs.
	Running *int64 `json:"running,omitempty"`

	// Succeeded The number of succeeded runs.
	Succeeded *int64 `json:"succeeded,omitempty"`
}

// Events defines model for Events.
type Events struct {
	// Events The events.
	Events   []Event         `json:"events"`
	Metadata APIResourceMeta `json:"metadata"`
}

// Job defines model for Job.
type Job struct {
	// Description The description of the job.
	Description *string         `json:"description,omitempty"`
	Metadata    APIResourceMeta `json:"metadata"`
	Name        string          `json:"name"`
	Steps       []Step          `json:"steps"`
	TenantId    string          `json:"tenantId"`

	// Timeout The timeout of the job.
	Timeout   *string `json:"timeout,omitempty"`
	VersionId string  `json:"versionId"`
}

// JobRun defines model for JobRun.
type JobRun struct {
	CancelledAt     *time.Time              `json:"cancelledAt,omitempty"`
	CancelledError  *string                 `json:"cancelledError,omitempty"`
	CancelledReason *string                 `json:"cancelledReason,omitempty"`
	FinishedAt      *time.Time              `json:"finishedAt,omitempty"`
	Job             *Job                    `json:"job,omitempty"`
	JobId           string                  `json:"jobId"`
	Metadata        APIResourceMeta         `json:"metadata"`
	Result          *map[string]interface{} `json:"result,omitempty"`
	StartedAt       *time.Time              `json:"startedAt,omitempty"`
	Status          JobRunStatus            `json:"status"`
	StepRuns        *[]StepRun              `json:"stepRuns,omitempty"`
	TenantId        string                  `json:"tenantId"`
	TickerId        *string                 `json:"tickerId,omitempty"`
	TimeoutAt       *time.Time              `json:"timeoutAt,omitempty"`
	WorkflowRun     *WorkflowRun            `json:"workflowRun,omitempty"`
	WorkflowRunId   string                  `json:"workflowRunId"`
}

// JobRunStatus defines model for JobRunStatus.
type JobRunStatus string

// ListAPIMetaIntegration defines model for ListAPIMetaIntegration.
type ListAPIMetaIntegration = []APIMetaIntegration

// ListAPITokensResponse defines model for ListAPITokensResponse.
type ListAPITokensResponse struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]APIToken         `json:"rows,omitempty"`
}

// ListSNSIntegrations defines model for ListSNSIntegrations.
type ListSNSIntegrations struct {
	Pagination PaginationResponse `json:"pagination"`
	Rows       []SNSIntegration   `json:"rows"`
}

// ListSlackWebhooks defines model for ListSlackWebhooks.
type ListSlackWebhooks struct {
	Pagination PaginationResponse `json:"pagination"`
	Rows       []SlackWebhook     `json:"rows"`
}

// LogLine defines model for LogLine.
type LogLine struct {
	// CreatedAt The creation date of the log line.
	CreatedAt time.Time `json:"createdAt"`

	// Message The log message.
	Message string `json:"message"`

	// Metadata The log metadata.
	Metadata map[string]interface{} `json:"metadata"`
}

// LogLineLevel defines model for LogLineLevel.
type LogLineLevel string

// LogLineLevelField defines model for LogLineLevelField.
type LogLineLevelField = []LogLineLevel

// LogLineList defines model for LogLineList.
type LogLineList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]LogLine          `json:"rows,omitempty"`
}

// LogLineOrderByDirection defines model for LogLineOrderByDirection.
type LogLineOrderByDirection string

// LogLineOrderByField defines model for LogLineOrderByField.
type LogLineOrderByField string

// LogLineSearch defines model for LogLineSearch.
type LogLineSearch = string

// PaginationResponse defines model for PaginationResponse.
type PaginationResponse struct {
	// CurrentPage the current page
	CurrentPage *int64 `json:"current_page,omitempty"`

	// NextPage the next page
	NextPage *int64 `json:"next_page,omitempty"`

	// NumPages the total number of pages for listing
	NumPages *int64 `json:"num_pages,omitempty"`
}

// QueueMetrics defines model for QueueMetrics.
type QueueMetrics struct {
	// NumPending The number of items pending.
	NumPending int `json:"numPending"`

	// NumQueued The number of items in the queue.
	NumQueued int `json:"numQueued"`

	// NumRunning The number of items running.
	NumRunning int `json:"numRunning"`
}

// RateLimit defines model for RateLimit.
type RateLimit struct {
	// Key The key for the rate limit.
	Key string `json:"key"`

	// LastRefill The last time the rate limit was refilled.
	LastRefill time.Time `json:"lastRefill"`

	// LimitValue The maximum number of requests allowed within the window.
	LimitValue int `json:"limitValue"`

	// TenantId The ID of the tenant associated with this rate limit.
	TenantId string `json:"tenantId"`

	// Value The current number of requests made within the window.
	Value int `json:"value"`

	// Window The window of time in which the limitValue is enforced.
	Window string `json:"window"`
}

// RateLimitList defines model for RateLimitList.
type RateLimitList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]RateLimit        `json:"rows,omitempty"`
}

// RateLimitOrderByDirection defines model for RateLimitOrderByDirection.
type RateLimitOrderByDirection string

// RateLimitOrderByField defines model for RateLimitOrderByField.
type RateLimitOrderByField string

// RecentStepRuns defines model for RecentStepRuns.
type RecentStepRuns struct {
	// ActionId The action id.
	ActionId      string             `json:"actionId"`
	CancelledAt   *time.Time         `json:"cancelledAt,omitempty"`
	FinishedAt    *time.Time         `json:"finishedAt,omitempty"`
	Metadata      APIResourceMeta    `json:"metadata"`
	StartedAt     *time.Time         `json:"startedAt,omitempty"`
	Status        StepRunStatus      `json:"status"`
	WorkflowRunId openapi_types.UUID `json:"workflowRunId"`
}

// RejectInviteRequest defines model for RejectInviteRequest.
type RejectInviteRequest struct {
	Invite string `json:"invite" validate:"required,uuid"`
}

// ReplayEventRequest defines model for ReplayEventRequest.
type ReplayEventRequest struct {
	EventIds []openapi_types.UUID `json:"eventIds"`
}

// ReplayWorkflowRunsRequest defines model for ReplayWorkflowRunsRequest.
type ReplayWorkflowRunsRequest struct {
	WorkflowRunIds []openapi_types.UUID `json:"workflowRunIds"`
}

// ReplayWorkflowRunsResponse defines model for ReplayWorkflowRunsResponse.
type ReplayWorkflowRunsResponse struct {
	WorkflowRuns []WorkflowRun `json:"workflowRuns"`
}

// RerunStepRunRequest defines model for RerunStepRunRequest.
type RerunStepRunRequest struct {
	Input map[string]interface{} `json:"input"`
}

// SNSIntegration defines model for SNSIntegration.
type SNSIntegration struct {
	// IngestUrl The URL to send SNS messages to.
	IngestUrl *string         `json:"ingestUrl,omitempty"`
	Metadata  APIResourceMeta `json:"metadata"`

	// TenantId The unique identifier for the tenant that the SNS integration belongs to.
	TenantId openapi_types.UUID `json:"tenantId"`

	// TopicArn The Amazon Resource Name (ARN) of the SNS topic.
	TopicArn string `json:"topicArn"`
}

// ScheduleWorkflowRunRequest defines model for ScheduleWorkflowRunRequest.
type ScheduleWorkflowRunRequest struct {
	AdditionalMetadata map[string]interface{} `json:"additionalMetadata"`
	Input              map[string]interface{} `json:"input"`
	Priority           *int32                 `json:"priority,omitempty"`
	TriggerAt          time.Time              `json:"triggerAt"`
}

// ScheduledRunStatus defines model for ScheduledRunStatus.
type ScheduledRunStatus string

// ScheduledWorkflows defines model for ScheduledWorkflows.
type ScheduledWorkflows struct {
	AdditionalMetadata   *map[string]interface{}  `json:"additionalMetadata,omitempty"`
	Input                *map[string]interface{}  `json:"input,omitempty"`
	Metadata             APIResourceMeta          `json:"metadata"`
	Method               ScheduledWorkflowsMethod `json:"method"`
	Priority             *int32                   `json:"priority,omitempty"`
	TenantId             string                   `json:"tenantId"`
	TriggerAt            time.Time                `json:"triggerAt"`
	WorkflowId           string                   `json:"workflowId"`
	WorkflowName         string                   `json:"workflowName"`
	WorkflowRunCreatedAt *time.Time               `json:"workflowRunCreatedAt,omitempty"`
	WorkflowRunId        *openapi_types.UUID      `json:"workflowRunId,omitempty"`
	WorkflowRunName      *string                  `json:"workflowRunName,omitempty"`
	WorkflowRunStatus    *WorkflowRunStatus       `json:"workflowRunStatus,omitempty"`
	WorkflowVersionId    string                   `json:"workflowVersionId"`
}

// ScheduledWorkflowsList defines model for ScheduledWorkflowsList.
type ScheduledWorkflowsList struct {
	Pagination *PaginationResponse   `json:"pagination,omitempty"`
	Rows       *[]ScheduledWorkflows `json:"rows,omitempty"`
}

// ScheduledWorkflowsMethod defines model for ScheduledWorkflowsMethod.
type ScheduledWorkflowsMethod string

// ScheduledWorkflowsOrderByField defines model for ScheduledWorkflowsOrderByField.
type ScheduledWorkflowsOrderByField string

// SemaphoreSlots defines model for SemaphoreSlots.
type SemaphoreSlots struct {
	// ActionId The action id.
	ActionId string `json:"actionId"`

	// StartedAt The time this slot was started.
	StartedAt *time.Time    `json:"startedAt,omitempty"`
	Status    StepRunStatus `json:"status"`

	// StepRunId The step run id.
	StepRunId openapi_types.UUID `json:"stepRunId"`

	// TimeoutAt The time this slot will timeout.
	TimeoutAt *time.Time `json:"timeoutAt,omitempty"`

	// WorkflowRunId The workflow run id.
	WorkflowRunId openapi_types.UUID `json:"workflowRunId"`
}

// SlackWebhook defines model for SlackWebhook.
type SlackWebhook struct {
	// ChannelId The channel id associated with this slack webhook.
	ChannelId string `json:"channelId"`

	// ChannelName The channel name associated with this slack webhook.
	ChannelName string          `json:"channelName"`
	Metadata    APIResourceMeta `json:"metadata"`

	// TeamId The team id associated with this slack webhook.
	TeamId string `json:"teamId"`

	// TeamName The team name associated with this slack webhook.
	TeamName string `json:"teamName"`

	// TenantId The unique identifier for the tenant that the SNS integration belongs to.
	TenantId openapi_types.UUID `json:"tenantId"`
}

// Step defines model for Step.
type Step struct {
	Action   string          `json:"action"`
	Children *[]string       `json:"children,omitempty"`
	JobId    string          `json:"jobId"`
	Metadata APIResourceMeta `json:"metadata"`
	Parents  *[]string       `json:"parents,omitempty"`

	// ReadableId The readable id of the step.
	ReadableId string `json:"readableId"`
	TenantId   string `json:"tenantId"`

	// Timeout The timeout of the step.
	Timeout *string `json:"timeout,omitempty"`
}

// StepRun defines model for StepRun.
type StepRun struct {
	CancelledAt         *time.Time              `json:"cancelledAt,omitempty"`
	CancelledAtEpoch    *int                    `json:"cancelledAtEpoch,omitempty"`
	CancelledError      *string                 `json:"cancelledError,omitempty"`
	CancelledReason     *string                 `json:"cancelledReason,omitempty"`
	ChildWorkflowRuns   *[]string               `json:"childWorkflowRuns,omitempty"`
	ChildWorkflowsCount *int                    `json:"childWorkflowsCount,omitempty"`
	Error               *string                 `json:"error,omitempty"`
	FinishedAt          *time.Time              `json:"finishedAt,omitempty"`
	FinishedAtEpoch     *int                    `json:"finishedAtEpoch,omitempty"`
	Input               *string                 `json:"input,omitempty"`
	JobRun              *JobRun                 `json:"jobRun,omitempty"`
	JobRunId            string                  `json:"jobRunId"`
	Metadata            APIResourceMeta         `json:"metadata"`
	Output              *string                 `json:"output,omitempty"`
	Parents             *[]string               `json:"parents,omitempty"`
	RequeueAfter        *time.Time              `json:"requeueAfter,omitempty"`
	Result              *map[string]interface{} `json:"result,omitempty"`
	StartedAt           *time.Time              `json:"startedAt,omitempty"`
	StartedAtEpoch      *int                    `json:"startedAtEpoch,omitempty"`
	Status              StepRunStatus           `json:"status"`
	Step                *Step                   `json:"step,omitempty"`
	StepId              string                  `json:"stepId"`
	TenantId            string                  `json:"tenantId"`
	TimeoutAt           *time.Time              `json:"timeoutAt,omitempty"`
	TimeoutAtEpoch      *int                    `json:"timeoutAtEpoch,omitempty"`
	WorkerId            *string                 `json:"workerId,omitempty"`
}

// StepRunArchive defines model for StepRunArchive.
type StepRunArchive struct {
	CancelledAt      *time.Time `json:"cancelledAt,omitempty"`
	CancelledAtEpoch *int       `json:"cancelledAtEpoch,omitempty"`
	CancelledError   *string    `json:"cancelledError,omitempty"`
	CancelledReason  *string    `json:"cancelledReason,omitempty"`
	CreatedAt        time.Time  `json:"createdAt"`
	Error            *string    `json:"error,omitempty"`
	FinishedAt       *time.Time `json:"finishedAt,omitempty"`
	FinishedAtEpoch  *int       `json:"finishedAtEpoch,omitempty"`
	Input            *string    `json:"input,omitempty"`
	Order            int        `json:"order"`
	Output           *string    `json:"output,omitempty"`
	RetryCount       int        `json:"retryCount"`
	StartedAt        *time.Time `json:"startedAt,omitempty"`
	StartedAtEpoch   *int       `json:"startedAtEpoch,omitempty"`
	StepRunId        string     `json:"stepRunId"`
	TimeoutAt        *time.Time `json:"timeoutAt,omitempty"`
	TimeoutAtEpoch   *int       `json:"timeoutAtEpoch,omitempty"`
}

// StepRunArchiveList defines model for StepRunArchiveList.
type StepRunArchiveList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]StepRunArchive   `json:"rows,omitempty"`
}

// StepRunEvent defines model for StepRunEvent.
type StepRunEvent struct {
	Count         int                     `json:"count"`
	Data          *map[string]interface{} `json:"data,omitempty"`
	Id            int                     `json:"id"`
	Message       string                  `json:"message"`
	Reason        StepRunEventReason      `json:"reason"`
	Severity      StepRunEventSeverity    `json:"severity"`
	StepRunId     *string                 `json:"stepRunId,omitempty"`
	TimeFirstSeen time.Time               `json:"timeFirstSeen"`
	TimeLastSeen  time.Time               `json:"timeLastSeen"`
	WorkflowRunId *string                 `json:"workflowRunId,omitempty"`
}

// StepRunEventList defines model for StepRunEventList.
type StepRunEventList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]StepRunEvent     `json:"rows,omitempty"`
}

// StepRunEventReason defines model for StepRunEventReason.
type StepRunEventReason string

// StepRunEventSeverity defines model for StepRunEventSeverity.
type StepRunEventSeverity string

// StepRunStatus defines model for StepRunStatus.
type StepRunStatus string

// Tenant defines model for Tenant.
type Tenant struct {
	// AlertMemberEmails Whether to alert tenant members.
	AlertMemberEmails *bool `json:"alertMemberEmails,omitempty"`

	// AnalyticsOptOut Whether the tenant has opted out of analytics.
	AnalyticsOptOut *bool           `json:"analyticsOptOut,omitempty"`
	Metadata        APIResourceMeta `json:"metadata"`

	// Name The name of the tenant.
	Name string `json:"name"`

	// Slug The slug of the tenant.
	Slug      string           `json:"slug"`
	UiVersion *TenantUIVersion `json:"uiVersion,omitempty"`
	Version   TenantVersion    `json:"version"`
}

// TenantAlertEmailGroup defines model for TenantAlertEmailGroup.
type TenantAlertEmailGroup struct {
	// Emails A list of emails for users
	Emails   []string        `json:"emails"`
	Metadata APIResourceMeta `json:"metadata"`
}

// TenantAlertEmailGroupList defines model for TenantAlertEmailGroupList.
type TenantAlertEmailGroupList struct {
	Pagination *PaginationResponse      `json:"pagination,omitempty"`
	Rows       *[]TenantAlertEmailGroup `json:"rows,omitempty"`
}

// TenantAlertingSettings defines model for TenantAlertingSettings.
type TenantAlertingSettings struct {
	// AlertMemberEmails Whether to alert tenant members.
	AlertMemberEmails *bool `json:"alertMemberEmails,omitempty"`

	// EnableExpiringTokenAlerts Whether to enable alerts when tokens are approaching expiration.
	EnableExpiringTokenAlerts *bool `json:"enableExpiringTokenAlerts,omitempty"`

	// EnableTenantResourceLimitAlerts Whether to enable alerts when tenant resources are approaching limits.
	EnableTenantResourceLimitAlerts *bool `json:"enableTenantResourceLimitAlerts,omitempty"`

	// EnableWorkflowRunFailureAlerts Whether to send alerts when workflow runs fail.
	EnableWorkflowRunFailureAlerts *bool `json:"enableWorkflowRunFailureAlerts,omitempty"`

	// LastAlertedAt The last time an alert was sent.
	LastAlertedAt *time.Time `json:"lastAlertedAt,omitempty"`

	// MaxAlertingFrequency The max frequency at which to alert.
	MaxAlertingFrequency string          `json:"maxAlertingFrequency"`
	Metadata             APIResourceMeta `json:"metadata"`
}

// TenantInvite defines model for TenantInvite.
type TenantInvite struct {
	// Email The email of the user to invite.
	Email string `json:"email"`

	// Expires The time that this invite expires.
	Expires  time.Time        `json:"expires"`
	Metadata APIResourceMeta  `json:"metadata"`
	Role     TenantMemberRole `json:"role"`

	// TenantId The tenant id associated with this tenant invite.
	TenantId string `json:"tenantId"`

	// TenantName The tenant name for the tenant.
	TenantName *string `json:"tenantName,omitempty"`
}

// TenantInviteList defines model for TenantInviteList.
type TenantInviteList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]TenantInvite     `json:"rows,omitempty"`
}

// TenantMember defines model for TenantMember.
type TenantMember struct {
	Metadata APIResourceMeta  `json:"metadata"`
	Role     TenantMemberRole `json:"role"`
	Tenant   *Tenant          `json:"tenant,omitempty"`
	User     UserTenantPublic `json:"user"`
}

// TenantMemberList defines model for TenantMemberList.
type TenantMemberList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]TenantMember     `json:"rows,omitempty"`
}

// TenantMemberRole defines model for TenantMemberRole.
type TenantMemberRole string

// TenantQueueMetrics defines model for TenantQueueMetrics.
type TenantQueueMetrics struct {
	Queues   *map[string]int          `json:"queues,omitempty"`
	Total    *QueueMetrics            `json:"total,omitempty"`
	Workflow *map[string]QueueMetrics `json:"workflow,omitempty"`
}

// TenantResource defines model for TenantResource.
type TenantResource string

// TenantResourceLimit defines model for TenantResourceLimit.
type TenantResourceLimit struct {
	// AlarmValue The alarm value associated with this limit to warn of approaching limit value.
	AlarmValue *int `json:"alarmValue,omitempty"`

	// LastRefill The last time the limit was refilled.
	LastRefill *time.Time `json:"lastRefill,omitempty"`

	// LimitValue The limit associated with this limit.
	LimitValue int             `json:"limitValue"`
	Metadata   APIResourceMeta `json:"metadata"`
	Resource   TenantResource  `json:"resource"`

	// Value The current value associated with this limit.
	Value int `json:"value"`

	// Window The meter window for the limit. (i.e. 1 day, 1 week, 1 month)
	Window *string `json:"window,omitempty"`
}

// TenantResourcePolicy defines model for TenantResourcePolicy.
type TenantResourcePolicy struct {
	// Limits A list of resource limits for the tenant.
	Limits []TenantResourceLimit `json:"limits"`
}

// TenantStepRunQueueMetrics defines model for TenantStepRunQueueMetrics.
type TenantStepRunQueueMetrics struct {
	Queues *map[string]interface{} `json:"queues,omitempty"`
}

// TenantUIVersion defines model for TenantUIVersion.
type TenantUIVersion string

// TenantVersion defines model for TenantVersion.
type TenantVersion string

// TriggerWorkflowRunRequest defines model for TriggerWorkflowRunRequest.
type TriggerWorkflowRunRequest struct {
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`
	Input              map[string]interface{}  `json:"input"`
}

// UpdateTenantAlertEmailGroupRequest defines model for UpdateTenantAlertEmailGroupRequest.
type UpdateTenantAlertEmailGroupRequest struct {
	// Emails A list of emails for users
	Emails []string `json:"emails" validate:"required,dive,email"`
}

// UpdateTenantInviteRequest defines model for UpdateTenantInviteRequest.
type UpdateTenantInviteRequest struct {
	Role TenantMemberRole `json:"role"`
}

// UpdateTenantRequest defines model for UpdateTenantRequest.
type UpdateTenantRequest struct {
	// AlertMemberEmails Whether to alert tenant members.
	AlertMemberEmails *bool `json:"alertMemberEmails,omitempty"`

	// AnalyticsOptOut Whether the tenant has opted out of analytics.
	AnalyticsOptOut *bool `json:"analyticsOptOut,omitempty"`

	// EnableExpiringTokenAlerts Whether to enable alerts when tokens are approaching expiration.
	EnableExpiringTokenAlerts *bool `json:"enableExpiringTokenAlerts,omitempty"`

	// EnableTenantResourceLimitAlerts Whether to enable alerts when tenant resources are approaching limits.
	EnableTenantResourceLimitAlerts *bool `json:"enableTenantResourceLimitAlerts,omitempty"`

	// EnableWorkflowRunFailureAlerts Whether to send alerts when workflow runs fail.
	EnableWorkflowRunFailureAlerts *bool `json:"enableWorkflowRunFailureAlerts,omitempty"`

	// MaxAlertingFrequency The max frequency at which to alert.
	MaxAlertingFrequency *string `json:"maxAlertingFrequency,omitempty" validate:"omitnil,duration"`

	// Name The name of the tenant.
	Name      *string          `json:"name,omitempty"`
	UiVersion *TenantUIVersion `json:"uiVersion,omitempty"`
	Version   *TenantVersion   `json:"version,omitempty"`
}

// UpdateWorkerRequest defines model for UpdateWorkerRequest.
type UpdateWorkerRequest struct {
	// IsPaused Whether the worker is paused and cannot accept new runs.
	IsPaused *bool `json:"isPaused,omitempty"`
}

// User defines model for User.
type User struct {
	// Email The email address of the user.
	Email openapi_types.Email `json:"email"`

	// EmailHash A hash of the user's email address for use with Pylon Support Chat
	EmailHash *string `json:"emailHash,omitempty"`

	// EmailVerified Whether the user has verified their email address.
	EmailVerified bool `json:"emailVerified"`

	// HasPassword Whether the user has a password set.
	HasPassword *bool           `json:"hasPassword,omitempty"`
	Metadata    APIResourceMeta `json:"metadata"`

	// Name The display name of the user.
	Name *string `json:"name,omitempty"`
}

// UserChangePasswordRequest defines model for UserChangePasswordRequest.
type UserChangePasswordRequest struct {
	// NewPassword The new password for the user.
	NewPassword string `json:"newPassword" validate:"required,password"`

	// Password The password of the user.
	Password string `json:"password" validate:"required,password"`
}

// UserLoginRequest defines model for UserLoginRequest.
type UserLoginRequest struct {
	// Email The email address of the user.
	Email openapi_types.Email `json:"email" validate:"required,email"`

	// Password The password of the user.
	Password string `json:"password" validate:"required,password"`
}

// UserRegisterRequest defines model for UserRegisterRequest.
type UserRegisterRequest struct {
	// Email The email address of the user.
	Email openapi_types.Email `json:"email" validate:"required,email"`

	// Name The name of the user.
	Name string `json:"name"`

	// Password The password of the user.
	Password string `json:"password" validate:"required,password"`
}

// UserTenantMembershipsList defines model for UserTenantMembershipsList.
type UserTenantMembershipsList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]TenantMember     `json:"rows,omitempty"`
}

// UserTenantPublic defines model for UserTenantPublic.
type UserTenantPublic struct {
	// Email The email address of the user.
	Email openapi_types.Email `json:"email"`

	// Name The display name of the user.
	Name *string `json:"name,omitempty"`
}

// V1CancelTaskRequest defines model for V1CancelTaskRequest.
type V1CancelTaskRequest struct {
	// ExternalIds A list of external IDs, which can refer to either task or workflow run external IDs
	ExternalIds *[]openapi_types.UUID `json:"externalIds,omitempty"`
	Filter      *V1TaskFilter         `json:"filter,omitempty"`
}

// V1CreateFilterRequest defines model for V1CreateFilterRequest.
type V1CreateFilterRequest struct {
	// Expression The expression for the filter
	Expression string `json:"expression"`

	// Payload The payload for the filter
	Payload *map[string]interface{} `json:"payload,omitempty"`

	// Scope The scope associated with this filter. Used for subsetting candidate filters at evaluation time
	Scope string `json:"scope"`

	// WorkflowId The workflow id
	WorkflowId openapi_types.UUID `json:"workflowId"`
}

// V1DagChildren defines model for V1DagChildren.
type V1DagChildren struct {
	Children *[]V1TaskSummary    `json:"children,omitempty"`
	DagId    *openapi_types.UUID `json:"dagId,omitempty"`
}

// V1Event defines model for V1Event.
type V1Event struct {
	// AdditionalMetadata Additional metadata for the event.
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`

	// Key The key for the event.
	Key      string          `json:"key"`
	Metadata APIResourceMeta `json:"metadata"`
	Tenant   *Tenant         `json:"tenant,omitempty"`

	// TenantId The ID of the tenant associated with this event.
	TenantId           string                    `json:"tenantId"`
	WorkflowRunSummary V1EventWorkflowRunSummary `json:"workflowRunSummary"`
}

// V1EventList defines model for V1EventList.
type V1EventList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]V1Event          `json:"rows,omitempty"`
}

// V1EventWorkflowRunSummary defines model for V1EventWorkflowRunSummary.
type V1EventWorkflowRunSummary struct {
	// Cancelled The number of cancelled runs.
	Cancelled int64 `json:"cancelled"`

	// Failed The number of failed runs.
	Failed int64 `json:"failed"`

	// Queued The number of queued runs.
	Queued int64 `json:"queued"`

	// Running The number of running runs.
	Running int64 `json:"running"`

	// Succeeded The number of succeeded runs.
	Succeeded int64 `json:"succeeded"`
}

// V1Filter defines model for V1Filter.
type V1Filter struct {
	// Expression The expression associated with this filter.
	Expression string          `json:"expression"`
	Metadata   APIResourceMeta `json:"metadata"`

	// Payload Additional payload data associated with the filter
	Payload map[string]interface{} `json:"payload"`

	// Scope The scope associated with this filter. Used for subsetting candidate filters at evaluation time
	Scope string `json:"scope"`

	// TenantId The ID of the tenant associated with this filter.
	TenantId string `json:"tenantId"`

	// WorkflowId The workflow id associated with this filter.
	WorkflowId openapi_types.UUID `json:"workflowId"`
}

// V1FilterList defines model for V1FilterList.
type V1FilterList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]V1Filter         `json:"rows,omitempty"`
}

// V1LogLine defines model for V1LogLine.
type V1LogLine struct {
	// Attempt The attempt number of the log line.
	Attempt *int `json:"attempt,omitempty"`

	// CreatedAt The creation date of the log line.
	CreatedAt time.Time       `json:"createdAt"`
	Level     *V1LogLineLevel `json:"level,omitempty"`

	// Message The log message.
	Message string `json:"message"`

	// Metadata The log metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// RetryCount The retry count of the log line.
	RetryCount *int `json:"retryCount,omitempty"`
}

// V1LogLineLevel defines model for V1LogLineLevel.
type V1LogLineLevel string

// V1LogLineList defines model for V1LogLineList.
type V1LogLineList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]V1LogLine        `json:"rows,omitempty"`
}

// V1ReplayTaskRequest defines model for V1ReplayTaskRequest.
type V1ReplayTaskRequest struct {
	// ExternalIds A list of external IDs, which can refer to either task or workflow run external IDs
	ExternalIds *[]openapi_types.UUID `json:"externalIds,omitempty"`
	Filter      *V1TaskFilter         `json:"filter,omitempty"`
}

// V1TaskEvent defines model for V1TaskEvent.
type V1TaskEvent struct {
	// Attempt The attempt number of the task.
	Attempt      *int            `json:"attempt,omitempty"`
	ErrorMessage *string         `json:"errorMessage,omitempty"`
	EventType    V1TaskEventType `json:"eventType"`
	Id           int             `json:"id"`
	Message      string          `json:"message"`
	Output       *string         `json:"output,omitempty"`

	// RetryCount The number of retries of the task.
	RetryCount      *int                `json:"retryCount,omitempty"`
	TaskDisplayName *string             `json:"taskDisplayName,omitempty"`
	TaskId          openapi_types.UUID  `json:"taskId"`
	Timestamp       time.Time           `json:"timestamp"`
	WorkerId        *openapi_types.UUID `json:"workerId,omitempty"`
}

// V1TaskEventList defines model for V1TaskEventList.
type V1TaskEventList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]V1TaskEvent      `json:"rows,omitempty"`
}

// V1TaskEventType defines model for V1TaskEventType.
type V1TaskEventType string

// V1TaskFilter defines model for V1TaskFilter.
type V1TaskFilter struct {
	AdditionalMetadata *[]string             `json:"additionalMetadata,omitempty"`
	Since              time.Time             `json:"since"`
	Statuses           *[]V1TaskStatus       `json:"statuses,omitempty"`
	Until              *time.Time            `json:"until,omitempty"`
	WorkflowIds        *[]openapi_types.UUID `json:"workflowIds,omitempty"`
}

// V1TaskPointMetric defines model for V1TaskPointMetric.
type V1TaskPointMetric struct {
	FAILED    int       `json:"FAILED"`
	SUCCEEDED int       `json:"SUCCEEDED"`
	Time      time.Time `json:"time"`
}

// V1TaskPointMetrics defines model for V1TaskPointMetrics.
type V1TaskPointMetrics struct {
	Results *[]V1TaskPointMetric `json:"results,omitempty"`
}

// V1TaskRunMetric defines model for V1TaskRunMetric.
type V1TaskRunMetric struct {
	Count  int          `json:"count"`
	Status V1TaskStatus `json:"status"`
}

// V1TaskRunMetrics defines model for V1TaskRunMetrics.
type V1TaskRunMetrics = []V1TaskRunMetric

// V1TaskStatus defines model for V1TaskStatus.
type V1TaskStatus string

// V1TaskSummary defines model for V1TaskSummary.
type V1TaskSummary struct {
	// ActionId The action ID of the task.
	ActionId *string `json:"actionId,omitempty"`

	// AdditionalMetadata Additional metadata for the task run.
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`

	// Attempt The attempt number of the task.
	Attempt *int `json:"attempt,omitempty"`

	// Children The list of children tasks
	Children *[]V1TaskSummary `json:"children,omitempty"`

	// CreatedAt The timestamp the task was created.
	CreatedAt time.Time `json:"createdAt"`

	// DisplayName The display name of the task run.
	DisplayName string `json:"displayName"`

	// Duration The duration of the task run, in milliseconds.
	Duration *int `json:"duration,omitempty"`

	// ErrorMessage The error message of the task run (for the latest run)
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// FinishedAt The timestamp the task run finished.
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	// Input The input of the task run.
	Input    openapi.NonNullableJSON `json:"input"`
	Metadata APIResourceMeta         `json:"metadata"`

	// NumSpawnedChildren The number of spawned children tasks
	NumSpawnedChildren int `json:"numSpawnedChildren"`

	// Output The output of the task run (for the latest run)
	Output openapi.NonNullableJSON `json:"output"`

	// RetryCount The number of retries of the task.
	RetryCount *int `json:"retryCount,omitempty"`

	// StartedAt The timestamp the task run started.
	StartedAt *time.Time   `json:"startedAt,omitempty"`
	Status    V1TaskStatus `json:"status"`

	// StepId The step ID of the task.
	StepId *openapi_types.UUID `json:"stepId,omitempty"`

	// TaskExternalId The external ID of the task.
	TaskExternalId openapi_types.UUID `json:"taskExternalId"`

	// TaskId The ID of the task.
	TaskId int `json:"taskId"`

	// TaskInsertedAt The timestamp the task was inserted.
	TaskInsertedAt time.Time `json:"taskInsertedAt"`

	// TenantId The ID of the tenant.
	TenantId     openapi_types.UUID `json:"tenantId"`
	Type         V1WorkflowType     `json:"type"`
	WorkflowId   openapi_types.UUID `json:"workflowId"`
	WorkflowName *string            `json:"workflowName,omitempty"`

	// WorkflowRunExternalId The external ID of the workflow run
	WorkflowRunExternalId openapi_types.UUID `json:"workflowRunExternalId"`

	// WorkflowVersionId The version ID of the workflow
	WorkflowVersionId *openapi_types.UUID `json:"workflowVersionId,omitempty"`
}

// V1TaskSummaryList defines model for V1TaskSummaryList.
type V1TaskSummaryList struct {
	Pagination PaginationResponse `json:"pagination"`

	// Rows The list of tasks
	Rows []V1TaskSummary `json:"rows"`
}

// V1TaskTiming defines model for V1TaskTiming.
type V1TaskTiming struct {
	// Attempt The attempt number of the task.
	Attempt *int `json:"attempt,omitempty"`

	// Depth The depth of the task in the waterfall.
	Depth int `json:"depth"`

	// FinishedAt The timestamp the task run finished.
	FinishedAt *time.Time      `json:"finishedAt,omitempty"`
	Metadata   APIResourceMeta `json:"metadata"`

	// ParentTaskExternalId The external ID of the parent task.
	ParentTaskExternalId *openapi_types.UUID `json:"parentTaskExternalId,omitempty"`

	// QueuedAt The timestamp the task run was queued.
	QueuedAt *time.Time `json:"queuedAt,omitempty"`

	// RetryCount The number of retries of the task.
	RetryCount *int `json:"retryCount,omitempty"`

	// StartedAt The timestamp the task run started.
	StartedAt *time.Time   `json:"startedAt,omitempty"`
	Status    V1TaskStatus `json:"status"`

	// TaskDisplayName The display name of the task run.
	TaskDisplayName string `json:"taskDisplayName"`

	// TaskExternalId The external ID of the task.
	TaskExternalId openapi_types.UUID `json:"taskExternalId"`

	// TaskId The ID of the task.
	TaskId int `json:"taskId"`

	// TaskInsertedAt The timestamp the task was inserted.
	TaskInsertedAt time.Time `json:"taskInsertedAt"`

	// TenantId The ID of the tenant.
	TenantId openapi_types.UUID `json:"tenantId"`

	// WorkflowRunId The external ID of the workflow run.
	WorkflowRunId *openapi_types.UUID `json:"workflowRunId,omitempty"`
}

// V1TaskTimingList defines model for V1TaskTimingList.
type V1TaskTimingList struct {
	Pagination PaginationResponse `json:"pagination"`

	// Rows The list of task timings
	Rows []V1TaskTiming `json:"rows"`
}

// V1TriggerWorkflowRunRequest defines model for V1TriggerWorkflowRunRequest.
type V1TriggerWorkflowRunRequest struct {
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`
	Input              map[string]interface{}  `json:"input"`

	// Priority The priority of the workflow run.
	Priority *int `json:"priority,omitempty"`

	// WorkflowName The name of the workflow.
	WorkflowName string `json:"workflowName"`
}

// V1UpdateFilterRequest defines model for V1UpdateFilterRequest.
type V1UpdateFilterRequest struct {
	// Expression The expression for the filter
	Expression *string `json:"expression,omitempty"`

	// Payload The payload for the filter
	Payload *map[string]interface{} `json:"payload,omitempty"`

	// Scope The scope associated with this filter. Used for subsetting candidate filters at evaluation time
	Scope *string `json:"scope,omitempty"`
}

// V1WorkflowRun defines model for V1WorkflowRun.
type V1WorkflowRun struct {
	// AdditionalMetadata Additional metadata for the task run.
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`

	// CreatedAt The timestamp the task run was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DisplayName The display name of the task run.
	DisplayName string `json:"displayName"`

	// Duration The duration of the task run, in milliseconds.
	Duration *int `json:"duration,omitempty"`

	// ErrorMessage The error message of the task run (for the latest run)
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// FinishedAt The timestamp the task run finished.
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	// Input The input of the task run.
	Input    openapi.NonNullableJSON `json:"input"`
	Metadata APIResourceMeta         `json:"metadata"`

	// Output The output of the task run (for the latest run)
	Output               openapi.NonNullableJSON `json:"output"`
	ParentTaskExternalId *openapi_types.UUID     `json:"parentTaskExternalId,omitempty"`

	// StartedAt The timestamp the task run started.
	StartedAt *time.Time   `json:"startedAt,omitempty"`
	Status    V1TaskStatus `json:"status"`

	// TenantId The ID of the tenant.
	TenantId   openapi_types.UUID `json:"tenantId"`
	WorkflowId openapi_types.UUID `json:"workflowId"`

	// WorkflowVersionId The ID of the workflow version.
	WorkflowVersionId *openapi_types.UUID `json:"workflowVersionId,omitempty"`
}

// V1WorkflowRunDetails defines model for V1WorkflowRunDetails.
type V1WorkflowRunDetails struct {
	Run   V1WorkflowRun                         `json:"run"`
	Shape WorkflowRunShapeForWorkflowRunDetails `json:"shape"`

	// TaskEvents The list of task events for the workflow run
	TaskEvents []V1TaskEvent   `json:"taskEvents"`
	Tasks      []V1TaskSummary `json:"tasks"`
}

// V1WorkflowRunDisplayName defines model for V1WorkflowRunDisplayName.
type V1WorkflowRunDisplayName struct {
	DisplayName string          `json:"displayName"`
	Metadata    APIResourceMeta `json:"metadata"`
}

// V1WorkflowRunDisplayNameList defines model for V1WorkflowRunDisplayNameList.
type V1WorkflowRunDisplayNameList struct {
	Pagination PaginationResponse `json:"pagination"`

	// Rows The list of display names
	Rows []V1WorkflowRunDisplayName `json:"rows"`
}

// V1WorkflowType defines model for V1WorkflowType.
type V1WorkflowType string

// WebhookWorker defines model for WebhookWorker.
type WebhookWorker struct {
	Metadata APIResourceMeta `json:"metadata"`

	// Name The name of the webhook worker.
	Name string `json:"name"`

	// Url The webhook url.
	Url string `json:"url"`
}

// WebhookWorkerCreateRequest defines model for WebhookWorkerCreateRequest.
type WebhookWorkerCreateRequest struct {
	// Name The name of the webhook worker.
	Name string `json:"name"`

	// Secret The secret key for validation. If not provided, a random secret will be generated.
	Secret *string `json:"secret,omitempty"`

	// Url The webhook url.
	Url string `json:"url"`
}

// WebhookWorkerCreated defines model for WebhookWorkerCreated.
type WebhookWorkerCreated struct {
	Metadata APIResourceMeta `json:"metadata"`

	// Name The name of the webhook worker.
	Name string `json:"name"`

	// Secret The secret key for validation.
	Secret string `json:"secret"`

	// Url The webhook url.
	Url string `json:"url"`
}

// WebhookWorkerListResponse defines model for WebhookWorkerListResponse.
type WebhookWorkerListResponse struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]WebhookWorker    `json:"rows,omitempty"`
}

// WebhookWorkerRequest defines model for WebhookWorkerRequest.
type WebhookWorkerRequest struct {
	// CreatedAt The date and time the request was created.
	CreatedAt time.Time                  `json:"created_at"`
	Method    WebhookWorkerRequestMethod `json:"method"`

	// StatusCode The HTTP status code of the response.
	StatusCode int `json:"statusCode"`
}

// WebhookWorkerRequestListResponse defines model for WebhookWorkerRequestListResponse.
type WebhookWorkerRequestListResponse struct {
	// Requests The list of webhook requests.
	Requests *[]WebhookWorkerRequest `json:"requests,omitempty"`
}

// WebhookWorkerRequestMethod defines model for WebhookWorkerRequestMethod.
type WebhookWorkerRequestMethod = interface{}

// Worker defines model for Worker.
type Worker struct {
	// Actions The actions this worker can perform.
	Actions *[]string `json:"actions,omitempty"`

	// AvailableRuns The number of runs this worker can execute concurrently.
	AvailableRuns *int `json:"availableRuns,omitempty"`

	// DispatcherId the id of the assigned dispatcher, in UUID format
	DispatcherId *openapi_types.UUID `json:"dispatcherId,omitempty"`

	// Labels The current label state of the worker.
	Labels *[]WorkerLabel `json:"labels,omitempty"`

	// LastHeartbeatAt The time this worker last sent a heartbeat.
	LastHeartbeatAt *time.Time `json:"lastHeartbeatAt,omitempty"`

	// LastListenerEstablished The time this worker last sent a heartbeat.
	LastListenerEstablished *time.Time `json:"lastListenerEstablished,omitempty"`

	// MaxRuns The maximum number of runs this worker can execute concurrently.
	MaxRuns  *int            `json:"maxRuns,omitempty"`
	Metadata APIResourceMeta `json:"metadata"`

	// Name The name of the worker.
	Name string `json:"name"`

	// RecentStepRuns The recent step runs for the worker.
	RecentStepRuns *[]RecentStepRuns  `json:"recentStepRuns,omitempty"`
	RuntimeInfo    *WorkerRuntimeInfo `json:"runtimeInfo,omitempty"`

	// Slots The semaphore slot state for the worker.
	Slots *[]SemaphoreSlots `json:"slots,omitempty"`

	// Status The status of the worker.
	Status *WorkerStatus `json:"status,omitempty"`
	Type   WorkerType    `json:"type"`

	// WebhookId The webhook ID for the worker.
	WebhookId *openapi_types.UUID `json:"webhookId,omitempty"`

	// WebhookUrl The webhook URL for the worker.
	WebhookUrl *string `json:"webhookUrl,omitempty"`
}

// WorkerStatus The status of the worker.
type WorkerStatus string

// WorkerLabel defines model for WorkerLabel.
type WorkerLabel struct {
	// Key The key of the label.
	Key      string          `json:"key"`
	Metadata APIResourceMeta `json:"metadata"`

	// Value The value of the label.
	Value *string `json:"value,omitempty"`
}

// WorkerList defines model for WorkerList.
type WorkerList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]Worker           `json:"rows,omitempty"`
}

// WorkerRuntimeInfo defines model for WorkerRuntimeInfo.
type WorkerRuntimeInfo struct {
	Language        *WorkerRuntimeSDKs `json:"language,omitempty"`
	LanguageVersion *string            `json:"languageVersion,omitempty"`
	Os              *string            `json:"os,omitempty"`
	RuntimeExtra    *string            `json:"runtimeExtra,omitempty"`
	SdkVersion      *string            `json:"sdkVersion,omitempty"`
}

// WorkerRuntimeSDKs defines model for WorkerRuntimeSDKs.
type WorkerRuntimeSDKs string

// WorkerType defines model for WorkerType.
type WorkerType string

// Workflow defines model for Workflow.
type Workflow struct {
	// Description The description of the workflow.
	Description *string `json:"description,omitempty"`

	// IsPaused Whether the workflow is paused.
	IsPaused *bool `json:"isPaused,omitempty"`

	// Jobs The jobs of the workflow.
	Jobs     *[]Job          `json:"jobs,omitempty"`
	Metadata APIResourceMeta `json:"metadata"`

	// Name The name of the workflow.
	Name string `json:"name"`

	// Tags The tags of the workflow.
	Tags *[]WorkflowTag `json:"tags,omitempty"`

	// TenantId The tenant id of the workflow.
	TenantId string                 `json:"tenantId"`
	Versions *[]WorkflowVersionMeta `json:"versions,omitempty"`
}

// WorkflowConcurrency defines model for WorkflowConcurrency.
type WorkflowConcurrency struct {
	// GetConcurrencyGroup An action which gets the concurrency group for the WorkflowRun.
	GetConcurrencyGroup string                   `json:"getConcurrencyGroup"`
	LimitStrategy       ConcurrencyLimitStrategy `json:"limitStrategy"`

	// MaxRuns The maximum number of concurrent workflow runs.
	MaxRuns int32 `json:"maxRuns"`
}

// WorkflowID A workflow ID.
type WorkflowID = string

// WorkflowKind defines model for WorkflowKind.
type WorkflowKind string

// WorkflowKindList defines model for WorkflowKindList.
type WorkflowKindList = []WorkflowKind

// WorkflowList defines model for WorkflowList.
type WorkflowList struct {
	Metadata   *APIResourceMeta    `json:"metadata,omitempty"`
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]Workflow         `json:"rows,omitempty"`
}

// WorkflowMetrics defines model for WorkflowMetrics.
type WorkflowMetrics struct {
	// GroupKeyCount The total number of concurrency group keys.
	GroupKeyCount *int `json:"groupKeyCount,omitempty"`

	// GroupKeyRunsCount The number of runs for a specific group key (passed via filter)
	GroupKeyRunsCount *int `json:"groupKeyRunsCount,omitempty"`
}

// WorkflowRun defines model for WorkflowRun.
type WorkflowRun struct {
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`
	DisplayName        *string                 `json:"displayName,omitempty"`
	Duration           *int                    `json:"duration,omitempty"`
	Error              *string                 `json:"error,omitempty"`
	FinishedAt         *time.Time              `json:"finishedAt,omitempty"`
	Input              *map[string]interface{} `json:"input,omitempty"`
	JobRuns            *[]JobRun               `json:"jobRuns,omitempty"`
	Metadata           APIResourceMeta         `json:"metadata"`
	ParentId           *openapi_types.UUID     `json:"parentId,omitempty"`
	ParentStepRunId    *openapi_types.UUID     `json:"parentStepRunId,omitempty"`
	StartedAt          *time.Time              `json:"startedAt,omitempty"`
	Status             WorkflowRunStatus       `json:"status"`
	TenantId           string                  `json:"tenantId"`
	TriggeredBy        WorkflowRunTriggeredBy  `json:"triggeredBy"`
	WorkflowVersion    *WorkflowVersion        `json:"workflowVersion,omitempty"`
	WorkflowVersionId  string                  `json:"workflowVersionId"`
}

// WorkflowRunList defines model for WorkflowRunList.
type WorkflowRunList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]WorkflowRun      `json:"rows,omitempty"`
}

// WorkflowRunOrderByDirection defines model for WorkflowRunOrderByDirection.
type WorkflowRunOrderByDirection string

// WorkflowRunOrderByField defines model for WorkflowRunOrderByField.
type WorkflowRunOrderByField string

// WorkflowRunShape defines model for WorkflowRunShape.
type WorkflowRunShape struct {
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`
	DisplayName        *string                 `json:"displayName,omitempty"`
	Duration           *int                    `json:"duration,omitempty"`
	Error              *string                 `json:"error,omitempty"`
	FinishedAt         *time.Time              `json:"finishedAt,omitempty"`
	Input              *map[string]interface{} `json:"input,omitempty"`
	JobRuns            *[]JobRun               `json:"jobRuns,omitempty"`
	Metadata           APIResourceMeta         `json:"metadata"`
	ParentId           *openapi_types.UUID     `json:"parentId,omitempty"`
	ParentStepRunId    *openapi_types.UUID     `json:"parentStepRunId,omitempty"`
	StartedAt          *time.Time              `json:"startedAt,omitempty"`
	Status             WorkflowRunStatus       `json:"status"`
	TenantId           string                  `json:"tenantId"`
	TriggeredBy        WorkflowRunTriggeredBy  `json:"triggeredBy"`
	WorkflowId         *string                 `json:"workflowId,omitempty"`
	WorkflowVersion    *WorkflowVersion        `json:"workflowVersion,omitempty"`
	WorkflowVersionId  string                  `json:"workflowVersionId"`
}

// WorkflowRunShapeForWorkflowRunDetails defines model for WorkflowRunShapeForWorkflowRunDetails.
type WorkflowRunShapeForWorkflowRunDetails = []WorkflowRunShapeItemForWorkflowRunDetails

// WorkflowRunShapeItemForWorkflowRunDetails defines model for WorkflowRunShapeItemForWorkflowRunDetails.
type WorkflowRunShapeItemForWorkflowRunDetails struct {
	ChildrenStepIds []openapi_types.UUID `json:"childrenStepIds"`
	StepId          openapi_types.UUID   `json:"stepId"`
	TaskExternalId  openapi_types.UUID   `json:"taskExternalId"`
	TaskName        string               `json:"taskName"`
}

// WorkflowRunStatus defines model for WorkflowRunStatus.
type WorkflowRunStatus string

// WorkflowRunStatusList defines model for WorkflowRunStatusList.
type WorkflowRunStatusList = []WorkflowRunStatus

// WorkflowRunTriggeredBy defines model for WorkflowRunTriggeredBy.
type WorkflowRunTriggeredBy struct {
	CronParentId        *string         `json:"cronParentId,omitempty"`
	CronSchedule        *string         `json:"cronSchedule,omitempty"`
	EventId             *string         `json:"eventId,omitempty"`
	Metadata            APIResourceMeta `json:"metadata"`
	ParentWorkflowRunId *string         `json:"parentWorkflowRunId,omitempty"`
}

// WorkflowRunsCancelRequest defines model for WorkflowRunsCancelRequest.
type WorkflowRunsCancelRequest struct {
	WorkflowRunIds []openapi_types.UUID `json:"workflowRunIds"`
}

// WorkflowRunsMetrics defines model for WorkflowRunsMetrics.
type WorkflowRunsMetrics struct {
	Counts *WorkflowRunsMetricsCounts `json:"counts,omitempty"`
}

// WorkflowRunsMetricsCounts defines model for WorkflowRunsMetricsCounts.
type WorkflowRunsMetricsCounts struct {
	CANCELLED *int `json:"CANCELLED,omitempty"`
	FAILED    *int `json:"FAILED,omitempty"`
	PENDING   *int `json:"PENDING,omitempty"`
	QUEUED    *int `json:"QUEUED,omitempty"`
	RUNNING   *int `json:"RUNNING,omitempty"`
	SUCCEEDED *int `json:"SUCCEEDED,omitempty"`
}

// WorkflowTag defines model for WorkflowTag.
type WorkflowTag struct {
	// Color The description of the workflow.
	Color string `json:"color"`

	// Name The name of the workflow.
	Name string `json:"name"`
}

// WorkflowTriggerCronRef defines model for WorkflowTriggerCronRef.
type WorkflowTriggerCronRef struct {
	Cron     *string `json:"cron,omitempty"`
	ParentId *string `json:"parent_id,omitempty"`
}

// WorkflowTriggerEventRef defines model for WorkflowTriggerEventRef.
type WorkflowTriggerEventRef struct {
	EventKey *string `json:"event_key,omitempty"`
	ParentId *string `json:"parent_id,omitempty"`
}

// WorkflowTriggers defines model for WorkflowTriggers.
type WorkflowTriggers struct {
	Crons             *[]WorkflowTriggerCronRef  `json:"crons,omitempty"`
	Events            *[]WorkflowTriggerEventRef `json:"events,omitempty"`
	Metadata          *APIResourceMeta           `json:"metadata,omitempty"`
	TenantId          *string                    `json:"tenant_id,omitempty"`
	WorkflowVersionId *string                    `json:"workflow_version_id,omitempty"`
}

// WorkflowUpdateRequest defines model for WorkflowUpdateRequest.
type WorkflowUpdateRequest struct {
	// IsPaused Whether the workflow is paused.
	IsPaused *bool `json:"isPaused,omitempty"`
}

// WorkflowVersion defines model for WorkflowVersion.
type WorkflowVersion struct {
	Concurrency *WorkflowConcurrency `json:"concurrency,omitempty"`

	// DefaultPriority The default priority of the workflow.
	DefaultPriority *int32          `json:"defaultPriority,omitempty"`
	Jobs            *[]Job          `json:"jobs,omitempty"`
	Metadata        APIResourceMeta `json:"metadata"`
	Order           int32           `json:"order"`
	ScheduleTimeout *string         `json:"scheduleTimeout,omitempty"`

	// Sticky The sticky strategy of the workflow.
	Sticky   *string           `json:"sticky,omitempty"`
	Triggers *WorkflowTriggers `json:"triggers,omitempty"`

	// Version The version of the workflow.
	Version    string    `json:"version"`
	Workflow   *Workflow `json:"workflow,omitempty"`
	WorkflowId string    `json:"workflowId"`
}

// WorkflowVersionMeta defines model for WorkflowVersionMeta.
type WorkflowVersionMeta struct {
	Metadata APIResourceMeta `json:"metadata"`
	Order    int32           `json:"order"`

	// Version The version of the workflow.
	Version    string    `json:"version"`
	Workflow   *Workflow `json:"workflow,omitempty"`
	WorkflowId string    `json:"workflowId"`
}

// WorkflowWorkersCount defines model for WorkflowWorkersCount.
type WorkflowWorkersCount struct {
	FreeSlotCount *int    `json:"freeSlotCount,omitempty"`
	MaxSlotCount  *int    `json:"maxSlotCount,omitempty"`
	WorkflowRunId *string `json:"workflowRunId,omitempty"`
}

// V1DagListTasksParams defines parameters for V1DagListTasks.
type V1DagListTasksParams struct {
	// DagIds The external id of the DAG
	DagIds []openapi_types.UUID `form:"dag_ids" json:"dag_ids"`

	// Tenant The tenant id
	Tenant openapi_types.UUID `form:"tenant" json:"tenant"`
}

// V1TaskGetParams defines parameters for V1TaskGet.
type V1TaskGetParams struct {
	// Attempt The attempt number
	Attempt *int `form:"attempt,omitempty" json:"attempt,omitempty"`
}

// V1TaskEventListParams defines parameters for V1TaskEventList.
type V1TaskEventListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// V1EventListParams defines parameters for V1EventList.
type V1EventListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Keys A list of keys to filter by
	Keys *[]EventKey `form:"keys,omitempty" json:"keys,omitempty"`

	// Since Consider events that occurred after this time
	Since *time.Time `form:"since,omitempty" json:"since,omitempty"`

	// Until Consider events that occurred before this time
	Until *time.Time `form:"until,omitempty" json:"until,omitempty"`
}

// V1FilterListParams defines parameters for V1FilterList.
type V1FilterListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// WorkflowIds The workflow ids to filter by
	WorkflowIds *[]openapi_types.UUID `form:"workflowIds,omitempty" json:"workflowIds,omitempty"`

	// Scopes The scopes to subset candidate filters by
	Scopes *[]string `form:"scopes,omitempty" json:"scopes,omitempty"`
}

// V1TaskListStatusMetricsParams defines parameters for V1TaskListStatusMetrics.
type V1TaskListStatusMetricsParams struct {
	// Since The start time to get metrics for
	Since time.Time `form:"since" json:"since"`

	// Until The end time to get metrics for
	Until *time.Time `form:"until,omitempty" json:"until,omitempty"`

	// WorkflowIds The workflow id to find runs for
	WorkflowIds *[]openapi_types.UUID `form:"workflow_ids,omitempty" json:"workflow_ids,omitempty"`

	// ParentTaskExternalId The parent task's external id
	ParentTaskExternalId *openapi_types.UUID `form:"parent_task_external_id,omitempty" json:"parent_task_external_id,omitempty"`

	// TriggeringEventExternalId The id of the event that triggered the task
	TriggeringEventExternalId *openapi_types.UUID `form:"triggering_event_external_id,omitempty" json:"triggering_event_external_id,omitempty"`
}

// V1TaskGetPointMetricsParams defines parameters for V1TaskGetPointMetrics.
type V1TaskGetPointMetricsParams struct {
	// CreatedAfter The time after the task was created
	CreatedAfter *time.Time `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// FinishedBefore The time before the task was completed
	FinishedBefore *time.Time `form:"finishedBefore,omitempty" json:"finishedBefore,omitempty"`
}

// V1WorkflowRunListParams defines parameters for V1WorkflowRunList.
type V1WorkflowRunListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Statuses A list of statuses to filter by
	Statuses *[]V1TaskStatus `form:"statuses,omitempty" json:"statuses,omitempty"`

	// Since The earliest date to filter by
	Since time.Time `form:"since" json:"since"`

	// Until The latest date to filter by
	Until *time.Time `form:"until,omitempty" json:"until,omitempty"`

	// AdditionalMetadata Additional metadata k-v pairs to filter by
	AdditionalMetadata *[]string `form:"additional_metadata,omitempty" json:"additional_metadata,omitempty"`

	// WorkflowIds The workflow ids to find runs for
	WorkflowIds *[]openapi_types.UUID `form:"workflow_ids,omitempty" json:"workflow_ids,omitempty"`

	// WorkerId The worker id to filter by
	WorkerId *openapi_types.UUID `form:"worker_id,omitempty" json:"worker_id,omitempty"`

	// OnlyTasks Whether to include DAGs or only to include tasks
	OnlyTasks bool `form:"only_tasks" json:"only_tasks"`

	// ParentTaskExternalId The parent task external id to filter by
	ParentTaskExternalId *openapi_types.UUID `form:"parent_task_external_id,omitempty" json:"parent_task_external_id,omitempty"`

	// TriggeringEventExternalId The external id of the event that triggered the workflow run
	TriggeringEventExternalId *openapi_types.UUID `form:"triggering_event_external_id,omitempty" json:"triggering_event_external_id,omitempty"`

	// IncludePayloads A flag for whether or not to include the input and output payloads in the response. Defaults to `true` if unset.
	IncludePayloads *bool `form:"include_payloads,omitempty" json:"include_payloads,omitempty"`
}

// V1WorkflowRunDisplayNamesListParams defines parameters for V1WorkflowRunDisplayNamesList.
type V1WorkflowRunDisplayNamesListParams struct {
	// ExternalIds The external ids of the workflow runs to get display names for
	ExternalIds []openapi_types.UUID `form:"external_ids" json:"external_ids"`
}

// V1WorkflowRunTaskEventsListParams defines parameters for V1WorkflowRunTaskEventsList.
type V1WorkflowRunTaskEventsListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// V1WorkflowRunGetTimingsParams defines parameters for V1WorkflowRunGetTimings.
type V1WorkflowRunGetTimingsParams struct {
	// Depth The depth to retrieve children
	Depth *int64 `form:"depth,omitempty" json:"depth,omitempty"`
}

// StepRunListArchivesParams defines parameters for StepRunListArchives.
type StepRunListArchivesParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// StepRunListEventsParams defines parameters for StepRunListEvents.
type StepRunListEventsParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// LogLineListParams defines parameters for LogLineList.
type LogLineListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Levels A list of levels to filter by
	Levels *LogLineLevelField `form:"levels,omitempty" json:"levels,omitempty"`

	// Search The search query to filter for
	Search *LogLineSearch `form:"search,omitempty" json:"search,omitempty"`

	// OrderByField What to order by
	OrderByField *LogLineOrderByField `form:"orderByField,omitempty" json:"orderByField,omitempty"`

	// OrderByDirection The order direction
	OrderByDirection *LogLineOrderByDirection `form:"orderByDirection,omitempty" json:"orderByDirection,omitempty"`
}

// EventListParams defines parameters for EventList.
type EventListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Keys A list of keys to filter by
	Keys *[]EventKey `form:"keys,omitempty" json:"keys,omitempty"`

	// Workflows A list of workflow IDs to filter by
	Workflows *[]WorkflowID `form:"workflows,omitempty" json:"workflows,omitempty"`

	// Statuses A list of workflow run statuses to filter by
	Statuses *WorkflowRunStatusList `form:"statuses,omitempty" json:"statuses,omitempty"`

	// Search The search query to filter for
	Search *EventSearch `form:"search,omitempty" json:"search,omitempty"`

	// OrderByField What to order by
	OrderByField *EventOrderByField `form:"orderByField,omitempty" json:"orderByField,omitempty"`

	// OrderByDirection The order direction
	OrderByDirection *EventOrderByDirection `form:"orderByDirection,omitempty" json:"orderByDirection,omitempty"`

	// AdditionalMetadata A list of metadata key value pairs to filter by
	AdditionalMetadata *[]string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`

	// EventIds A list of event ids to filter by
	EventIds *[]openapi_types.UUID `form:"eventIds,omitempty" json:"eventIds,omitempty"`
}

// TenantGetQueueMetricsParams defines parameters for TenantGetQueueMetrics.
type TenantGetQueueMetricsParams struct {
	// Workflows A list of workflow IDs to filter by
	Workflows *[]WorkflowID `form:"workflows,omitempty" json:"workflows,omitempty"`

	// AdditionalMetadata A list of metadata key value pairs to filter by
	AdditionalMetadata *[]string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`
}

// RateLimitListParams defines parameters for RateLimitList.
type RateLimitListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Search The search query to filter for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// OrderByField What to order by
	OrderByField *RateLimitOrderByField `form:"orderByField,omitempty" json:"orderByField,omitempty"`

	// OrderByDirection The order direction
	OrderByDirection *RateLimitOrderByDirection `form:"orderByDirection,omitempty" json:"orderByDirection,omitempty"`
}

// WorkflowRunListStepRunEventsParams defines parameters for WorkflowRunListStepRunEvents.
type WorkflowRunListStepRunEventsParams struct {
	// LastId Last ID of the last event
	LastId *int32 `form:"lastId,omitempty" json:"lastId,omitempty"`
}

// WorkflowListParams defines parameters for WorkflowList.
type WorkflowListParams struct {
	// Offset The number to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Search by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CronWorkflowListParams defines parameters for CronWorkflowList.
type CronWorkflowListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// WorkflowId The workflow id to get runs for.
	WorkflowId *openapi_types.UUID `form:"workflowId,omitempty" json:"workflowId,omitempty"`

	// WorkflowName The workflow name to get runs for.
	WorkflowName *string `form:"workflowName,omitempty" json:"workflowName,omitempty"`

	// CronName The cron name to get runs for.
	CronName *string `form:"cronName,omitempty" json:"cronName,omitempty"`

	// AdditionalMetadata A list of metadata key value pairs to filter by
	AdditionalMetadata *[]string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`

	// OrderByField The order by field
	OrderByField *CronWorkflowsOrderByField `form:"orderByField,omitempty" json:"orderByField,omitempty"`

	// OrderByDirection The order by direction
	OrderByDirection *WorkflowRunOrderByDirection `form:"orderByDirection,omitempty" json:"orderByDirection,omitempty"`
}

// WorkflowRunListParams defines parameters for WorkflowRunList.
type WorkflowRunListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// EventId The event id to get runs for.
	EventId *openapi_types.UUID `form:"eventId,omitempty" json:"eventId,omitempty"`

	// WorkflowId The workflow id to get runs for.
	WorkflowId *openapi_types.UUID `form:"workflowId,omitempty" json:"workflowId,omitempty"`

	// ParentWorkflowRunId The parent workflow run id
	ParentWorkflowRunId *openapi_types.UUID `form:"parentWorkflowRunId,omitempty" json:"parentWorkflowRunId,omitempty"`

	// ParentStepRunId The parent step run id
	ParentStepRunId *openapi_types.UUID `form:"parentStepRunId,omitempty" json:"parentStepRunId,omitempty"`

	// Statuses A list of workflow run statuses to filter by
	Statuses *WorkflowRunStatusList `form:"statuses,omitempty" json:"statuses,omitempty"`

	// Kinds A list of workflow kinds to filter by
	Kinds *WorkflowKindList `form:"kinds,omitempty" json:"kinds,omitempty"`

	// AdditionalMetadata A list of metadata key value pairs to filter by
	AdditionalMetadata *[]string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`

	// CreatedAfter The time after the workflow run was created
	CreatedAfter *time.Time `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// CreatedBefore The time before the workflow run was created
	CreatedBefore *time.Time `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// FinishedAfter The time after the workflow run was finished
	FinishedAfter *time.Time `form:"finishedAfter,omitempty" json:"finishedAfter,omitempty"`

	// FinishedBefore The time before the workflow run was finished
	FinishedBefore *time.Time `form:"finishedBefore,omitempty" json:"finishedBefore,omitempty"`

	// OrderByField The order by field
	OrderByField *WorkflowRunOrderByField `form:"orderByField,omitempty" json:"orderByField,omitempty"`

	// OrderByDirection The order by direction
	OrderByDirection *WorkflowRunOrderByDirection `form:"orderByDirection,omitempty" json:"orderByDirection,omitempty"`
}

// WorkflowRunGetMetricsParams defines parameters for WorkflowRunGetMetrics.
type WorkflowRunGetMetricsParams struct {
	// EventId The event id to get runs for.
	EventId *openapi_types.UUID `form:"eventId,omitempty" json:"eventId,omitempty"`

	// WorkflowId The workflow id to get runs for.
	WorkflowId *openapi_types.UUID `form:"workflowId,omitempty" json:"workflowId,omitempty"`

	// ParentWorkflowRunId The parent workflow run id
	ParentWorkflowRunId *openapi_types.UUID `form:"parentWorkflowRunId,omitempty" json:"parentWorkflowRunId,omitempty"`

	// ParentStepRunId The parent step run id
	ParentStepRunId *openapi_types.UUID `form:"parentStepRunId,omitempty" json:"parentStepRunId,omitempty"`

	// AdditionalMetadata A list of metadata key value pairs to filter by
	AdditionalMetadata *[]string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`

	// CreatedAfter The time after the workflow run was created
	CreatedAfter *time.Time `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// CreatedBefore The time before the workflow run was created
	CreatedBefore *time.Time `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`
}

// WorkflowScheduledListParams defines parameters for WorkflowScheduledList.
type WorkflowScheduledListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderByField The order by field
	OrderByField *ScheduledWorkflowsOrderByField `form:"orderByField,omitempty" json:"orderByField,omitempty"`

	// OrderByDirection The order by direction
	OrderByDirection *WorkflowRunOrderByDirection `form:"orderByDirection,omitempty" json:"orderByDirection,omitempty"`

	// WorkflowId The workflow id to get runs for.
	WorkflowId *openapi_types.UUID `form:"workflowId,omitempty" json:"workflowId,omitempty"`

	// ParentWorkflowRunId The parent workflow run id
	ParentWorkflowRunId *openapi_types.UUID `form:"parentWorkflowRunId,omitempty" json:"parentWorkflowRunId,omitempty"`

	// ParentStepRunId The parent step run id
	ParentStepRunId *openapi_types.UUID `form:"parentStepRunId,omitempty" json:"parentStepRunId,omitempty"`

	// AdditionalMetadata A list of metadata key value pairs to filter by
	AdditionalMetadata *[]string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`

	// Statuses A list of scheduled run statuses to filter by
	Statuses *[]ScheduledRunStatus `form:"statuses,omitempty" json:"statuses,omitempty"`
}

// WorkflowGetMetricsParams defines parameters for WorkflowGetMetrics.
type WorkflowGetMetricsParams struct {
	// Status A status of workflow run statuses to filter by
	Status *WorkflowRunStatus `form:"status,omitempty" json:"status,omitempty"`

	// GroupKey A group key to filter metrics by
	GroupKey *string `form:"groupKey,omitempty" json:"groupKey,omitempty"`
}

// WorkflowRunCreateParams defines parameters for WorkflowRunCreate.
type WorkflowRunCreateParams struct {
	// Version The workflow version. If not supplied, the latest version is fetched.
	Version *openapi_types.UUID `form:"version,omitempty" json:"version,omitempty"`
}

// WorkflowVersionGetParams defines parameters for WorkflowVersionGet.
type WorkflowVersionGetParams struct {
	// Version The workflow version. If not supplied, the latest version is fetched.
	Version *openapi_types.UUID `form:"version,omitempty" json:"version,omitempty"`
}

// AlertEmailGroupUpdateJSONRequestBody defines body for AlertEmailGroupUpdate for application/json ContentType.
type AlertEmailGroupUpdateJSONRequestBody = UpdateTenantAlertEmailGroupRequest

// V1FilterCreateJSONRequestBody defines body for V1FilterCreate for application/json ContentType.
type V1FilterCreateJSONRequestBody = V1CreateFilterRequest

// V1FilterUpdateJSONRequestBody defines body for V1FilterUpdate for application/json ContentType.
type V1FilterUpdateJSONRequestBody = V1UpdateFilterRequest

// V1TaskCancelJSONRequestBody defines body for V1TaskCancel for application/json ContentType.
type V1TaskCancelJSONRequestBody = V1CancelTaskRequest

// V1TaskReplayJSONRequestBody defines body for V1TaskReplay for application/json ContentType.
type V1TaskReplayJSONRequestBody = V1ReplayTaskRequest

// V1WorkflowRunCreateJSONRequestBody defines body for V1WorkflowRunCreate for application/json ContentType.
type V1WorkflowRunCreateJSONRequestBody = V1TriggerWorkflowRunRequest

// TenantCreateJSONRequestBody defines body for TenantCreate for application/json ContentType.
type TenantCreateJSONRequestBody = CreateTenantRequest

// TenantUpdateJSONRequestBody defines body for TenantUpdate for application/json ContentType.
type TenantUpdateJSONRequestBody = UpdateTenantRequest

// AlertEmailGroupCreateJSONRequestBody defines body for AlertEmailGroupCreate for application/json ContentType.
type AlertEmailGroupCreateJSONRequestBody = CreateTenantAlertEmailGroupRequest

// ApiTokenCreateJSONRequestBody defines body for ApiTokenCreate for application/json ContentType.
type ApiTokenCreateJSONRequestBody = CreateAPITokenRequest

// EventCreateJSONRequestBody defines body for EventCreate for application/json ContentType.
type EventCreateJSONRequestBody = CreateEventRequest

// EventCreateBulkJSONRequestBody defines body for EventCreateBulk for application/json ContentType.
type EventCreateBulkJSONRequestBody = BulkCreateEventRequest

// EventUpdateCancelJSONRequestBody defines body for EventUpdateCancel for application/json ContentType.
type EventUpdateCancelJSONRequestBody = CancelEventRequest

// EventUpdateReplayJSONRequestBody defines body for EventUpdateReplay for application/json ContentType.
type EventUpdateReplayJSONRequestBody = ReplayEventRequest

// TenantInviteCreateJSONRequestBody defines body for TenantInviteCreate for application/json ContentType.
type TenantInviteCreateJSONRequestBody = CreateTenantInviteRequest

// TenantInviteUpdateJSONRequestBody defines body for TenantInviteUpdate for application/json ContentType.
type TenantInviteUpdateJSONRequestBody = UpdateTenantInviteRequest

// SnsCreateJSONRequestBody defines body for SnsCreate for application/json ContentType.
type SnsCreateJSONRequestBody = CreateSNSIntegrationRequest

// StepRunUpdateRerunJSONRequestBody defines body for StepRunUpdateRerun for application/json ContentType.
type StepRunUpdateRerunJSONRequestBody = RerunStepRunRequest

// WebhookCreateJSONRequestBody defines body for WebhookCreate for application/json ContentType.
type WebhookCreateJSONRequestBody = WebhookWorkerCreateRequest

// WorkflowRunUpdateReplayJSONRequestBody defines body for WorkflowRunUpdateReplay for application/json ContentType.
type WorkflowRunUpdateReplayJSONRequestBody = ReplayWorkflowRunsRequest

// WorkflowRunCancelJSONRequestBody defines body for WorkflowRunCancel for application/json ContentType.
type WorkflowRunCancelJSONRequestBody = WorkflowRunsCancelRequest

// CronWorkflowTriggerCreateJSONRequestBody defines body for CronWorkflowTriggerCreate for application/json ContentType.
type CronWorkflowTriggerCreateJSONRequestBody = CreateCronWorkflowTriggerRequest

// ScheduledWorkflowRunCreateJSONRequestBody defines body for ScheduledWorkflowRunCreate for application/json ContentType.
type ScheduledWorkflowRunCreateJSONRequestBody = ScheduleWorkflowRunRequest

// TenantInviteAcceptJSONRequestBody defines body for TenantInviteAccept for application/json ContentType.
type TenantInviteAcceptJSONRequestBody = AcceptInviteRequest

// TenantInviteRejectJSONRequestBody defines body for TenantInviteReject for application/json ContentType.
type TenantInviteRejectJSONRequestBody = RejectInviteRequest

// UserUpdateLoginJSONRequestBody defines body for UserUpdateLogin for application/json ContentType.
type UserUpdateLoginJSONRequestBody = UserLoginRequest

// UserUpdatePasswordJSONRequestBody defines body for UserUpdatePassword for application/json ContentType.
type UserUpdatePasswordJSONRequestBody = UserChangePasswordRequest

// UserCreateJSONRequestBody defines body for UserCreate for application/json ContentType.
type UserCreateJSONRequestBody = UserRegisterRequest

// WorkerUpdateJSONRequestBody defines body for WorkerUpdate for application/json ContentType.
type WorkerUpdateJSONRequestBody = UpdateWorkerRequest

// WorkflowUpdateJSONRequestBody defines body for WorkflowUpdate for application/json ContentType.
type WorkflowUpdateJSONRequestBody = WorkflowUpdateRequest

// WorkflowRunCreateJSONRequestBody defines body for WorkflowRunCreate for application/json ContentType.
type WorkflowRunCreateJSONRequestBody = TriggerWorkflowRunRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get liveness
	// (GET /api/live)
	LivenessGet(ctx echo.Context) error
	// Get readiness
	// (GET /api/ready)
	ReadinessGet(ctx echo.Context) error
	// Delete tenant alert email group
	// (DELETE /api/v1/alerting-email-groups/{alert-email-group})
	AlertEmailGroupDelete(ctx echo.Context, alertEmailGroup openapi_types.UUID) error
	// Update tenant alert email group
	// (PATCH /api/v1/alerting-email-groups/{alert-email-group})
	AlertEmailGroupUpdate(ctx echo.Context, alertEmailGroup openapi_types.UUID) error
	// Revoke API Token
	// (POST /api/v1/api-tokens/{api-token})
	ApiTokenUpdateRevoke(ctx echo.Context, apiToken openapi_types.UUID) error
	// Get cloud metadata
	// (GET /api/v1/cloud/metadata)
	CloudMetadataGet(ctx echo.Context) error
	// Get event data
	// (GET /api/v1/events/{event})
	EventGet(ctx echo.Context, event openapi_types.UUID) error
	// Get event data
	// (GET /api/v1/events/{event}/data)
	EventDataGet(ctx echo.Context, event openapi_types.UUID) error
	// Get metadata
	// (GET /api/v1/meta)
	MetadataGet(ctx echo.Context) error
	// List integrations
	// (GET /api/v1/meta/integrations)
	MetadataListIntegrations(ctx echo.Context) error
	// Detailed Health Probe For the Instance
	// (POST /api/v1/monitoring/{tenant}/probe)
	MonitoringPostRunProbe(ctx echo.Context, tenant openapi_types.UUID) error
	// Delete Slack webhook
	// (DELETE /api/v1/slack/{slack})
	SlackWebhookDelete(ctx echo.Context, slack openapi_types.UUID) error
	// Delete SNS integration
	// (DELETE /api/v1/sns/{sns})
	SnsDelete(ctx echo.Context, sns openapi_types.UUID) error
	// Github app tenant webhook
	// (POST /api/v1/sns/{tenant}/{event})
	SnsUpdate(ctx echo.Context, tenant openapi_types.UUID, event string) error
	// List tasks
	// (GET /api/v1/stable/dags/tasks)
	V1DagListTasks(ctx echo.Context, params V1DagListTasksParams) error
	// Get a task
	// (GET /api/v1/stable/tasks/{task})
	V1TaskGet(ctx echo.Context, task openapi_types.UUID, params V1TaskGetParams) error
	// List log lines
	// (GET /api/v1/stable/tasks/{task}/logs)
	V1LogLineList(ctx echo.Context, task openapi_types.UUID) error
	// List events for a task
	// (GET /api/v1/stable/tasks/{task}/task-events)
	V1TaskEventList(ctx echo.Context, task openapi_types.UUID, params V1TaskEventListParams) error
	// List events
	// (GET /api/v1/stable/tenants/{tenant}/events)
	V1EventList(ctx echo.Context, tenant openapi_types.UUID, params V1EventListParams) error
	// List filters
	// (GET /api/v1/stable/tenants/{tenant}/filters)
	V1FilterList(ctx echo.Context, tenant openapi_types.UUID, params V1FilterListParams) error
	// Create a filter
	// (POST /api/v1/stable/tenants/{tenant}/filters)
	V1FilterCreate(ctx echo.Context, tenant openapi_types.UUID) error

	// (DELETE /api/v1/stable/tenants/{tenant}/filters/{v1-filter})
	V1FilterDelete(ctx echo.Context, tenant openapi_types.UUID, v1Filter openapi_types.UUID) error
	// Get a filter
	// (GET /api/v1/stable/tenants/{tenant}/filters/{v1-filter})
	V1FilterGet(ctx echo.Context, tenant openapi_types.UUID, v1Filter openapi_types.UUID) error

	// (PATCH /api/v1/stable/tenants/{tenant}/filters/{v1-filter})
	V1FilterUpdate(ctx echo.Context, tenant openapi_types.UUID, v1Filter openapi_types.UUID) error
	// Get task metrics
	// (GET /api/v1/stable/tenants/{tenant}/task-metrics)
	V1TaskListStatusMetrics(ctx echo.Context, tenant openapi_types.UUID, params V1TaskListStatusMetricsParams) error
	// Get task point metrics
	// (GET /api/v1/stable/tenants/{tenant}/task-point-metrics)
	V1TaskGetPointMetrics(ctx echo.Context, tenant openapi_types.UUID, params V1TaskGetPointMetricsParams) error
	// Cancel tasks
	// (POST /api/v1/stable/tenants/{tenant}/tasks/cancel)
	V1TaskCancel(ctx echo.Context, tenant openapi_types.UUID) error
	// Replay tasks
	// (POST /api/v1/stable/tenants/{tenant}/tasks/replay)
	V1TaskReplay(ctx echo.Context, tenant openapi_types.UUID) error
	// List workflow runs
	// (GET /api/v1/stable/tenants/{tenant}/workflow-runs)
	V1WorkflowRunList(ctx echo.Context, tenant openapi_types.UUID, params V1WorkflowRunListParams) error
	// List workflow runs
	// (GET /api/v1/stable/tenants/{tenant}/workflow-runs/display-names)
	V1WorkflowRunDisplayNamesList(ctx echo.Context, tenant openapi_types.UUID, params V1WorkflowRunDisplayNamesListParams) error
	// Create workflow run
	// (POST /api/v1/stable/tenants/{tenant}/workflow-runs/trigger)
	V1WorkflowRunCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// List tasks
	// (GET /api/v1/stable/workflow-runs/{v1-workflow-run})
	V1WorkflowRunGet(ctx echo.Context, v1WorkflowRun openapi_types.UUID) error
	// Get workflow run status
	// (GET /api/v1/stable/workflow-runs/{v1-workflow-run}/status)
	V1WorkflowRunGetStatus(ctx echo.Context, v1WorkflowRun openapi_types.UUID) error
	// List tasks
	// (GET /api/v1/stable/workflow-runs/{v1-workflow-run}/task-events)
	V1WorkflowRunTaskEventsList(ctx echo.Context, v1WorkflowRun openapi_types.UUID, params V1WorkflowRunTaskEventsListParams) error
	// List timings for a workflow run
	// (GET /api/v1/stable/workflow-runs/{v1-workflow-run}/task-timings)
	V1WorkflowRunGetTimings(ctx echo.Context, v1WorkflowRun openapi_types.UUID, params V1WorkflowRunGetTimingsParams) error
	// List archives for step run
	// (GET /api/v1/step-runs/{step-run}/archives)
	StepRunListArchives(ctx echo.Context, stepRun openapi_types.UUID, params StepRunListArchivesParams) error
	// List events for step run
	// (GET /api/v1/step-runs/{step-run}/events)
	StepRunListEvents(ctx echo.Context, stepRun openapi_types.UUID, params StepRunListEventsParams) error
	// List log lines
	// (GET /api/v1/step-runs/{step-run}/logs)
	LogLineList(ctx echo.Context, stepRun openapi_types.UUID, params LogLineListParams) error
	// Create tenant
	// (POST /api/v1/tenants)
	TenantCreate(ctx echo.Context) error
	// Get tenant
	// (GET /api/v1/tenants/{tenant})
	TenantGet(ctx echo.Context, tenant openapi_types.UUID) error
	// Update tenant
	// (PATCH /api/v1/tenants/{tenant})
	TenantUpdate(ctx echo.Context, tenant openapi_types.UUID) error
	// List tenant alert email groups
	// (GET /api/v1/tenants/{tenant}/alerting-email-groups)
	AlertEmailGroupList(ctx echo.Context, tenant openapi_types.UUID) error
	// Create tenant alert email group
	// (POST /api/v1/tenants/{tenant}/alerting-email-groups)
	AlertEmailGroupCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// Get tenant alerting settings
	// (GET /api/v1/tenants/{tenant}/alerting/settings)
	TenantAlertingSettingsGet(ctx echo.Context, tenant openapi_types.UUID) error
	// List API Tokens
	// (GET /api/v1/tenants/{tenant}/api-tokens)
	ApiTokenList(ctx echo.Context, tenant openapi_types.UUID) error
	// Create API Token
	// (POST /api/v1/tenants/{tenant}/api-tokens)
	ApiTokenCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// List events
	// (GET /api/v1/tenants/{tenant}/events)
	EventList(ctx echo.Context, tenant openapi_types.UUID, params EventListParams) error
	// Create event
	// (POST /api/v1/tenants/{tenant}/events)
	EventCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// Bulk Create events
	// (POST /api/v1/tenants/{tenant}/events/bulk)
	EventCreateBulk(ctx echo.Context, tenant openapi_types.UUID) error
	// Replay events
	// (POST /api/v1/tenants/{tenant}/events/cancel)
	EventUpdateCancel(ctx echo.Context, tenant openapi_types.UUID) error
	// List event keys
	// (GET /api/v1/tenants/{tenant}/events/keys)
	EventKeyList(ctx echo.Context, tenant openapi_types.UUID) error
	// Replay events
	// (POST /api/v1/tenants/{tenant}/events/replay)
	EventUpdateReplay(ctx echo.Context, tenant openapi_types.UUID) error
	// List tenant invites
	// (GET /api/v1/tenants/{tenant}/invites)
	TenantInviteList(ctx echo.Context, tenant openapi_types.UUID) error
	// Create tenant invite
	// (POST /api/v1/tenants/{tenant}/invites)
	TenantInviteCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// Delete invite
	// (DELETE /api/v1/tenants/{tenant}/invites/{tenant-invite})
	TenantInviteDelete(ctx echo.Context, tenant openapi_types.UUID, tenantInvite openapi_types.UUID) error
	// Update invite
	// (PATCH /api/v1/tenants/{tenant}/invites/{tenant-invite})
	TenantInviteUpdate(ctx echo.Context, tenant openapi_types.UUID, tenantInvite openapi_types.UUID) error
	// List tenant members
	// (GET /api/v1/tenants/{tenant}/members)
	TenantMemberList(ctx echo.Context, tenant openapi_types.UUID) error
	// Delete a tenant member
	// (DELETE /api/v1/tenants/{tenant}/members/{member})
	TenantMemberDelete(ctx echo.Context, tenant openapi_types.UUID, member openapi_types.UUID) error
	// Get workflow metrics
	// (GET /api/v1/tenants/{tenant}/queue-metrics)
	TenantGetQueueMetrics(ctx echo.Context, tenant openapi_types.UUID, params TenantGetQueueMetricsParams) error
	// List rate limits
	// (GET /api/v1/tenants/{tenant}/rate-limits)
	RateLimitList(ctx echo.Context, tenant openapi_types.UUID, params RateLimitListParams) error
	// Create tenant alert email group
	// (GET /api/v1/tenants/{tenant}/resource-policy)
	TenantResourcePolicyGet(ctx echo.Context, tenant openapi_types.UUID) error
	// List Slack integrations
	// (GET /api/v1/tenants/{tenant}/slack)
	SlackWebhookList(ctx echo.Context, tenant openapi_types.UUID) error
	// Start OAuth flow
	// (GET /api/v1/tenants/{tenant}/slack/start)
	UserUpdateSlackOauthStart(ctx echo.Context, tenant openapi_types.UUID) error
	// List SNS integrations
	// (GET /api/v1/tenants/{tenant}/sns)
	SnsList(ctx echo.Context, tenant openapi_types.UUID) error
	// Create SNS integration
	// (POST /api/v1/tenants/{tenant}/sns)
	SnsCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// Get step run metrics
	// (GET /api/v1/tenants/{tenant}/step-run-queue-metrics)
	TenantGetStepRunQueueMetrics(ctx echo.Context, tenant openapi_types.UUID) error
	// Get step run
	// (GET /api/v1/tenants/{tenant}/step-runs/{step-run})
	StepRunGet(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error
	// Attempts to cancel a step run
	// (POST /api/v1/tenants/{tenant}/step-runs/{step-run}/cancel)
	StepRunUpdateCancel(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error
	// Rerun step run
	// (POST /api/v1/tenants/{tenant}/step-runs/{step-run}/rerun)
	StepRunUpdateRerun(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error
	// Get step run schema
	// (GET /api/v1/tenants/{tenant}/step-runs/{step-run}/schema)
	StepRunGetSchema(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error
	// List webhooks
	// (GET /api/v1/tenants/{tenant}/webhook-workers)
	WebhookList(ctx echo.Context, tenant openapi_types.UUID) error
	// Create a webhook
	// (POST /api/v1/tenants/{tenant}/webhook-workers)
	WebhookCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// Get workers
	// (GET /api/v1/tenants/{tenant}/worker)
	WorkerList(ctx echo.Context, tenant openapi_types.UUID) error
	// Replay workflow runs
	// (POST /api/v1/tenants/{tenant}/workflow-runs/replay)
	WorkflowRunUpdateReplay(ctx echo.Context, tenant openapi_types.UUID) error
	// Get workflow run
	// (GET /api/v1/tenants/{tenant}/workflow-runs/{workflow-run})
	WorkflowRunGet(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID) error
	// Get workflow run input
	// (GET /api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/input)
	WorkflowRunGetInput(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID) error
	// Get workflow run
	// (GET /api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/shape)
	WorkflowRunGetShape(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID) error
	// List events for all step runs for a workflow run
	// (GET /api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/step-run-events)
	WorkflowRunListStepRunEvents(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID, params WorkflowRunListStepRunEventsParams) error
	// Get workflows
	// (GET /api/v1/tenants/{tenant}/workflows)
	WorkflowList(ctx echo.Context, tenant openapi_types.UUID, params WorkflowListParams) error
	// Cancel workflow runs
	// (POST /api/v1/tenants/{tenant}/workflows/cancel)
	WorkflowRunCancel(ctx echo.Context, tenant openapi_types.UUID) error
	// Get cron job workflows
	// (GET /api/v1/tenants/{tenant}/workflows/crons)
	CronWorkflowList(ctx echo.Context, tenant openapi_types.UUID, params CronWorkflowListParams) error
	// Delete cron job workflow run
	// (DELETE /api/v1/tenants/{tenant}/workflows/crons/{cron-workflow})
	WorkflowCronDelete(ctx echo.Context, tenant openapi_types.UUID, cronWorkflow openapi_types.UUID) error
	// Get cron job workflow run
	// (GET /api/v1/tenants/{tenant}/workflows/crons/{cron-workflow})
	WorkflowCronGet(ctx echo.Context, tenant openapi_types.UUID, cronWorkflow openapi_types.UUID) error
	// Get workflow runs
	// (GET /api/v1/tenants/{tenant}/workflows/runs)
	WorkflowRunList(ctx echo.Context, tenant openapi_types.UUID, params WorkflowRunListParams) error
	// Get workflow runs metrics
	// (GET /api/v1/tenants/{tenant}/workflows/runs/metrics)
	WorkflowRunGetMetrics(ctx echo.Context, tenant openapi_types.UUID, params WorkflowRunGetMetricsParams) error
	// Get scheduled workflow runs
	// (GET /api/v1/tenants/{tenant}/workflows/scheduled)
	WorkflowScheduledList(ctx echo.Context, tenant openapi_types.UUID, params WorkflowScheduledListParams) error
	// Delete scheduled workflow run
	// (DELETE /api/v1/tenants/{tenant}/workflows/scheduled/{scheduled-workflow-run})
	WorkflowScheduledDelete(ctx echo.Context, tenant openapi_types.UUID, scheduledWorkflowRun openapi_types.UUID) error
	// Get scheduled workflow run
	// (GET /api/v1/tenants/{tenant}/workflows/scheduled/{scheduled-workflow-run})
	WorkflowScheduledGet(ctx echo.Context, tenant openapi_types.UUID, scheduledWorkflowRun openapi_types.UUID) error
	// Create cron job workflow trigger
	// (POST /api/v1/tenants/{tenant}/workflows/{workflow}/crons)
	CronWorkflowTriggerCreate(ctx echo.Context, tenant openapi_types.UUID, workflow string) error
	// Trigger workflow run
	// (POST /api/v1/tenants/{tenant}/workflows/{workflow}/scheduled)
	ScheduledWorkflowRunCreate(ctx echo.Context, tenant openapi_types.UUID, workflow string) error
	// Get workflow worker count
	// (GET /api/v1/tenants/{tenant}/workflows/{workflow}/worker-count)
	WorkflowGetWorkersCount(ctx echo.Context, tenant openapi_types.UUID, workflow openapi_types.UUID) error
	// Get current user
	// (GET /api/v1/users/current)
	UserGetCurrent(ctx echo.Context) error
	// Complete OAuth flow
	// (GET /api/v1/users/github/callback)
	UserUpdateGithubOauthCallback(ctx echo.Context) error
	// Start OAuth flow
	// (GET /api/v1/users/github/start)
	UserUpdateGithubOauthStart(ctx echo.Context) error
	// Complete OAuth flow
	// (GET /api/v1/users/google/callback)
	UserUpdateGoogleOauthCallback(ctx echo.Context) error
	// Start OAuth flow
	// (GET /api/v1/users/google/start)
	UserUpdateGoogleOauthStart(ctx echo.Context) error
	// List tenant invites
	// (GET /api/v1/users/invites)
	UserListTenantInvites(ctx echo.Context) error
	// Accept tenant invite
	// (POST /api/v1/users/invites/accept)
	TenantInviteAccept(ctx echo.Context) error
	// Reject tenant invite
	// (POST /api/v1/users/invites/reject)
	TenantInviteReject(ctx echo.Context) error
	// Login user
	// (POST /api/v1/users/login)
	UserUpdateLogin(ctx echo.Context) error
	// Logout user
	// (POST /api/v1/users/logout)
	UserUpdateLogout(ctx echo.Context) error
	// List tenant memberships
	// (GET /api/v1/users/memberships)
	TenantMembershipsList(ctx echo.Context) error
	// Change user password
	// (POST /api/v1/users/password)
	UserUpdatePassword(ctx echo.Context) error
	// Register user
	// (POST /api/v1/users/register)
	UserCreate(ctx echo.Context) error
	// Complete OAuth flow
	// (GET /api/v1/users/slack/callback)
	UserUpdateSlackOauthCallback(ctx echo.Context) error
	// We return the version for the currently running server
	// (GET /api/v1/version)
	InfoGetVersion(ctx echo.Context) error
	// Delete a webhook
	// (DELETE /api/v1/webhook-workers/{webhook})
	WebhookDelete(ctx echo.Context, webhook openapi_types.UUID) error
	// List webhook requests
	// (GET /api/v1/webhook-workers/{webhook}/requests)
	WebhookRequestsList(ctx echo.Context, webhook openapi_types.UUID) error
	// Get worker
	// (GET /api/v1/workers/{worker})
	WorkerGet(ctx echo.Context, worker openapi_types.UUID) error
	// Update worker
	// (PATCH /api/v1/workers/{worker})
	WorkerUpdate(ctx echo.Context, worker openapi_types.UUID) error
	// Delete workflow
	// (DELETE /api/v1/workflows/{workflow})
	WorkflowDelete(ctx echo.Context, workflow openapi_types.UUID) error
	// Get workflow
	// (GET /api/v1/workflows/{workflow})
	WorkflowGet(ctx echo.Context, workflow openapi_types.UUID) error
	// Update workflow
	// (PATCH /api/v1/workflows/{workflow})
	WorkflowUpdate(ctx echo.Context, workflow openapi_types.UUID) error
	// Get workflow metrics
	// (GET /api/v1/workflows/{workflow}/metrics)
	WorkflowGetMetrics(ctx echo.Context, workflow openapi_types.UUID, params WorkflowGetMetricsParams) error
	// Trigger workflow run
	// (POST /api/v1/workflows/{workflow}/trigger)
	WorkflowRunCreate(ctx echo.Context, workflow openapi_types.UUID, params WorkflowRunCreateParams) error
	// Get workflow version
	// (GET /api/v1/workflows/{workflow}/versions)
	WorkflowVersionGet(ctx echo.Context, workflow openapi_types.UUID, params WorkflowVersionGetParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LivenessGet converts echo context to params.
func (w *ServerInterfaceWrapper) LivenessGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LivenessGet(ctx)
	return err
}

// ReadinessGet converts echo context to params.
func (w *ServerInterfaceWrapper) ReadinessGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReadinessGet(ctx)
	return err
}

// AlertEmailGroupDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AlertEmailGroupDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alert-email-group" -------------
	var alertEmailGroup openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "alert-email-group", runtime.ParamLocationPath, ctx.Param("alert-email-group"), &alertEmailGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alert-email-group: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AlertEmailGroupDelete(ctx, alertEmailGroup)
	return err
}

// AlertEmailGroupUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AlertEmailGroupUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alert-email-group" -------------
	var alertEmailGroup openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "alert-email-group", runtime.ParamLocationPath, ctx.Param("alert-email-group"), &alertEmailGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alert-email-group: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AlertEmailGroupUpdate(ctx, alertEmailGroup)
	return err
}

// ApiTokenUpdateRevoke converts echo context to params.
func (w *ServerInterfaceWrapper) ApiTokenUpdateRevoke(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "api-token" -------------
	var apiToken openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "api-token", runtime.ParamLocationPath, ctx.Param("api-token"), &apiToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api-token: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiTokenUpdateRevoke(ctx, apiToken)
	return err
}

// CloudMetadataGet converts echo context to params.
func (w *ServerInterfaceWrapper) CloudMetadataGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CloudMetadataGet(ctx)
	return err
}

// EventGet converts echo context to params.
func (w *ServerInterfaceWrapper) EventGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event" -------------
	var event openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "event", runtime.ParamLocationPath, ctx.Param("event"), &event)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventGet(ctx, event)
	return err
}

// EventDataGet converts echo context to params.
func (w *ServerInterfaceWrapper) EventDataGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event" -------------
	var event openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "event", runtime.ParamLocationPath, ctx.Param("event"), &event)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventDataGet(ctx, event)
	return err
}

// MetadataGet converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MetadataGet(ctx)
	return err
}

// MetadataListIntegrations converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataListIntegrations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MetadataListIntegrations(ctx)
	return err
}

// MonitoringPostRunProbe converts echo context to params.
func (w *ServerInterfaceWrapper) MonitoringPostRunProbe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MonitoringPostRunProbe(ctx, tenant)
	return err
}

// SlackWebhookDelete converts echo context to params.
func (w *ServerInterfaceWrapper) SlackWebhookDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slack" -------------
	var slack openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "slack", runtime.ParamLocationPath, ctx.Param("slack"), &slack)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slack: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SlackWebhookDelete(ctx, slack)
	return err
}

// SnsDelete converts echo context to params.
func (w *ServerInterfaceWrapper) SnsDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sns" -------------
	var sns openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "sns", runtime.ParamLocationPath, ctx.Param("sns"), &sns)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sns: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SnsDelete(ctx, sns)
	return err
}

// SnsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SnsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "event" -------------
	var event string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event", runtime.ParamLocationPath, ctx.Param("event"), &event)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SnsUpdate(ctx, tenant, event)
	return err
}

// V1DagListTasks converts echo context to params.
func (w *ServerInterfaceWrapper) V1DagListTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1DagListTasksParams
	// ------------- Required query parameter "dag_ids" -------------

	err = runtime.BindQueryParameter("form", true, true, "dag_ids", ctx.QueryParams(), &params.DagIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dag_ids: %s", err))
	}

	// ------------- Required query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, true, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1DagListTasks(ctx, params)
	return err
}

// V1TaskGet converts echo context to params.
func (w *ServerInterfaceWrapper) V1TaskGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task" -------------
	var task openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "task", runtime.ParamLocationPath, ctx.Param("task"), &task)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1TaskGetParams
	// ------------- Optional query parameter "attempt" -------------

	err = runtime.BindQueryParameter("form", true, false, "attempt", ctx.QueryParams(), &params.Attempt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attempt: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1TaskGet(ctx, task, params)
	return err
}

// V1LogLineList converts echo context to params.
func (w *ServerInterfaceWrapper) V1LogLineList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task" -------------
	var task openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "task", runtime.ParamLocationPath, ctx.Param("task"), &task)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1LogLineList(ctx, task)
	return err
}

// V1TaskEventList converts echo context to params.
func (w *ServerInterfaceWrapper) V1TaskEventList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task" -------------
	var task openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "task", runtime.ParamLocationPath, ctx.Param("task"), &task)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1TaskEventListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1TaskEventList(ctx, task, params)
	return err
}

// V1EventList converts echo context to params.
func (w *ServerInterfaceWrapper) V1EventList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1EventListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "keys" -------------

	err = runtime.BindQueryParameter("form", true, false, "keys", ctx.QueryParams(), &params.Keys)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keys: %s", err))
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// ------------- Optional query parameter "until" -------------

	err = runtime.BindQueryParameter("form", true, false, "until", ctx.QueryParams(), &params.Until)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1EventList(ctx, tenant, params)
	return err
}

// V1FilterList converts echo context to params.
func (w *ServerInterfaceWrapper) V1FilterList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1FilterListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "workflowIds" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowIds", ctx.QueryParams(), &params.WorkflowIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflowIds: %s", err))
	}

	// ------------- Optional query parameter "scopes" -------------

	err = runtime.BindQueryParameter("form", true, false, "scopes", ctx.QueryParams(), &params.Scopes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scopes: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1FilterList(ctx, tenant, params)
	return err
}

// V1FilterCreate converts echo context to params.
func (w *ServerInterfaceWrapper) V1FilterCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1FilterCreate(ctx, tenant)
	return err
}

// V1FilterDelete converts echo context to params.
func (w *ServerInterfaceWrapper) V1FilterDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "v1-filter" -------------
	var v1Filter openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "v1-filter", runtime.ParamLocationPath, ctx.Param("v1-filter"), &v1Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter v1-filter: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1FilterDelete(ctx, tenant, v1Filter)
	return err
}

// V1FilterGet converts echo context to params.
func (w *ServerInterfaceWrapper) V1FilterGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "v1-filter" -------------
	var v1Filter openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "v1-filter", runtime.ParamLocationPath, ctx.Param("v1-filter"), &v1Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter v1-filter: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1FilterGet(ctx, tenant, v1Filter)
	return err
}

// V1FilterUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) V1FilterUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "v1-filter" -------------
	var v1Filter openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "v1-filter", runtime.ParamLocationPath, ctx.Param("v1-filter"), &v1Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter v1-filter: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1FilterUpdate(ctx, tenant, v1Filter)
	return err
}

// V1TaskListStatusMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) V1TaskListStatusMetrics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1TaskListStatusMetricsParams
	// ------------- Required query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, true, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// ------------- Optional query parameter "until" -------------

	err = runtime.BindQueryParameter("form", true, false, "until", ctx.QueryParams(), &params.Until)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until: %s", err))
	}

	// ------------- Optional query parameter "workflow_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflow_ids", ctx.QueryParams(), &params.WorkflowIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow_ids: %s", err))
	}

	// ------------- Optional query parameter "parent_task_external_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent_task_external_id", ctx.QueryParams(), &params.ParentTaskExternalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent_task_external_id: %s", err))
	}

	// ------------- Optional query parameter "triggering_event_external_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "triggering_event_external_id", ctx.QueryParams(), &params.TriggeringEventExternalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter triggering_event_external_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1TaskListStatusMetrics(ctx, tenant, params)
	return err
}

// V1TaskGetPointMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) V1TaskGetPointMetrics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1TaskGetPointMetricsParams
	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", ctx.QueryParams(), &params.CreatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdAfter: %s", err))
	}

	// ------------- Optional query parameter "finishedBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "finishedBefore", ctx.QueryParams(), &params.FinishedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finishedBefore: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1TaskGetPointMetrics(ctx, tenant, params)
	return err
}

// V1TaskCancel converts echo context to params.
func (w *ServerInterfaceWrapper) V1TaskCancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1TaskCancel(ctx, tenant)
	return err
}

// V1TaskReplay converts echo context to params.
func (w *ServerInterfaceWrapper) V1TaskReplay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1TaskReplay(ctx, tenant)
	return err
}

// V1WorkflowRunList converts echo context to params.
func (w *ServerInterfaceWrapper) V1WorkflowRunList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1WorkflowRunListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", ctx.QueryParams(), &params.Statuses)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter statuses: %s", err))
	}

	// ------------- Required query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, true, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// ------------- Optional query parameter "until" -------------

	err = runtime.BindQueryParameter("form", true, false, "until", ctx.QueryParams(), &params.Until)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until: %s", err))
	}

	// ------------- Optional query parameter "additional_metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additional_metadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional_metadata: %s", err))
	}

	// ------------- Optional query parameter "workflow_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflow_ids", ctx.QueryParams(), &params.WorkflowIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow_ids: %s", err))
	}

	// ------------- Optional query parameter "worker_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "worker_id", ctx.QueryParams(), &params.WorkerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter worker_id: %s", err))
	}

	// ------------- Required query parameter "only_tasks" -------------

	err = runtime.BindQueryParameter("form", true, true, "only_tasks", ctx.QueryParams(), &params.OnlyTasks)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter only_tasks: %s", err))
	}

	// ------------- Optional query parameter "parent_task_external_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent_task_external_id", ctx.QueryParams(), &params.ParentTaskExternalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent_task_external_id: %s", err))
	}

	// ------------- Optional query parameter "triggering_event_external_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "triggering_event_external_id", ctx.QueryParams(), &params.TriggeringEventExternalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter triggering_event_external_id: %s", err))
	}

	// ------------- Optional query parameter "include_payloads" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_payloads", ctx.QueryParams(), &params.IncludePayloads)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_payloads: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1WorkflowRunList(ctx, tenant, params)
	return err
}

// V1WorkflowRunDisplayNamesList converts echo context to params.
func (w *ServerInterfaceWrapper) V1WorkflowRunDisplayNamesList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1WorkflowRunDisplayNamesListParams
	// ------------- Required query parameter "external_ids" -------------

	err = runtime.BindQueryParameter("form", true, true, "external_ids", ctx.QueryParams(), &params.ExternalIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter external_ids: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1WorkflowRunDisplayNamesList(ctx, tenant, params)
	return err
}

// V1WorkflowRunCreate converts echo context to params.
func (w *ServerInterfaceWrapper) V1WorkflowRunCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1WorkflowRunCreate(ctx, tenant)
	return err
}

// V1WorkflowRunGet converts echo context to params.
func (w *ServerInterfaceWrapper) V1WorkflowRunGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "v1-workflow-run" -------------
	var v1WorkflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "v1-workflow-run", runtime.ParamLocationPath, ctx.Param("v1-workflow-run"), &v1WorkflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter v1-workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1WorkflowRunGet(ctx, v1WorkflowRun)
	return err
}

// V1WorkflowRunGetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) V1WorkflowRunGetStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "v1-workflow-run" -------------
	var v1WorkflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "v1-workflow-run", runtime.ParamLocationPath, ctx.Param("v1-workflow-run"), &v1WorkflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter v1-workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1WorkflowRunGetStatus(ctx, v1WorkflowRun)
	return err
}

// V1WorkflowRunTaskEventsList converts echo context to params.
func (w *ServerInterfaceWrapper) V1WorkflowRunTaskEventsList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "v1-workflow-run" -------------
	var v1WorkflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "v1-workflow-run", runtime.ParamLocationPath, ctx.Param("v1-workflow-run"), &v1WorkflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter v1-workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1WorkflowRunTaskEventsListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1WorkflowRunTaskEventsList(ctx, v1WorkflowRun, params)
	return err
}

// V1WorkflowRunGetTimings converts echo context to params.
func (w *ServerInterfaceWrapper) V1WorkflowRunGetTimings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "v1-workflow-run" -------------
	var v1WorkflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "v1-workflow-run", runtime.ParamLocationPath, ctx.Param("v1-workflow-run"), &v1WorkflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter v1-workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1WorkflowRunGetTimingsParams
	// ------------- Optional query parameter "depth" -------------

	err = runtime.BindQueryParameter("form", true, false, "depth", ctx.QueryParams(), &params.Depth)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter depth: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1WorkflowRunGetTimings(ctx, v1WorkflowRun, params)
	return err
}

// StepRunListArchives converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunListArchives(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StepRunListArchivesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunListArchives(ctx, stepRun, params)
	return err
}

// StepRunListEvents converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunListEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StepRunListEventsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunListEvents(ctx, stepRun, params)
	return err
}

// LogLineList converts echo context to params.
func (w *ServerInterfaceWrapper) LogLineList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LogLineListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "levels" -------------

	err = runtime.BindQueryParameter("form", true, false, "levels", ctx.QueryParams(), &params.Levels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter levels: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "orderByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByField", ctx.QueryParams(), &params.OrderByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByField: %s", err))
	}

	// ------------- Optional query parameter "orderByDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByDirection", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByDirection: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogLineList(ctx, stepRun, params)
	return err
}

// TenantCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TenantCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantCreate(ctx)
	return err
}

// TenantGet converts echo context to params.
func (w *ServerInterfaceWrapper) TenantGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantGet(ctx, tenant)
	return err
}

// TenantUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TenantUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantUpdate(ctx, tenant)
	return err
}

// AlertEmailGroupList converts echo context to params.
func (w *ServerInterfaceWrapper) AlertEmailGroupList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AlertEmailGroupList(ctx, tenant)
	return err
}

// AlertEmailGroupCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AlertEmailGroupCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AlertEmailGroupCreate(ctx, tenant)
	return err
}

// TenantAlertingSettingsGet converts echo context to params.
func (w *ServerInterfaceWrapper) TenantAlertingSettingsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantAlertingSettingsGet(ctx, tenant)
	return err
}

// ApiTokenList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiTokenList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiTokenList(ctx, tenant)
	return err
}

// ApiTokenCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiTokenCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiTokenCreate(ctx, tenant)
	return err
}

// EventList converts echo context to params.
func (w *ServerInterfaceWrapper) EventList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EventListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "keys" -------------

	err = runtime.BindQueryParameter("form", true, false, "keys", ctx.QueryParams(), &params.Keys)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keys: %s", err))
	}

	// ------------- Optional query parameter "workflows" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflows", ctx.QueryParams(), &params.Workflows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflows: %s", err))
	}

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", ctx.QueryParams(), &params.Statuses)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter statuses: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "orderByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByField", ctx.QueryParams(), &params.OrderByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByField: %s", err))
	}

	// ------------- Optional query parameter "orderByDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByDirection", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByDirection: %s", err))
	}

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additionalMetadata: %s", err))
	}

	// ------------- Optional query parameter "eventIds" -------------

	err = runtime.BindQueryParameter("form", true, false, "eventIds", ctx.QueryParams(), &params.EventIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventIds: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventList(ctx, tenant, params)
	return err
}

// EventCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EventCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventCreate(ctx, tenant)
	return err
}

// EventCreateBulk converts echo context to params.
func (w *ServerInterfaceWrapper) EventCreateBulk(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventCreateBulk(ctx, tenant)
	return err
}

// EventUpdateCancel converts echo context to params.
func (w *ServerInterfaceWrapper) EventUpdateCancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventUpdateCancel(ctx, tenant)
	return err
}

// EventKeyList converts echo context to params.
func (w *ServerInterfaceWrapper) EventKeyList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventKeyList(ctx, tenant)
	return err
}

// EventUpdateReplay converts echo context to params.
func (w *ServerInterfaceWrapper) EventUpdateReplay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventUpdateReplay(ctx, tenant)
	return err
}

// TenantInviteList converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteList(ctx, tenant)
	return err
}

// TenantInviteCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteCreate(ctx, tenant)
	return err
}

// TenantInviteDelete converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "tenant-invite" -------------
	var tenantInvite openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant-invite", runtime.ParamLocationPath, ctx.Param("tenant-invite"), &tenantInvite)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant-invite: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteDelete(ctx, tenant, tenantInvite)
	return err
}

// TenantInviteUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "tenant-invite" -------------
	var tenantInvite openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant-invite", runtime.ParamLocationPath, ctx.Param("tenant-invite"), &tenantInvite)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant-invite: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteUpdate(ctx, tenant, tenantInvite)
	return err
}

// TenantMemberList converts echo context to params.
func (w *ServerInterfaceWrapper) TenantMemberList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantMemberList(ctx, tenant)
	return err
}

// TenantMemberDelete converts echo context to params.
func (w *ServerInterfaceWrapper) TenantMemberDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "member" -------------
	var member openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "member", runtime.ParamLocationPath, ctx.Param("member"), &member)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter member: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantMemberDelete(ctx, tenant, member)
	return err
}

// TenantGetQueueMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) TenantGetQueueMetrics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TenantGetQueueMetricsParams
	// ------------- Optional query parameter "workflows" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflows", ctx.QueryParams(), &params.Workflows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflows: %s", err))
	}

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additionalMetadata: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantGetQueueMetrics(ctx, tenant, params)
	return err
}

// RateLimitList converts echo context to params.
func (w *ServerInterfaceWrapper) RateLimitList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RateLimitListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "orderByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByField", ctx.QueryParams(), &params.OrderByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByField: %s", err))
	}

	// ------------- Optional query parameter "orderByDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByDirection", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByDirection: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RateLimitList(ctx, tenant, params)
	return err
}

// TenantResourcePolicyGet converts echo context to params.
func (w *ServerInterfaceWrapper) TenantResourcePolicyGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantResourcePolicyGet(ctx, tenant)
	return err
}

// SlackWebhookList converts echo context to params.
func (w *ServerInterfaceWrapper) SlackWebhookList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SlackWebhookList(ctx, tenant)
	return err
}

// UserUpdateSlackOauthStart converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateSlackOauthStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateSlackOauthStart(ctx, tenant)
	return err
}

// SnsList converts echo context to params.
func (w *ServerInterfaceWrapper) SnsList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SnsList(ctx, tenant)
	return err
}

// SnsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) SnsCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SnsCreate(ctx, tenant)
	return err
}

// TenantGetStepRunQueueMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) TenantGetStepRunQueueMetrics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantGetStepRunQueueMetrics(ctx, tenant)
	return err
}

// StepRunGet converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunGet(ctx, tenant, stepRun)
	return err
}

// StepRunUpdateCancel converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunUpdateCancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunUpdateCancel(ctx, tenant, stepRun)
	return err
}

// StepRunUpdateRerun converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunUpdateRerun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunUpdateRerun(ctx, tenant, stepRun)
	return err
}

// StepRunGetSchema converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunGetSchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunGetSchema(ctx, tenant, stepRun)
	return err
}

// WebhookList converts echo context to params.
func (w *ServerInterfaceWrapper) WebhookList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebhookList(ctx, tenant)
	return err
}

// WebhookCreate converts echo context to params.
func (w *ServerInterfaceWrapper) WebhookCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebhookCreate(ctx, tenant)
	return err
}

// WorkerList converts echo context to params.
func (w *ServerInterfaceWrapper) WorkerList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkerList(ctx, tenant)
	return err
}

// WorkflowRunUpdateReplay converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunUpdateReplay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunUpdateReplay(ctx, tenant)
	return err
}

// WorkflowRunGet converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "workflow-run" -------------
	var workflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow-run", runtime.ParamLocationPath, ctx.Param("workflow-run"), &workflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunGet(ctx, tenant, workflowRun)
	return err
}

// WorkflowRunGetInput converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunGetInput(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "workflow-run" -------------
	var workflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow-run", runtime.ParamLocationPath, ctx.Param("workflow-run"), &workflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunGetInput(ctx, tenant, workflowRun)
	return err
}

// WorkflowRunGetShape converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunGetShape(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "workflow-run" -------------
	var workflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow-run", runtime.ParamLocationPath, ctx.Param("workflow-run"), &workflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunGetShape(ctx, tenant, workflowRun)
	return err
}

// WorkflowRunListStepRunEvents converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunListStepRunEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "workflow-run" -------------
	var workflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow-run", runtime.ParamLocationPath, ctx.Param("workflow-run"), &workflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowRunListStepRunEventsParams
	// ------------- Optional query parameter "lastId" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastId", ctx.QueryParams(), &params.LastId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lastId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunListStepRunEvents(ctx, tenant, workflowRun, params)
	return err
}

// WorkflowList converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowList(ctx, tenant, params)
	return err
}

// WorkflowRunCancel converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunCancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunCancel(ctx, tenant)
	return err
}

// CronWorkflowList converts echo context to params.
func (w *ServerInterfaceWrapper) CronWorkflowList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CronWorkflowListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "workflowId" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowId", ctx.QueryParams(), &params.WorkflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflowId: %s", err))
	}

	// ------------- Optional query parameter "workflowName" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowName", ctx.QueryParams(), &params.WorkflowName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflowName: %s", err))
	}

	// ------------- Optional query parameter "cronName" -------------

	err = runtime.BindQueryParameter("form", true, false, "cronName", ctx.QueryParams(), &params.CronName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cronName: %s", err))
	}

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additionalMetadata: %s", err))
	}

	// ------------- Optional query parameter "orderByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByField", ctx.QueryParams(), &params.OrderByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByField: %s", err))
	}

	// ------------- Optional query parameter "orderByDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByDirection", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByDirection: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CronWorkflowList(ctx, tenant, params)
	return err
}

// WorkflowCronDelete converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowCronDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "cron-workflow" -------------
	var cronWorkflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "cron-workflow", runtime.ParamLocationPath, ctx.Param("cron-workflow"), &cronWorkflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cron-workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowCronDelete(ctx, tenant, cronWorkflow)
	return err
}

// WorkflowCronGet converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowCronGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "cron-workflow" -------------
	var cronWorkflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "cron-workflow", runtime.ParamLocationPath, ctx.Param("cron-workflow"), &cronWorkflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cron-workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowCronGet(ctx, tenant, cronWorkflow)
	return err
}

// WorkflowRunList converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowRunListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "eventId" -------------

	err = runtime.BindQueryParameter("form", true, false, "eventId", ctx.QueryParams(), &params.EventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// ------------- Optional query parameter "workflowId" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowId", ctx.QueryParams(), &params.WorkflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflowId: %s", err))
	}

	// ------------- Optional query parameter "parentWorkflowRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "parentWorkflowRunId", ctx.QueryParams(), &params.ParentWorkflowRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parentWorkflowRunId: %s", err))
	}

	// ------------- Optional query parameter "parentStepRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "parentStepRunId", ctx.QueryParams(), &params.ParentStepRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parentStepRunId: %s", err))
	}

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", ctx.QueryParams(), &params.Statuses)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter statuses: %s", err))
	}

	// ------------- Optional query parameter "kinds" -------------

	err = runtime.BindQueryParameter("form", true, false, "kinds", ctx.QueryParams(), &params.Kinds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kinds: %s", err))
	}

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additionalMetadata: %s", err))
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", ctx.QueryParams(), &params.CreatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdAfter: %s", err))
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", ctx.QueryParams(), &params.CreatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdBefore: %s", err))
	}

	// ------------- Optional query parameter "finishedAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "finishedAfter", ctx.QueryParams(), &params.FinishedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finishedAfter: %s", err))
	}

	// ------------- Optional query parameter "finishedBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "finishedBefore", ctx.QueryParams(), &params.FinishedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finishedBefore: %s", err))
	}

	// ------------- Optional query parameter "orderByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByField", ctx.QueryParams(), &params.OrderByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByField: %s", err))
	}

	// ------------- Optional query parameter "orderByDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByDirection", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByDirection: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunList(ctx, tenant, params)
	return err
}

// WorkflowRunGetMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunGetMetrics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowRunGetMetricsParams
	// ------------- Optional query parameter "eventId" -------------

	err = runtime.BindQueryParameter("form", true, false, "eventId", ctx.QueryParams(), &params.EventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// ------------- Optional query parameter "workflowId" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowId", ctx.QueryParams(), &params.WorkflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflowId: %s", err))
	}

	// ------------- Optional query parameter "parentWorkflowRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "parentWorkflowRunId", ctx.QueryParams(), &params.ParentWorkflowRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parentWorkflowRunId: %s", err))
	}

	// ------------- Optional query parameter "parentStepRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "parentStepRunId", ctx.QueryParams(), &params.ParentStepRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parentStepRunId: %s", err))
	}

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additionalMetadata: %s", err))
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", ctx.QueryParams(), &params.CreatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdAfter: %s", err))
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", ctx.QueryParams(), &params.CreatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdBefore: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunGetMetrics(ctx, tenant, params)
	return err
}

// WorkflowScheduledList converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowScheduledList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowScheduledListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "orderByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByField", ctx.QueryParams(), &params.OrderByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByField: %s", err))
	}

	// ------------- Optional query parameter "orderByDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByDirection", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByDirection: %s", err))
	}

	// ------------- Optional query parameter "workflowId" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowId", ctx.QueryParams(), &params.WorkflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflowId: %s", err))
	}

	// ------------- Optional query parameter "parentWorkflowRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "parentWorkflowRunId", ctx.QueryParams(), &params.ParentWorkflowRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parentWorkflowRunId: %s", err))
	}

	// ------------- Optional query parameter "parentStepRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "parentStepRunId", ctx.QueryParams(), &params.ParentStepRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parentStepRunId: %s", err))
	}

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additionalMetadata: %s", err))
	}

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", ctx.QueryParams(), &params.Statuses)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter statuses: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowScheduledList(ctx, tenant, params)
	return err
}

// WorkflowScheduledDelete converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowScheduledDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "scheduled-workflow-run" -------------
	var scheduledWorkflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scheduled-workflow-run", runtime.ParamLocationPath, ctx.Param("scheduled-workflow-run"), &scheduledWorkflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduled-workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowScheduledDelete(ctx, tenant, scheduledWorkflowRun)
	return err
}

// WorkflowScheduledGet converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowScheduledGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "scheduled-workflow-run" -------------
	var scheduledWorkflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scheduled-workflow-run", runtime.ParamLocationPath, ctx.Param("scheduled-workflow-run"), &scheduledWorkflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduled-workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowScheduledGet(ctx, tenant, scheduledWorkflowRun)
	return err
}

// CronWorkflowTriggerCreate converts echo context to params.
func (w *ServerInterfaceWrapper) CronWorkflowTriggerCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "workflow" -------------
	var workflow string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CronWorkflowTriggerCreate(ctx, tenant, workflow)
	return err
}

// ScheduledWorkflowRunCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduledWorkflowRunCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "workflow" -------------
	var workflow string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduledWorkflowRunCreate(ctx, tenant, workflow)
	return err
}

// WorkflowGetWorkersCount converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowGetWorkersCount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowGetWorkersCount(ctx, tenant, workflow)
	return err
}

// UserGetCurrent converts echo context to params.
func (w *ServerInterfaceWrapper) UserGetCurrent(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserGetCurrent(ctx)
	return err
}

// UserUpdateGithubOauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateGithubOauthCallback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateGithubOauthCallback(ctx)
	return err
}

// UserUpdateGithubOauthStart converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateGithubOauthStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateGithubOauthStart(ctx)
	return err
}

// UserUpdateGoogleOauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateGoogleOauthCallback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateGoogleOauthCallback(ctx)
	return err
}

// UserUpdateGoogleOauthStart converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateGoogleOauthStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateGoogleOauthStart(ctx)
	return err
}

// UserListTenantInvites converts echo context to params.
func (w *ServerInterfaceWrapper) UserListTenantInvites(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserListTenantInvites(ctx)
	return err
}

// TenantInviteAccept converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteAccept(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteAccept(ctx)
	return err
}

// TenantInviteReject converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteReject(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteReject(ctx)
	return err
}

// UserUpdateLogin converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateLogin(ctx)
	return err
}

// UserUpdateLogout converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateLogout(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateLogout(ctx)
	return err
}

// TenantMembershipsList converts echo context to params.
func (w *ServerInterfaceWrapper) TenantMembershipsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantMembershipsList(ctx)
	return err
}

// UserUpdatePassword converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdatePassword(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdatePassword(ctx)
	return err
}

// UserCreate converts echo context to params.
func (w *ServerInterfaceWrapper) UserCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserCreate(ctx)
	return err
}

// UserUpdateSlackOauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateSlackOauthCallback(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateSlackOauthCallback(ctx)
	return err
}

// InfoGetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) InfoGetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InfoGetVersion(ctx)
	return err
}

// WebhookDelete converts echo context to params.
func (w *ServerInterfaceWrapper) WebhookDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "webhook" -------------
	var webhook openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "webhook", runtime.ParamLocationPath, ctx.Param("webhook"), &webhook)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter webhook: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebhookDelete(ctx, webhook)
	return err
}

// WebhookRequestsList converts echo context to params.
func (w *ServerInterfaceWrapper) WebhookRequestsList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "webhook" -------------
	var webhook openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "webhook", runtime.ParamLocationPath, ctx.Param("webhook"), &webhook)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter webhook: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebhookRequestsList(ctx, webhook)
	return err
}

// WorkerGet converts echo context to params.
func (w *ServerInterfaceWrapper) WorkerGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "worker" -------------
	var worker openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "worker", runtime.ParamLocationPath, ctx.Param("worker"), &worker)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter worker: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkerGet(ctx, worker)
	return err
}

// WorkerUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) WorkerUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "worker" -------------
	var worker openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "worker", runtime.ParamLocationPath, ctx.Param("worker"), &worker)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter worker: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkerUpdate(ctx, worker)
	return err
}

// WorkflowDelete converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowDelete(ctx, workflow)
	return err
}

// WorkflowGet converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowGet(ctx, workflow)
	return err
}

// WorkflowUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowUpdate(ctx, workflow)
	return err
}

// WorkflowGetMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowGetMetrics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowGetMetricsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "groupKey" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupKey", ctx.QueryParams(), &params.GroupKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupKey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowGetMetrics(ctx, workflow, params)
	return err
}

// WorkflowRunCreate converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowRunCreateParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunCreate(ctx, workflow, params)
	return err
}

// WorkflowVersionGet converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowVersionGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowVersionGetParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowVersionGet(ctx, workflow, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/live", wrapper.LivenessGet)
	router.GET(baseURL+"/api/ready", wrapper.ReadinessGet)
	router.DELETE(baseURL+"/api/v1/alerting-email-groups/:alert-email-group", wrapper.AlertEmailGroupDelete)
	router.PATCH(baseURL+"/api/v1/alerting-email-groups/:alert-email-group", wrapper.AlertEmailGroupUpdate)
	router.POST(baseURL+"/api/v1/api-tokens/:api-token", wrapper.ApiTokenUpdateRevoke)
	router.GET(baseURL+"/api/v1/cloud/metadata", wrapper.CloudMetadataGet)
	router.GET(baseURL+"/api/v1/events/:event", wrapper.EventGet)
	router.GET(baseURL+"/api/v1/events/:event/data", wrapper.EventDataGet)
	router.GET(baseURL+"/api/v1/meta", wrapper.MetadataGet)
	router.GET(baseURL+"/api/v1/meta/integrations", wrapper.MetadataListIntegrations)
	router.POST(baseURL+"/api/v1/monitoring/:tenant/probe", wrapper.MonitoringPostRunProbe)
	router.DELETE(baseURL+"/api/v1/slack/:slack", wrapper.SlackWebhookDelete)
	router.DELETE(baseURL+"/api/v1/sns/:sns", wrapper.SnsDelete)
	router.POST(baseURL+"/api/v1/sns/:tenant/:event", wrapper.SnsUpdate)
	router.GET(baseURL+"/api/v1/stable/dags/tasks", wrapper.V1DagListTasks)
	router.GET(baseURL+"/api/v1/stable/tasks/:task", wrapper.V1TaskGet)
	router.GET(baseURL+"/api/v1/stable/tasks/:task/logs", wrapper.V1LogLineList)
	router.GET(baseURL+"/api/v1/stable/tasks/:task/task-events", wrapper.V1TaskEventList)
	router.GET(baseURL+"/api/v1/stable/tenants/:tenant/events", wrapper.V1EventList)
	router.GET(baseURL+"/api/v1/stable/tenants/:tenant/filters", wrapper.V1FilterList)
	router.POST(baseURL+"/api/v1/stable/tenants/:tenant/filters", wrapper.V1FilterCreate)
	router.DELETE(baseURL+"/api/v1/stable/tenants/:tenant/filters/:v1-filter", wrapper.V1FilterDelete)
	router.GET(baseURL+"/api/v1/stable/tenants/:tenant/filters/:v1-filter", wrapper.V1FilterGet)
	router.PATCH(baseURL+"/api/v1/stable/tenants/:tenant/filters/:v1-filter", wrapper.V1FilterUpdate)
	router.GET(baseURL+"/api/v1/stable/tenants/:tenant/task-metrics", wrapper.V1TaskListStatusMetrics)
	router.GET(baseURL+"/api/v1/stable/tenants/:tenant/task-point-metrics", wrapper.V1TaskGetPointMetrics)
	router.POST(baseURL+"/api/v1/stable/tenants/:tenant/tasks/cancel", wrapper.V1TaskCancel)
	router.POST(baseURL+"/api/v1/stable/tenants/:tenant/tasks/replay", wrapper.V1TaskReplay)
	router.GET(baseURL+"/api/v1/stable/tenants/:tenant/workflow-runs", wrapper.V1WorkflowRunList)
	router.GET(baseURL+"/api/v1/stable/tenants/:tenant/workflow-runs/display-names", wrapper.V1WorkflowRunDisplayNamesList)
	router.POST(baseURL+"/api/v1/stable/tenants/:tenant/workflow-runs/trigger", wrapper.V1WorkflowRunCreate)
	router.GET(baseURL+"/api/v1/stable/workflow-runs/:v1-workflow-run", wrapper.V1WorkflowRunGet)
	router.GET(baseURL+"/api/v1/stable/workflow-runs/:v1-workflow-run/status", wrapper.V1WorkflowRunGetStatus)
	router.GET(baseURL+"/api/v1/stable/workflow-runs/:v1-workflow-run/task-events", wrapper.V1WorkflowRunTaskEventsList)
	router.GET(baseURL+"/api/v1/stable/workflow-runs/:v1-workflow-run/task-timings", wrapper.V1WorkflowRunGetTimings)
	router.GET(baseURL+"/api/v1/step-runs/:step-run/archives", wrapper.StepRunListArchives)
	router.GET(baseURL+"/api/v1/step-runs/:step-run/events", wrapper.StepRunListEvents)
	router.GET(baseURL+"/api/v1/step-runs/:step-run/logs", wrapper.LogLineList)
	router.POST(baseURL+"/api/v1/tenants", wrapper.TenantCreate)
	router.GET(baseURL+"/api/v1/tenants/:tenant", wrapper.TenantGet)
	router.PATCH(baseURL+"/api/v1/tenants/:tenant", wrapper.TenantUpdate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/alerting-email-groups", wrapper.AlertEmailGroupList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/alerting-email-groups", wrapper.AlertEmailGroupCreate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/alerting/settings", wrapper.TenantAlertingSettingsGet)
	router.GET(baseURL+"/api/v1/tenants/:tenant/api-tokens", wrapper.ApiTokenList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/api-tokens", wrapper.ApiTokenCreate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/events", wrapper.EventList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/events", wrapper.EventCreate)
	router.POST(baseURL+"/api/v1/tenants/:tenant/events/bulk", wrapper.EventCreateBulk)
	router.POST(baseURL+"/api/v1/tenants/:tenant/events/cancel", wrapper.EventUpdateCancel)
	router.GET(baseURL+"/api/v1/tenants/:tenant/events/keys", wrapper.EventKeyList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/events/replay", wrapper.EventUpdateReplay)
	router.GET(baseURL+"/api/v1/tenants/:tenant/invites", wrapper.TenantInviteList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/invites", wrapper.TenantInviteCreate)
	router.DELETE(baseURL+"/api/v1/tenants/:tenant/invites/:tenant-invite", wrapper.TenantInviteDelete)
	router.PATCH(baseURL+"/api/v1/tenants/:tenant/invites/:tenant-invite", wrapper.TenantInviteUpdate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/members", wrapper.TenantMemberList)
	router.DELETE(baseURL+"/api/v1/tenants/:tenant/members/:member", wrapper.TenantMemberDelete)
	router.GET(baseURL+"/api/v1/tenants/:tenant/queue-metrics", wrapper.TenantGetQueueMetrics)
	router.GET(baseURL+"/api/v1/tenants/:tenant/rate-limits", wrapper.RateLimitList)
	router.GET(baseURL+"/api/v1/tenants/:tenant/resource-policy", wrapper.TenantResourcePolicyGet)
	router.GET(baseURL+"/api/v1/tenants/:tenant/slack", wrapper.SlackWebhookList)
	router.GET(baseURL+"/api/v1/tenants/:tenant/slack/start", wrapper.UserUpdateSlackOauthStart)
	router.GET(baseURL+"/api/v1/tenants/:tenant/sns", wrapper.SnsList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/sns", wrapper.SnsCreate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/step-run-queue-metrics", wrapper.TenantGetStepRunQueueMetrics)
	router.GET(baseURL+"/api/v1/tenants/:tenant/step-runs/:step-run", wrapper.StepRunGet)
	router.POST(baseURL+"/api/v1/tenants/:tenant/step-runs/:step-run/cancel", wrapper.StepRunUpdateCancel)
	router.POST(baseURL+"/api/v1/tenants/:tenant/step-runs/:step-run/rerun", wrapper.StepRunUpdateRerun)
	router.GET(baseURL+"/api/v1/tenants/:tenant/step-runs/:step-run/schema", wrapper.StepRunGetSchema)
	router.GET(baseURL+"/api/v1/tenants/:tenant/webhook-workers", wrapper.WebhookList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/webhook-workers", wrapper.WebhookCreate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/worker", wrapper.WorkerList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/workflow-runs/replay", wrapper.WorkflowRunUpdateReplay)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflow-runs/:workflow-run", wrapper.WorkflowRunGet)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflow-runs/:workflow-run/input", wrapper.WorkflowRunGetInput)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflow-runs/:workflow-run/shape", wrapper.WorkflowRunGetShape)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflow-runs/:workflow-run/step-run-events", wrapper.WorkflowRunListStepRunEvents)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows", wrapper.WorkflowList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/workflows/cancel", wrapper.WorkflowRunCancel)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows/crons", wrapper.CronWorkflowList)
	router.DELETE(baseURL+"/api/v1/tenants/:tenant/workflows/crons/:cron-workflow", wrapper.WorkflowCronDelete)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows/crons/:cron-workflow", wrapper.WorkflowCronGet)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows/runs", wrapper.WorkflowRunList)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows/runs/metrics", wrapper.WorkflowRunGetMetrics)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows/scheduled", wrapper.WorkflowScheduledList)
	router.DELETE(baseURL+"/api/v1/tenants/:tenant/workflows/scheduled/:scheduled-workflow-run", wrapper.WorkflowScheduledDelete)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows/scheduled/:scheduled-workflow-run", wrapper.WorkflowScheduledGet)
	router.POST(baseURL+"/api/v1/tenants/:tenant/workflows/:workflow/crons", wrapper.CronWorkflowTriggerCreate)
	router.POST(baseURL+"/api/v1/tenants/:tenant/workflows/:workflow/scheduled", wrapper.ScheduledWorkflowRunCreate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows/:workflow/worker-count", wrapper.WorkflowGetWorkersCount)
	router.GET(baseURL+"/api/v1/users/current", wrapper.UserGetCurrent)
	router.GET(baseURL+"/api/v1/users/github/callback", wrapper.UserUpdateGithubOauthCallback)
	router.GET(baseURL+"/api/v1/users/github/start", wrapper.UserUpdateGithubOauthStart)
	router.GET(baseURL+"/api/v1/users/google/callback", wrapper.UserUpdateGoogleOauthCallback)
	router.GET(baseURL+"/api/v1/users/google/start", wrapper.UserUpdateGoogleOauthStart)
	router.GET(baseURL+"/api/v1/users/invites", wrapper.UserListTenantInvites)
	router.POST(baseURL+"/api/v1/users/invites/accept", wrapper.TenantInviteAccept)
	router.POST(baseURL+"/api/v1/users/invites/reject", wrapper.TenantInviteReject)
	router.POST(baseURL+"/api/v1/users/login", wrapper.UserUpdateLogin)
	router.POST(baseURL+"/api/v1/users/logout", wrapper.UserUpdateLogout)
	router.GET(baseURL+"/api/v1/users/memberships", wrapper.TenantMembershipsList)
	router.POST(baseURL+"/api/v1/users/password", wrapper.UserUpdatePassword)
	router.POST(baseURL+"/api/v1/users/register", wrapper.UserCreate)
	router.GET(baseURL+"/api/v1/users/slack/callback", wrapper.UserUpdateSlackOauthCallback)
	router.GET(baseURL+"/api/v1/version", wrapper.InfoGetVersion)
	router.DELETE(baseURL+"/api/v1/webhook-workers/:webhook", wrapper.WebhookDelete)
	router.GET(baseURL+"/api/v1/webhook-workers/:webhook/requests", wrapper.WebhookRequestsList)
	router.GET(baseURL+"/api/v1/workers/:worker", wrapper.WorkerGet)
	router.PATCH(baseURL+"/api/v1/workers/:worker", wrapper.WorkerUpdate)
	router.DELETE(baseURL+"/api/v1/workflows/:workflow", wrapper.WorkflowDelete)
	router.GET(baseURL+"/api/v1/workflows/:workflow", wrapper.WorkflowGet)
	router.PATCH(baseURL+"/api/v1/workflows/:workflow", wrapper.WorkflowUpdate)
	router.GET(baseURL+"/api/v1/workflows/:workflow/metrics", wrapper.WorkflowGetMetrics)
	router.POST(baseURL+"/api/v1/workflows/:workflow/trigger", wrapper.WorkflowRunCreate)
	router.GET(baseURL+"/api/v1/workflows/:workflow/versions", wrapper.WorkflowVersionGet)

}

type LivenessGetRequestObject struct {
}

type LivenessGetResponseObject interface {
	VisitLivenessGetResponse(w http.ResponseWriter) error
}

type LivenessGet200Response struct {
}

func (response LivenessGet200Response) VisitLivenessGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LivenessGet500Response struct {
}

func (response LivenessGet500Response) VisitLivenessGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ReadinessGetRequestObject struct {
}

type ReadinessGetResponseObject interface {
	VisitReadinessGetResponse(w http.ResponseWriter) error
}

type ReadinessGet200Response struct {
}

func (response ReadinessGet200Response) VisitReadinessGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReadinessGet500Response struct {
}

func (response ReadinessGet500Response) VisitReadinessGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AlertEmailGroupDeleteRequestObject struct {
	AlertEmailGroup openapi_types.UUID `json:"alert-email-group"`
}

type AlertEmailGroupDeleteResponseObject interface {
	VisitAlertEmailGroupDeleteResponse(w http.ResponseWriter) error
}

type AlertEmailGroupDelete204Response struct {
}

func (response AlertEmailGroupDelete204Response) VisitAlertEmailGroupDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AlertEmailGroupDelete400JSONResponse APIErrors

func (response AlertEmailGroupDelete400JSONResponse) VisitAlertEmailGroupDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupDelete403JSONResponse APIError

func (response AlertEmailGroupDelete403JSONResponse) VisitAlertEmailGroupDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupUpdateRequestObject struct {
	AlertEmailGroup openapi_types.UUID `json:"alert-email-group"`
	Body            *AlertEmailGroupUpdateJSONRequestBody
}

type AlertEmailGroupUpdateResponseObject interface {
	VisitAlertEmailGroupUpdateResponse(w http.ResponseWriter) error
}

type AlertEmailGroupUpdate200JSONResponse TenantAlertEmailGroup

func (response AlertEmailGroupUpdate200JSONResponse) VisitAlertEmailGroupUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupUpdate400JSONResponse APIErrors

func (response AlertEmailGroupUpdate400JSONResponse) VisitAlertEmailGroupUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupUpdate403JSONResponse APIError

func (response AlertEmailGroupUpdate403JSONResponse) VisitAlertEmailGroupUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenUpdateRevokeRequestObject struct {
	ApiToken openapi_types.UUID `json:"api-token"`
}

type ApiTokenUpdateRevokeResponseObject interface {
	VisitApiTokenUpdateRevokeResponse(w http.ResponseWriter) error
}

type ApiTokenUpdateRevoke204Response struct {
}

func (response ApiTokenUpdateRevoke204Response) VisitApiTokenUpdateRevokeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ApiTokenUpdateRevoke400JSONResponse APIErrors

func (response ApiTokenUpdateRevoke400JSONResponse) VisitApiTokenUpdateRevokeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenUpdateRevoke403JSONResponse APIErrors

func (response ApiTokenUpdateRevoke403JSONResponse) VisitApiTokenUpdateRevokeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CloudMetadataGetRequestObject struct {
}

type CloudMetadataGetResponseObject interface {
	VisitCloudMetadataGetResponse(w http.ResponseWriter) error
}

type CloudMetadataGet200JSONResponse APIErrors

func (response CloudMetadataGet200JSONResponse) VisitCloudMetadataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CloudMetadataGet400JSONResponse APIErrors

func (response CloudMetadataGet400JSONResponse) VisitCloudMetadataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventGetRequestObject struct {
	Event openapi_types.UUID `json:"event"`
}

type EventGetResponseObject interface {
	VisitEventGetResponse(w http.ResponseWriter) error
}

type EventGet200JSONResponse Event

func (response EventGet200JSONResponse) VisitEventGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventGet400JSONResponse APIErrors

func (response EventGet400JSONResponse) VisitEventGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventGet403JSONResponse APIErrors

func (response EventGet403JSONResponse) VisitEventGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventDataGetRequestObject struct {
	Event openapi_types.UUID `json:"event"`
}

type EventDataGetResponseObject interface {
	VisitEventDataGetResponse(w http.ResponseWriter) error
}

type EventDataGet200JSONResponse EventData

func (response EventDataGet200JSONResponse) VisitEventDataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventDataGet400JSONResponse APIErrors

func (response EventDataGet400JSONResponse) VisitEventDataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventDataGet403JSONResponse APIErrors

func (response EventDataGet403JSONResponse) VisitEventDataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MetadataGetRequestObject struct {
}

type MetadataGetResponseObject interface {
	VisitMetadataGetResponse(w http.ResponseWriter) error
}

type MetadataGet200JSONResponse APIMeta

func (response MetadataGet200JSONResponse) VisitMetadataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MetadataGet400JSONResponse APIErrors

func (response MetadataGet400JSONResponse) VisitMetadataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type MetadataListIntegrationsRequestObject struct {
}

type MetadataListIntegrationsResponseObject interface {
	VisitMetadataListIntegrationsResponse(w http.ResponseWriter) error
}

type MetadataListIntegrations200JSONResponse ListAPIMetaIntegration

func (response MetadataListIntegrations200JSONResponse) VisitMetadataListIntegrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MetadataListIntegrations400JSONResponse APIErrors

func (response MetadataListIntegrations400JSONResponse) VisitMetadataListIntegrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type MonitoringPostRunProbeRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type MonitoringPostRunProbeResponseObject interface {
	VisitMonitoringPostRunProbeResponse(w http.ResponseWriter) error
}

type MonitoringPostRunProbe200Response struct {
}

func (response MonitoringPostRunProbe200Response) VisitMonitoringPostRunProbeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MonitoringPostRunProbe403JSONResponse APIErrors

func (response MonitoringPostRunProbe403JSONResponse) VisitMonitoringPostRunProbeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookDeleteRequestObject struct {
	Slack openapi_types.UUID `json:"slack"`
}

type SlackWebhookDeleteResponseObject interface {
	VisitSlackWebhookDeleteResponse(w http.ResponseWriter) error
}

type SlackWebhookDelete204Response struct {
}

func (response SlackWebhookDelete204Response) VisitSlackWebhookDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SlackWebhookDelete400JSONResponse APIErrors

func (response SlackWebhookDelete400JSONResponse) VisitSlackWebhookDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookDelete401JSONResponse APIErrors

func (response SlackWebhookDelete401JSONResponse) VisitSlackWebhookDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookDelete405JSONResponse APIErrors

func (response SlackWebhookDelete405JSONResponse) VisitSlackWebhookDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type SnsDeleteRequestObject struct {
	Sns openapi_types.UUID `json:"sns"`
}

type SnsDeleteResponseObject interface {
	VisitSnsDeleteResponse(w http.ResponseWriter) error
}

type SnsDelete204Response struct {
}

func (response SnsDelete204Response) VisitSnsDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SnsDelete400JSONResponse APIErrors

func (response SnsDelete400JSONResponse) VisitSnsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SnsDelete401JSONResponse APIErrors

func (response SnsDelete401JSONResponse) VisitSnsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SnsDelete405JSONResponse APIErrors

func (response SnsDelete405JSONResponse) VisitSnsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type SnsUpdateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Event  string             `json:"event"`
}

type SnsUpdateResponseObject interface {
	VisitSnsUpdateResponse(w http.ResponseWriter) error
}

type SnsUpdate200Response struct {
}

func (response SnsUpdate200Response) VisitSnsUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SnsUpdate400JSONResponse APIErrors

func (response SnsUpdate400JSONResponse) VisitSnsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SnsUpdate401JSONResponse APIErrors

func (response SnsUpdate401JSONResponse) VisitSnsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SnsUpdate405JSONResponse APIErrors

func (response SnsUpdate405JSONResponse) VisitSnsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type V1DagListTasksRequestObject struct {
	Params V1DagListTasksParams
}

type V1DagListTasksResponseObject interface {
	VisitV1DagListTasksResponse(w http.ResponseWriter) error
}

type V1DagListTasks200JSONResponse []V1DagChildren

func (response V1DagListTasks200JSONResponse) VisitV1DagListTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1DagListTasks400JSONResponse APIErrors

func (response V1DagListTasks400JSONResponse) VisitV1DagListTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1DagListTasks403JSONResponse APIErrors

func (response V1DagListTasks403JSONResponse) VisitV1DagListTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1DagListTasks501JSONResponse APIErrors

func (response V1DagListTasks501JSONResponse) VisitV1DagListTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskGetRequestObject struct {
	Task   openapi_types.UUID `json:"task"`
	Params V1TaskGetParams
}

type V1TaskGetResponseObject interface {
	VisitV1TaskGetResponse(w http.ResponseWriter) error
}

type V1TaskGet200JSONResponse V1TaskSummary

func (response V1TaskGet200JSONResponse) VisitV1TaskGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskGet400JSONResponse APIErrors

func (response V1TaskGet400JSONResponse) VisitV1TaskGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskGet403JSONResponse APIErrors

func (response V1TaskGet403JSONResponse) VisitV1TaskGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskGet404JSONResponse APIErrors

func (response V1TaskGet404JSONResponse) VisitV1TaskGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskGet501JSONResponse APIErrors

func (response V1TaskGet501JSONResponse) VisitV1TaskGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1LogLineListRequestObject struct {
	Task openapi_types.UUID `json:"task"`
}

type V1LogLineListResponseObject interface {
	VisitV1LogLineListResponse(w http.ResponseWriter) error
}

type V1LogLineList200JSONResponse V1LogLineList

func (response V1LogLineList200JSONResponse) VisitV1LogLineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1LogLineList400JSONResponse APIErrors

func (response V1LogLineList400JSONResponse) VisitV1LogLineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1LogLineList403JSONResponse APIErrors

func (response V1LogLineList403JSONResponse) VisitV1LogLineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskEventListRequestObject struct {
	Task   openapi_types.UUID `json:"task"`
	Params V1TaskEventListParams
}

type V1TaskEventListResponseObject interface {
	VisitV1TaskEventListResponse(w http.ResponseWriter) error
}

type V1TaskEventList200JSONResponse V1TaskEventList

func (response V1TaskEventList200JSONResponse) VisitV1TaskEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskEventList400JSONResponse APIErrors

func (response V1TaskEventList400JSONResponse) VisitV1TaskEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskEventList403JSONResponse APIErrors

func (response V1TaskEventList403JSONResponse) VisitV1TaskEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskEventList404JSONResponse APIErrors

func (response V1TaskEventList404JSONResponse) VisitV1TaskEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskEventList501JSONResponse APIErrors

func (response V1TaskEventList501JSONResponse) VisitV1TaskEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1EventListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params V1EventListParams
}

type V1EventListResponseObject interface {
	VisitV1EventListResponse(w http.ResponseWriter) error
}

type V1EventList200JSONResponse V1EventList

func (response V1EventList200JSONResponse) VisitV1EventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1EventList400JSONResponse APIErrors

func (response V1EventList400JSONResponse) VisitV1EventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1EventList403JSONResponse APIErrors

func (response V1EventList403JSONResponse) VisitV1EventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params V1FilterListParams
}

type V1FilterListResponseObject interface {
	VisitV1FilterListResponse(w http.ResponseWriter) error
}

type V1FilterList200JSONResponse V1FilterList

func (response V1FilterList200JSONResponse) VisitV1FilterListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterList400JSONResponse APIErrors

func (response V1FilterList400JSONResponse) VisitV1FilterListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterList403JSONResponse APIErrors

func (response V1FilterList403JSONResponse) VisitV1FilterListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *V1FilterCreateJSONRequestBody
}

type V1FilterCreateResponseObject interface {
	VisitV1FilterCreateResponse(w http.ResponseWriter) error
}

type V1FilterCreate200JSONResponse V1Filter

func (response V1FilterCreate200JSONResponse) VisitV1FilterCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterCreate400JSONResponse APIErrors

func (response V1FilterCreate400JSONResponse) VisitV1FilterCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterCreate403JSONResponse APIErrors

func (response V1FilterCreate403JSONResponse) VisitV1FilterCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterCreate404JSONResponse APIErrors

func (response V1FilterCreate404JSONResponse) VisitV1FilterCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterDeleteRequestObject struct {
	Tenant   openapi_types.UUID `json:"tenant"`
	V1Filter openapi_types.UUID `json:"v1-filter"`
}

type V1FilterDeleteResponseObject interface {
	VisitV1FilterDeleteResponse(w http.ResponseWriter) error
}

type V1FilterDelete200JSONResponse V1Filter

func (response V1FilterDelete200JSONResponse) VisitV1FilterDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterDelete400JSONResponse APIErrors

func (response V1FilterDelete400JSONResponse) VisitV1FilterDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterDelete403JSONResponse APIErrors

func (response V1FilterDelete403JSONResponse) VisitV1FilterDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterDelete404JSONResponse APIErrors

func (response V1FilterDelete404JSONResponse) VisitV1FilterDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterGetRequestObject struct {
	Tenant   openapi_types.UUID `json:"tenant"`
	V1Filter openapi_types.UUID `json:"v1-filter"`
}

type V1FilterGetResponseObject interface {
	VisitV1FilterGetResponse(w http.ResponseWriter) error
}

type V1FilterGet200JSONResponse V1Filter

func (response V1FilterGet200JSONResponse) VisitV1FilterGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterGet400JSONResponse APIErrors

func (response V1FilterGet400JSONResponse) VisitV1FilterGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterGet403JSONResponse APIErrors

func (response V1FilterGet403JSONResponse) VisitV1FilterGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterUpdateRequestObject struct {
	Tenant   openapi_types.UUID `json:"tenant"`
	V1Filter openapi_types.UUID `json:"v1-filter"`
	Body     *V1FilterUpdateJSONRequestBody
}

type V1FilterUpdateResponseObject interface {
	VisitV1FilterUpdateResponse(w http.ResponseWriter) error
}

type V1FilterUpdate200JSONResponse V1Filter

func (response V1FilterUpdate200JSONResponse) VisitV1FilterUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterUpdate400JSONResponse APIErrors

func (response V1FilterUpdate400JSONResponse) VisitV1FilterUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterUpdate403JSONResponse APIErrors

func (response V1FilterUpdate403JSONResponse) VisitV1FilterUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1FilterUpdate404JSONResponse APIErrors

func (response V1FilterUpdate404JSONResponse) VisitV1FilterUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskListStatusMetricsRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params V1TaskListStatusMetricsParams
}

type V1TaskListStatusMetricsResponseObject interface {
	VisitV1TaskListStatusMetricsResponse(w http.ResponseWriter) error
}

type V1TaskListStatusMetrics200JSONResponse V1TaskRunMetrics

func (response V1TaskListStatusMetrics200JSONResponse) VisitV1TaskListStatusMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskListStatusMetrics400JSONResponse APIErrors

func (response V1TaskListStatusMetrics400JSONResponse) VisitV1TaskListStatusMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskListStatusMetrics403JSONResponse APIErrors

func (response V1TaskListStatusMetrics403JSONResponse) VisitV1TaskListStatusMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskListStatusMetrics501JSONResponse APIErrors

func (response V1TaskListStatusMetrics501JSONResponse) VisitV1TaskListStatusMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskGetPointMetricsRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params V1TaskGetPointMetricsParams
}

type V1TaskGetPointMetricsResponseObject interface {
	VisitV1TaskGetPointMetricsResponse(w http.ResponseWriter) error
}

type V1TaskGetPointMetrics200JSONResponse V1TaskPointMetrics

func (response V1TaskGetPointMetrics200JSONResponse) VisitV1TaskGetPointMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskGetPointMetrics400JSONResponse APIErrors

func (response V1TaskGetPointMetrics400JSONResponse) VisitV1TaskGetPointMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskGetPointMetrics403JSONResponse APIErrors

func (response V1TaskGetPointMetrics403JSONResponse) VisitV1TaskGetPointMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskGetPointMetrics501JSONResponse APIErrors

func (response V1TaskGetPointMetrics501JSONResponse) VisitV1TaskGetPointMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskCancelRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *V1TaskCancelJSONRequestBody
}

type V1TaskCancelResponseObject interface {
	VisitV1TaskCancelResponse(w http.ResponseWriter) error
}

type V1TaskCancel200Response struct {
}

func (response V1TaskCancel200Response) VisitV1TaskCancelResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type V1TaskCancel400JSONResponse APIErrors

func (response V1TaskCancel400JSONResponse) VisitV1TaskCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskCancel403JSONResponse APIErrors

func (response V1TaskCancel403JSONResponse) VisitV1TaskCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskCancel404JSONResponse APIErrors

func (response V1TaskCancel404JSONResponse) VisitV1TaskCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskCancel501JSONResponse APIErrors

func (response V1TaskCancel501JSONResponse) VisitV1TaskCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskReplayRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *V1TaskReplayJSONRequestBody
}

type V1TaskReplayResponseObject interface {
	VisitV1TaskReplayResponse(w http.ResponseWriter) error
}

type V1TaskReplay200Response struct {
}

func (response V1TaskReplay200Response) VisitV1TaskReplayResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type V1TaskReplay400JSONResponse APIErrors

func (response V1TaskReplay400JSONResponse) VisitV1TaskReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskReplay403JSONResponse APIErrors

func (response V1TaskReplay403JSONResponse) VisitV1TaskReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskReplay404JSONResponse APIErrors

func (response V1TaskReplay404JSONResponse) VisitV1TaskReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TaskReplay501JSONResponse APIErrors

func (response V1TaskReplay501JSONResponse) VisitV1TaskReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params V1WorkflowRunListParams
}

type V1WorkflowRunListResponseObject interface {
	VisitV1WorkflowRunListResponse(w http.ResponseWriter) error
}

type V1WorkflowRunList200JSONResponse V1TaskSummaryList

func (response V1WorkflowRunList200JSONResponse) VisitV1WorkflowRunListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunList400JSONResponse APIErrors

func (response V1WorkflowRunList400JSONResponse) VisitV1WorkflowRunListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunList403JSONResponse APIErrors

func (response V1WorkflowRunList403JSONResponse) VisitV1WorkflowRunListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunList501JSONResponse APIErrors

func (response V1WorkflowRunList501JSONResponse) VisitV1WorkflowRunListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunDisplayNamesListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params V1WorkflowRunDisplayNamesListParams
}

type V1WorkflowRunDisplayNamesListResponseObject interface {
	VisitV1WorkflowRunDisplayNamesListResponse(w http.ResponseWriter) error
}

type V1WorkflowRunDisplayNamesList200JSONResponse V1WorkflowRunDisplayNameList

func (response V1WorkflowRunDisplayNamesList200JSONResponse) VisitV1WorkflowRunDisplayNamesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunDisplayNamesList400JSONResponse APIErrors

func (response V1WorkflowRunDisplayNamesList400JSONResponse) VisitV1WorkflowRunDisplayNamesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunDisplayNamesList403JSONResponse APIErrors

func (response V1WorkflowRunDisplayNamesList403JSONResponse) VisitV1WorkflowRunDisplayNamesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunDisplayNamesList501JSONResponse APIErrors

func (response V1WorkflowRunDisplayNamesList501JSONResponse) VisitV1WorkflowRunDisplayNamesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *V1WorkflowRunCreateJSONRequestBody
}

type V1WorkflowRunCreateResponseObject interface {
	VisitV1WorkflowRunCreateResponse(w http.ResponseWriter) error
}

type V1WorkflowRunCreate200JSONResponse V1WorkflowRunDetails

func (response V1WorkflowRunCreate200JSONResponse) VisitV1WorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunCreate400JSONResponse APIErrors

func (response V1WorkflowRunCreate400JSONResponse) VisitV1WorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunCreate403JSONResponse APIErrors

func (response V1WorkflowRunCreate403JSONResponse) VisitV1WorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGetRequestObject struct {
	V1WorkflowRun openapi_types.UUID `json:"v1-workflow-run"`
}

type V1WorkflowRunGetResponseObject interface {
	VisitV1WorkflowRunGetResponse(w http.ResponseWriter) error
}

type V1WorkflowRunGet200JSONResponse V1WorkflowRunDetails

func (response V1WorkflowRunGet200JSONResponse) VisitV1WorkflowRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGet400JSONResponse APIErrors

func (response V1WorkflowRunGet400JSONResponse) VisitV1WorkflowRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGet403JSONResponse APIErrors

func (response V1WorkflowRunGet403JSONResponse) VisitV1WorkflowRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGet501JSONResponse APIErrors

func (response V1WorkflowRunGet501JSONResponse) VisitV1WorkflowRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGetStatusRequestObject struct {
	V1WorkflowRun openapi_types.UUID `json:"v1-workflow-run"`
}

type V1WorkflowRunGetStatusResponseObject interface {
	VisitV1WorkflowRunGetStatusResponse(w http.ResponseWriter) error
}

type V1WorkflowRunGetStatus200JSONResponse V1TaskStatus

func (response V1WorkflowRunGetStatus200JSONResponse) VisitV1WorkflowRunGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGetStatus400JSONResponse APIErrors

func (response V1WorkflowRunGetStatus400JSONResponse) VisitV1WorkflowRunGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGetStatus403JSONResponse APIErrors

func (response V1WorkflowRunGetStatus403JSONResponse) VisitV1WorkflowRunGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGetStatus404JSONResponse APIErrors

func (response V1WorkflowRunGetStatus404JSONResponse) VisitV1WorkflowRunGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGetStatus501JSONResponse APIErrors

func (response V1WorkflowRunGetStatus501JSONResponse) VisitV1WorkflowRunGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunTaskEventsListRequestObject struct {
	V1WorkflowRun openapi_types.UUID `json:"v1-workflow-run"`
	Params        V1WorkflowRunTaskEventsListParams
}

type V1WorkflowRunTaskEventsListResponseObject interface {
	VisitV1WorkflowRunTaskEventsListResponse(w http.ResponseWriter) error
}

type V1WorkflowRunTaskEventsList200JSONResponse V1TaskEventList

func (response V1WorkflowRunTaskEventsList200JSONResponse) VisitV1WorkflowRunTaskEventsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunTaskEventsList400JSONResponse APIErrors

func (response V1WorkflowRunTaskEventsList400JSONResponse) VisitV1WorkflowRunTaskEventsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunTaskEventsList403JSONResponse APIErrors

func (response V1WorkflowRunTaskEventsList403JSONResponse) VisitV1WorkflowRunTaskEventsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunTaskEventsList501JSONResponse APIErrors

func (response V1WorkflowRunTaskEventsList501JSONResponse) VisitV1WorkflowRunTaskEventsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGetTimingsRequestObject struct {
	V1WorkflowRun openapi_types.UUID `json:"v1-workflow-run"`
	Params        V1WorkflowRunGetTimingsParams
}

type V1WorkflowRunGetTimingsResponseObject interface {
	VisitV1WorkflowRunGetTimingsResponse(w http.ResponseWriter) error
}

type V1WorkflowRunGetTimings200JSONResponse V1TaskTimingList

func (response V1WorkflowRunGetTimings200JSONResponse) VisitV1WorkflowRunGetTimingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGetTimings400JSONResponse APIErrors

func (response V1WorkflowRunGetTimings400JSONResponse) VisitV1WorkflowRunGetTimingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGetTimings403JSONResponse APIErrors

func (response V1WorkflowRunGetTimings403JSONResponse) VisitV1WorkflowRunGetTimingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1WorkflowRunGetTimings501JSONResponse APIErrors

func (response V1WorkflowRunGetTimings501JSONResponse) VisitV1WorkflowRunGetTimingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListArchivesRequestObject struct {
	StepRun openapi_types.UUID `json:"step-run"`
	Params  StepRunListArchivesParams
}

type StepRunListArchivesResponseObject interface {
	VisitStepRunListArchivesResponse(w http.ResponseWriter) error
}

type StepRunListArchives200JSONResponse StepRunArchiveList

func (response StepRunListArchives200JSONResponse) VisitStepRunListArchivesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListArchives400JSONResponse APIErrors

func (response StepRunListArchives400JSONResponse) VisitStepRunListArchivesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListArchives403JSONResponse APIErrors

func (response StepRunListArchives403JSONResponse) VisitStepRunListArchivesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListArchives404JSONResponse APIErrors

func (response StepRunListArchives404JSONResponse) VisitStepRunListArchivesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListEventsRequestObject struct {
	StepRun openapi_types.UUID `json:"step-run"`
	Params  StepRunListEventsParams
}

type StepRunListEventsResponseObject interface {
	VisitStepRunListEventsResponse(w http.ResponseWriter) error
}

type StepRunListEvents200JSONResponse StepRunEventList

func (response StepRunListEvents200JSONResponse) VisitStepRunListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListEvents400JSONResponse APIErrors

func (response StepRunListEvents400JSONResponse) VisitStepRunListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListEvents403JSONResponse APIErrors

func (response StepRunListEvents403JSONResponse) VisitStepRunListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListEvents404JSONResponse APIErrors

func (response StepRunListEvents404JSONResponse) VisitStepRunListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LogLineListRequestObject struct {
	StepRun openapi_types.UUID `json:"step-run"`
	Params  LogLineListParams
}

type LogLineListResponseObject interface {
	VisitLogLineListResponse(w http.ResponseWriter) error
}

type LogLineList200JSONResponse LogLineList

func (response LogLineList200JSONResponse) VisitLogLineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LogLineList400JSONResponse APIErrors

func (response LogLineList400JSONResponse) VisitLogLineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LogLineList403JSONResponse APIErrors

func (response LogLineList403JSONResponse) VisitLogLineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantCreateRequestObject struct {
	Body *TenantCreateJSONRequestBody
}

type TenantCreateResponseObject interface {
	VisitTenantCreateResponse(w http.ResponseWriter) error
}

type TenantCreate200JSONResponse Tenant

func (response TenantCreate200JSONResponse) VisitTenantCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantCreate400JSONResponse APIErrors

func (response TenantCreate400JSONResponse) VisitTenantCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantCreate403JSONResponse APIError

func (response TenantCreate403JSONResponse) VisitTenantCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantGetRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type TenantGetResponseObject interface {
	VisitTenantGetResponse(w http.ResponseWriter) error
}

type TenantGet200JSONResponse Tenant

func (response TenantGet200JSONResponse) VisitTenantGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantGet400JSONResponse APIErrors

func (response TenantGet400JSONResponse) VisitTenantGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantGet403JSONResponse APIError

func (response TenantGet403JSONResponse) VisitTenantGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantGet404JSONResponse APIErrors

func (response TenantGet404JSONResponse) VisitTenantGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TenantUpdateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *TenantUpdateJSONRequestBody
}

type TenantUpdateResponseObject interface {
	VisitTenantUpdateResponse(w http.ResponseWriter) error
}

type TenantUpdate200JSONResponse Tenant

func (response TenantUpdate200JSONResponse) VisitTenantUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantUpdate400JSONResponse APIErrors

func (response TenantUpdate400JSONResponse) VisitTenantUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantUpdate403JSONResponse APIError

func (response TenantUpdate403JSONResponse) VisitTenantUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type AlertEmailGroupListResponseObject interface {
	VisitAlertEmailGroupListResponse(w http.ResponseWriter) error
}

type AlertEmailGroupList200JSONResponse TenantAlertEmailGroupList

func (response AlertEmailGroupList200JSONResponse) VisitAlertEmailGroupListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupList400JSONResponse APIErrors

func (response AlertEmailGroupList400JSONResponse) VisitAlertEmailGroupListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupList403JSONResponse APIError

func (response AlertEmailGroupList403JSONResponse) VisitAlertEmailGroupListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *AlertEmailGroupCreateJSONRequestBody
}

type AlertEmailGroupCreateResponseObject interface {
	VisitAlertEmailGroupCreateResponse(w http.ResponseWriter) error
}

type AlertEmailGroupCreate201JSONResponse TenantAlertEmailGroup

func (response AlertEmailGroupCreate201JSONResponse) VisitAlertEmailGroupCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupCreate400JSONResponse APIErrors

func (response AlertEmailGroupCreate400JSONResponse) VisitAlertEmailGroupCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupCreate403JSONResponse APIError

func (response AlertEmailGroupCreate403JSONResponse) VisitAlertEmailGroupCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantAlertingSettingsGetRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type TenantAlertingSettingsGetResponseObject interface {
	VisitTenantAlertingSettingsGetResponse(w http.ResponseWriter) error
}

type TenantAlertingSettingsGet200JSONResponse TenantAlertingSettings

func (response TenantAlertingSettingsGet200JSONResponse) VisitTenantAlertingSettingsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantAlertingSettingsGet400JSONResponse APIErrors

func (response TenantAlertingSettingsGet400JSONResponse) VisitTenantAlertingSettingsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantAlertingSettingsGet403JSONResponse APIError

func (response TenantAlertingSettingsGet403JSONResponse) VisitTenantAlertingSettingsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type ApiTokenListResponseObject interface {
	VisitApiTokenListResponse(w http.ResponseWriter) error
}

type ApiTokenList200JSONResponse ListAPITokensResponse

func (response ApiTokenList200JSONResponse) VisitApiTokenListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenList400JSONResponse APIErrors

func (response ApiTokenList400JSONResponse) VisitApiTokenListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenList403JSONResponse APIErrors

func (response ApiTokenList403JSONResponse) VisitApiTokenListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *ApiTokenCreateJSONRequestBody
}

type ApiTokenCreateResponseObject interface {
	VisitApiTokenCreateResponse(w http.ResponseWriter) error
}

type ApiTokenCreate200JSONResponse CreateAPITokenResponse

func (response ApiTokenCreate200JSONResponse) VisitApiTokenCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenCreate400JSONResponse APIErrors

func (response ApiTokenCreate400JSONResponse) VisitApiTokenCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenCreate403JSONResponse APIErrors

func (response ApiTokenCreate403JSONResponse) VisitApiTokenCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params EventListParams
}

type EventListResponseObject interface {
	VisitEventListResponse(w http.ResponseWriter) error
}

type EventList200JSONResponse EventList

func (response EventList200JSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventList400JSONResponse APIErrors

func (response EventList400JSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventList403JSONResponse APIErrors

func (response EventList403JSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *EventCreateJSONRequestBody
}

type EventCreateResponseObject interface {
	VisitEventCreateResponse(w http.ResponseWriter) error
}

type EventCreate200JSONResponse Event

func (response EventCreate200JSONResponse) VisitEventCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventCreate400JSONResponse APIErrors

func (response EventCreate400JSONResponse) VisitEventCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventCreate403JSONResponse APIErrors

func (response EventCreate403JSONResponse) VisitEventCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventCreate429JSONResponse APIErrors

func (response EventCreate429JSONResponse) VisitEventCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type EventCreateBulkRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *EventCreateBulkJSONRequestBody
}

type EventCreateBulkResponseObject interface {
	VisitEventCreateBulkResponse(w http.ResponseWriter) error
}

type EventCreateBulk200JSONResponse Events

func (response EventCreateBulk200JSONResponse) VisitEventCreateBulkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventCreateBulk400JSONResponse APIErrors

func (response EventCreateBulk400JSONResponse) VisitEventCreateBulkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventCreateBulk403JSONResponse APIErrors

func (response EventCreateBulk403JSONResponse) VisitEventCreateBulkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventCreateBulk429JSONResponse APIErrors

func (response EventCreateBulk429JSONResponse) VisitEventCreateBulkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateCancelRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *EventUpdateCancelJSONRequestBody
}

type EventUpdateCancelResponseObject interface {
	VisitEventUpdateCancelResponse(w http.ResponseWriter) error
}

type EventUpdateCancel200JSONResponse struct {
	WorkflowRunIds *[]openapi_types.UUID `json:"workflowRunIds,omitempty"`
}

func (response EventUpdateCancel200JSONResponse) VisitEventUpdateCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateCancel400JSONResponse APIErrors

func (response EventUpdateCancel400JSONResponse) VisitEventUpdateCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateCancel403JSONResponse APIErrors

func (response EventUpdateCancel403JSONResponse) VisitEventUpdateCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateCancel429JSONResponse APIErrors

func (response EventUpdateCancel429JSONResponse) VisitEventUpdateCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type EventKeyListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type EventKeyListResponseObject interface {
	VisitEventKeyListResponse(w http.ResponseWriter) error
}

type EventKeyList200JSONResponse EventKeyList

func (response EventKeyList200JSONResponse) VisitEventKeyListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventKeyList400JSONResponse APIErrors

func (response EventKeyList400JSONResponse) VisitEventKeyListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventKeyList403JSONResponse APIErrors

func (response EventKeyList403JSONResponse) VisitEventKeyListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateReplayRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *EventUpdateReplayJSONRequestBody
}

type EventUpdateReplayResponseObject interface {
	VisitEventUpdateReplayResponse(w http.ResponseWriter) error
}

type EventUpdateReplay200JSONResponse EventList

func (response EventUpdateReplay200JSONResponse) VisitEventUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateReplay400JSONResponse APIErrors

func (response EventUpdateReplay400JSONResponse) VisitEventUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateReplay403JSONResponse APIErrors

func (response EventUpdateReplay403JSONResponse) VisitEventUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateReplay429JSONResponse APIErrors

func (response EventUpdateReplay429JSONResponse) VisitEventUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type TenantInviteListResponseObject interface {
	VisitTenantInviteListResponse(w http.ResponseWriter) error
}

type TenantInviteList200JSONResponse TenantInviteList

func (response TenantInviteList200JSONResponse) VisitTenantInviteListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteList400JSONResponse APIErrors

func (response TenantInviteList400JSONResponse) VisitTenantInviteListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteList403JSONResponse APIError

func (response TenantInviteList403JSONResponse) VisitTenantInviteListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *TenantInviteCreateJSONRequestBody
}

type TenantInviteCreateResponseObject interface {
	VisitTenantInviteCreateResponse(w http.ResponseWriter) error
}

type TenantInviteCreate201JSONResponse TenantInvite

func (response TenantInviteCreate201JSONResponse) VisitTenantInviteCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteCreate400JSONResponse APIErrors

func (response TenantInviteCreate400JSONResponse) VisitTenantInviteCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteCreate403JSONResponse APIError

func (response TenantInviteCreate403JSONResponse) VisitTenantInviteCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteDeleteRequestObject struct {
	Tenant       openapi_types.UUID `json:"tenant"`
	TenantInvite openapi_types.UUID `json:"tenant-invite"`
}

type TenantInviteDeleteResponseObject interface {
	VisitTenantInviteDeleteResponse(w http.ResponseWriter) error
}

type TenantInviteDelete200JSONResponse TenantInvite

func (response TenantInviteDelete200JSONResponse) VisitTenantInviteDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteDelete400JSONResponse APIErrors

func (response TenantInviteDelete400JSONResponse) VisitTenantInviteDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteUpdateRequestObject struct {
	Tenant       openapi_types.UUID `json:"tenant"`
	TenantInvite openapi_types.UUID `json:"tenant-invite"`
	Body         *TenantInviteUpdateJSONRequestBody
}

type TenantInviteUpdateResponseObject interface {
	VisitTenantInviteUpdateResponse(w http.ResponseWriter) error
}

type TenantInviteUpdate200JSONResponse TenantInvite

func (response TenantInviteUpdate200JSONResponse) VisitTenantInviteUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteUpdate400JSONResponse APIErrors

func (response TenantInviteUpdate400JSONResponse) VisitTenantInviteUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type TenantMemberListResponseObject interface {
	VisitTenantMemberListResponse(w http.ResponseWriter) error
}

type TenantMemberList200JSONResponse TenantMemberList

func (response TenantMemberList200JSONResponse) VisitTenantMemberListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberList400JSONResponse APIErrors

func (response TenantMemberList400JSONResponse) VisitTenantMemberListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberList403JSONResponse APIError

func (response TenantMemberList403JSONResponse) VisitTenantMemberListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberDeleteRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Member openapi_types.UUID `json:"member"`
}

type TenantMemberDeleteResponseObject interface {
	VisitTenantMemberDeleteResponse(w http.ResponseWriter) error
}

type TenantMemberDelete204JSONResponse TenantMember

func (response TenantMemberDelete204JSONResponse) VisitTenantMemberDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberDelete400JSONResponse APIErrors

func (response TenantMemberDelete400JSONResponse) VisitTenantMemberDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberDelete403JSONResponse APIErrors

func (response TenantMemberDelete403JSONResponse) VisitTenantMemberDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberDelete404JSONResponse APIErrors

func (response TenantMemberDelete404JSONResponse) VisitTenantMemberDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TenantGetQueueMetricsRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params TenantGetQueueMetricsParams
}

type TenantGetQueueMetricsResponseObject interface {
	VisitTenantGetQueueMetricsResponse(w http.ResponseWriter) error
}

type TenantGetQueueMetrics200JSONResponse TenantQueueMetrics

func (response TenantGetQueueMetrics200JSONResponse) VisitTenantGetQueueMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantGetQueueMetrics400JSONResponse APIErrors

func (response TenantGetQueueMetrics400JSONResponse) VisitTenantGetQueueMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantGetQueueMetrics403JSONResponse APIErrors

func (response TenantGetQueueMetrics403JSONResponse) VisitTenantGetQueueMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantGetQueueMetrics404JSONResponse APIErrors

func (response TenantGetQueueMetrics404JSONResponse) VisitTenantGetQueueMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RateLimitListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params RateLimitListParams
}

type RateLimitListResponseObject interface {
	VisitRateLimitListResponse(w http.ResponseWriter) error
}

type RateLimitList200JSONResponse RateLimitList

func (response RateLimitList200JSONResponse) VisitRateLimitListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RateLimitList400JSONResponse APIErrors

func (response RateLimitList400JSONResponse) VisitRateLimitListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RateLimitList403JSONResponse APIErrors

func (response RateLimitList403JSONResponse) VisitRateLimitListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantResourcePolicyGetRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type TenantResourcePolicyGetResponseObject interface {
	VisitTenantResourcePolicyGetResponse(w http.ResponseWriter) error
}

type TenantResourcePolicyGet200JSONResponse TenantResourcePolicy

func (response TenantResourcePolicyGet200JSONResponse) VisitTenantResourcePolicyGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantResourcePolicyGet400JSONResponse APIErrors

func (response TenantResourcePolicyGet400JSONResponse) VisitTenantResourcePolicyGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantResourcePolicyGet403JSONResponse APIError

func (response TenantResourcePolicyGet403JSONResponse) VisitTenantResourcePolicyGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type SlackWebhookListResponseObject interface {
	VisitSlackWebhookListResponse(w http.ResponseWriter) error
}

type SlackWebhookList200JSONResponse ListSlackWebhooks

func (response SlackWebhookList200JSONResponse) VisitSlackWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookList400JSONResponse APIErrors

func (response SlackWebhookList400JSONResponse) VisitSlackWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookList401JSONResponse APIErrors

func (response SlackWebhookList401JSONResponse) VisitSlackWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookList405JSONResponse APIErrors

func (response SlackWebhookList405JSONResponse) VisitSlackWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateSlackOauthStartRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type UserUpdateSlackOauthStartResponseObject interface {
	VisitUserUpdateSlackOauthStartResponse(w http.ResponseWriter) error
}

type UserUpdateSlackOauthStart302ResponseHeaders struct {
	Location string
}

type UserUpdateSlackOauthStart302Response struct {
	Headers UserUpdateSlackOauthStart302ResponseHeaders
}

func (response UserUpdateSlackOauthStart302Response) VisitUserUpdateSlackOauthStartResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SnsListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type SnsListResponseObject interface {
	VisitSnsListResponse(w http.ResponseWriter) error
}

type SnsList200JSONResponse ListSNSIntegrations

func (response SnsList200JSONResponse) VisitSnsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SnsList400JSONResponse APIErrors

func (response SnsList400JSONResponse) VisitSnsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SnsList401JSONResponse APIErrors

func (response SnsList401JSONResponse) VisitSnsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SnsList405JSONResponse APIErrors

func (response SnsList405JSONResponse) VisitSnsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type SnsCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *SnsCreateJSONRequestBody
}

type SnsCreateResponseObject interface {
	VisitSnsCreateResponse(w http.ResponseWriter) error
}

type SnsCreate201JSONResponse SNSIntegration

func (response SnsCreate201JSONResponse) VisitSnsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type SnsCreate400JSONResponse APIErrors

func (response SnsCreate400JSONResponse) VisitSnsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SnsCreate401JSONResponse APIErrors

func (response SnsCreate401JSONResponse) VisitSnsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SnsCreate405JSONResponse APIErrors

func (response SnsCreate405JSONResponse) VisitSnsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type TenantGetStepRunQueueMetricsRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type TenantGetStepRunQueueMetricsResponseObject interface {
	VisitTenantGetStepRunQueueMetricsResponse(w http.ResponseWriter) error
}

type TenantGetStepRunQueueMetrics200JSONResponse TenantStepRunQueueMetrics

func (response TenantGetStepRunQueueMetrics200JSONResponse) VisitTenantGetStepRunQueueMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantGetStepRunQueueMetrics400JSONResponse APIErrors

func (response TenantGetStepRunQueueMetrics400JSONResponse) VisitTenantGetStepRunQueueMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantGetStepRunQueueMetrics403JSONResponse APIErrors

func (response TenantGetStepRunQueueMetrics403JSONResponse) VisitTenantGetStepRunQueueMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantGetStepRunQueueMetrics404JSONResponse APIErrors

func (response TenantGetStepRunQueueMetrics404JSONResponse) VisitTenantGetStepRunQueueMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetRequestObject struct {
	Tenant  openapi_types.UUID `json:"tenant"`
	StepRun openapi_types.UUID `json:"step-run"`
}

type StepRunGetResponseObject interface {
	VisitStepRunGetResponse(w http.ResponseWriter) error
}

type StepRunGet200JSONResponse StepRun

func (response StepRunGet200JSONResponse) VisitStepRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGet400JSONResponse APIErrors

func (response StepRunGet400JSONResponse) VisitStepRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGet403JSONResponse APIErrors

func (response StepRunGet403JSONResponse) VisitStepRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGet404JSONResponse APIErrors

func (response StepRunGet404JSONResponse) VisitStepRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateCancelRequestObject struct {
	Tenant  openapi_types.UUID `json:"tenant"`
	StepRun openapi_types.UUID `json:"step-run"`
}

type StepRunUpdateCancelResponseObject interface {
	VisitStepRunUpdateCancelResponse(w http.ResponseWriter) error
}

type StepRunUpdateCancel200JSONResponse StepRun

func (response StepRunUpdateCancel200JSONResponse) VisitStepRunUpdateCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateCancel400JSONResponse APIErrors

func (response StepRunUpdateCancel400JSONResponse) VisitStepRunUpdateCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateCancel403JSONResponse APIErrors

func (response StepRunUpdateCancel403JSONResponse) VisitStepRunUpdateCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateRerunRequestObject struct {
	Tenant  openapi_types.UUID `json:"tenant"`
	StepRun openapi_types.UUID `json:"step-run"`
	Body    *StepRunUpdateRerunJSONRequestBody
}

type StepRunUpdateRerunResponseObject interface {
	VisitStepRunUpdateRerunResponse(w http.ResponseWriter) error
}

type StepRunUpdateRerun200JSONResponse StepRun

func (response StepRunUpdateRerun200JSONResponse) VisitStepRunUpdateRerunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateRerun400JSONResponse APIErrors

func (response StepRunUpdateRerun400JSONResponse) VisitStepRunUpdateRerunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateRerun403JSONResponse APIErrors

func (response StepRunUpdateRerun403JSONResponse) VisitStepRunUpdateRerunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetSchemaRequestObject struct {
	Tenant  openapi_types.UUID `json:"tenant"`
	StepRun openapi_types.UUID `json:"step-run"`
}

type StepRunGetSchemaResponseObject interface {
	VisitStepRunGetSchemaResponse(w http.ResponseWriter) error
}

type StepRunGetSchema200JSONResponse map[string]interface{}

func (response StepRunGetSchema200JSONResponse) VisitStepRunGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetSchema400JSONResponse APIErrors

func (response StepRunGetSchema400JSONResponse) VisitStepRunGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetSchema403JSONResponse APIErrors

func (response StepRunGetSchema403JSONResponse) VisitStepRunGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetSchema404JSONResponse APIErrors

func (response StepRunGetSchema404JSONResponse) VisitStepRunGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WebhookListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type WebhookListResponseObject interface {
	VisitWebhookListResponse(w http.ResponseWriter) error
}

type WebhookList200JSONResponse WebhookWorkerListResponse

func (response WebhookList200JSONResponse) VisitWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WebhookList400JSONResponse APIErrors

func (response WebhookList400JSONResponse) VisitWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WebhookList401JSONResponse APIErrors

func (response WebhookList401JSONResponse) VisitWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type WebhookList405JSONResponse APIErrors

func (response WebhookList405JSONResponse) VisitWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type WebhookCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *WebhookCreateJSONRequestBody
}

type WebhookCreateResponseObject interface {
	VisitWebhookCreateResponse(w http.ResponseWriter) error
}

type WebhookCreate200JSONResponse WebhookWorkerCreated

func (response WebhookCreate200JSONResponse) VisitWebhookCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WebhookCreate400JSONResponse APIErrors

func (response WebhookCreate400JSONResponse) VisitWebhookCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WebhookCreate401JSONResponse APIErrors

func (response WebhookCreate401JSONResponse) VisitWebhookCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type WebhookCreate405JSONResponse APIErrors

func (response WebhookCreate405JSONResponse) VisitWebhookCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type WorkerListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type WorkerListResponseObject interface {
	VisitWorkerListResponse(w http.ResponseWriter) error
}

type WorkerList200JSONResponse WorkerList

func (response WorkerList200JSONResponse) VisitWorkerListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkerList400JSONResponse APIErrors

func (response WorkerList400JSONResponse) VisitWorkerListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkerList403JSONResponse APIErrors

func (response WorkerList403JSONResponse) VisitWorkerListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunUpdateReplayRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *WorkflowRunUpdateReplayJSONRequestBody
}

type WorkflowRunUpdateReplayResponseObject interface {
	VisitWorkflowRunUpdateReplayResponse(w http.ResponseWriter) error
}

type WorkflowRunUpdateReplay200JSONResponse ReplayWorkflowRunsResponse

func (response WorkflowRunUpdateReplay200JSONResponse) VisitWorkflowRunUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunUpdateReplay400JSONResponse APIErrors

func (response WorkflowRunUpdateReplay400JSONResponse) VisitWorkflowRunUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunUpdateReplay403JSONResponse APIErrors

func (response WorkflowRunUpdateReplay403JSONResponse) VisitWorkflowRunUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunUpdateReplay429JSONResponse APIErrors

func (response WorkflowRunUpdateReplay429JSONResponse) VisitWorkflowRunUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetRequestObject struct {
	Tenant      openapi_types.UUID `json:"tenant"`
	WorkflowRun openapi_types.UUID `json:"workflow-run"`
}

type WorkflowRunGetResponseObject interface {
	VisitWorkflowRunGetResponse(w http.ResponseWriter) error
}

type WorkflowRunGet200JSONResponse WorkflowRun

func (response WorkflowRunGet200JSONResponse) VisitWorkflowRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGet400JSONResponse APIErrors

func (response WorkflowRunGet400JSONResponse) VisitWorkflowRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGet403JSONResponse APIErrors

func (response WorkflowRunGet403JSONResponse) VisitWorkflowRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetInputRequestObject struct {
	Tenant      openapi_types.UUID `json:"tenant"`
	WorkflowRun openapi_types.UUID `json:"workflow-run"`
}

type WorkflowRunGetInputResponseObject interface {
	VisitWorkflowRunGetInputResponse(w http.ResponseWriter) error
}

type WorkflowRunGetInput200JSONResponse map[string]interface{}

func (response WorkflowRunGetInput200JSONResponse) VisitWorkflowRunGetInputResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetInput400JSONResponse APIErrors

func (response WorkflowRunGetInput400JSONResponse) VisitWorkflowRunGetInputResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetInput403JSONResponse APIErrors

func (response WorkflowRunGetInput403JSONResponse) VisitWorkflowRunGetInputResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetInput404JSONResponse APIErrors

func (response WorkflowRunGetInput404JSONResponse) VisitWorkflowRunGetInputResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetShapeRequestObject struct {
	Tenant      openapi_types.UUID `json:"tenant"`
	WorkflowRun openapi_types.UUID `json:"workflow-run"`
}

type WorkflowRunGetShapeResponseObject interface {
	VisitWorkflowRunGetShapeResponse(w http.ResponseWriter) error
}

type WorkflowRunGetShape200JSONResponse WorkflowRunShape

func (response WorkflowRunGetShape200JSONResponse) VisitWorkflowRunGetShapeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetShape400JSONResponse APIErrors

func (response WorkflowRunGetShape400JSONResponse) VisitWorkflowRunGetShapeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetShape403JSONResponse APIErrors

func (response WorkflowRunGetShape403JSONResponse) VisitWorkflowRunGetShapeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunListStepRunEventsRequestObject struct {
	Tenant      openapi_types.UUID `json:"tenant"`
	WorkflowRun openapi_types.UUID `json:"workflow-run"`
	Params      WorkflowRunListStepRunEventsParams
}

type WorkflowRunListStepRunEventsResponseObject interface {
	VisitWorkflowRunListStepRunEventsResponse(w http.ResponseWriter) error
}

type WorkflowRunListStepRunEvents200JSONResponse StepRunEventList

func (response WorkflowRunListStepRunEvents200JSONResponse) VisitWorkflowRunListStepRunEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunListStepRunEvents400JSONResponse APIErrors

func (response WorkflowRunListStepRunEvents400JSONResponse) VisitWorkflowRunListStepRunEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunListStepRunEvents403JSONResponse APIErrors

func (response WorkflowRunListStepRunEvents403JSONResponse) VisitWorkflowRunListStepRunEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunListStepRunEvents404JSONResponse APIErrors

func (response WorkflowRunListStepRunEvents404JSONResponse) VisitWorkflowRunListStepRunEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params WorkflowListParams
}

type WorkflowListResponseObject interface {
	VisitWorkflowListResponse(w http.ResponseWriter) error
}

type WorkflowList200JSONResponse WorkflowList

func (response WorkflowList200JSONResponse) VisitWorkflowListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowList400JSONResponse APIErrors

func (response WorkflowList400JSONResponse) VisitWorkflowListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowList403JSONResponse APIErrors

func (response WorkflowList403JSONResponse) VisitWorkflowListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCancelRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *WorkflowRunCancelJSONRequestBody
}

type WorkflowRunCancelResponseObject interface {
	VisitWorkflowRunCancelResponse(w http.ResponseWriter) error
}

type WorkflowRunCancel200JSONResponse struct {
	WorkflowRunIds *[]openapi_types.UUID `json:"workflowRunIds,omitempty"`
}

func (response WorkflowRunCancel200JSONResponse) VisitWorkflowRunCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCancel400JSONResponse APIErrors

func (response WorkflowRunCancel400JSONResponse) VisitWorkflowRunCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCancel403JSONResponse APIErrors

func (response WorkflowRunCancel403JSONResponse) VisitWorkflowRunCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CronWorkflowListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params CronWorkflowListParams
}

type CronWorkflowListResponseObject interface {
	VisitCronWorkflowListResponse(w http.ResponseWriter) error
}

type CronWorkflowList200JSONResponse CronWorkflowsList

func (response CronWorkflowList200JSONResponse) VisitCronWorkflowListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CronWorkflowList400JSONResponse APIErrors

func (response CronWorkflowList400JSONResponse) VisitCronWorkflowListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CronWorkflowList403JSONResponse APIErrors

func (response CronWorkflowList403JSONResponse) VisitCronWorkflowListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowCronDeleteRequestObject struct {
	Tenant       openapi_types.UUID `json:"tenant"`
	CronWorkflow openapi_types.UUID `json:"cron-workflow"`
}

type WorkflowCronDeleteResponseObject interface {
	VisitWorkflowCronDeleteResponse(w http.ResponseWriter) error
}

type WorkflowCronDelete204Response struct {
}

func (response WorkflowCronDelete204Response) VisitWorkflowCronDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type WorkflowCronDelete400JSONResponse APIErrors

func (response WorkflowCronDelete400JSONResponse) VisitWorkflowCronDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowCronDelete403JSONResponse APIError

func (response WorkflowCronDelete403JSONResponse) VisitWorkflowCronDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowCronGetRequestObject struct {
	Tenant       openapi_types.UUID `json:"tenant"`
	CronWorkflow openapi_types.UUID `json:"cron-workflow"`
}

type WorkflowCronGetResponseObject interface {
	VisitWorkflowCronGetResponse(w http.ResponseWriter) error
}

type WorkflowCronGet200JSONResponse CronWorkflows

func (response WorkflowCronGet200JSONResponse) VisitWorkflowCronGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowCronGet400JSONResponse APIErrors

func (response WorkflowCronGet400JSONResponse) VisitWorkflowCronGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowCronGet403JSONResponse APIErrors

func (response WorkflowCronGet403JSONResponse) VisitWorkflowCronGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowCronGet404JSONResponse APIErrors

func (response WorkflowCronGet404JSONResponse) VisitWorkflowCronGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params WorkflowRunListParams
}

type WorkflowRunListResponseObject interface {
	VisitWorkflowRunListResponse(w http.ResponseWriter) error
}

type WorkflowRunList200JSONResponse WorkflowRunList

func (response WorkflowRunList200JSONResponse) VisitWorkflowRunListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunList400JSONResponse APIErrors

func (response WorkflowRunList400JSONResponse) VisitWorkflowRunListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunList403JSONResponse APIErrors

func (response WorkflowRunList403JSONResponse) VisitWorkflowRunListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetMetricsRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params WorkflowRunGetMetricsParams
}

type WorkflowRunGetMetricsResponseObject interface {
	VisitWorkflowRunGetMetricsResponse(w http.ResponseWriter) error
}

type WorkflowRunGetMetrics200JSONResponse WorkflowRunsMetrics

func (response WorkflowRunGetMetrics200JSONResponse) VisitWorkflowRunGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetMetrics400JSONResponse APIErrors

func (response WorkflowRunGetMetrics400JSONResponse) VisitWorkflowRunGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetMetrics403JSONResponse APIErrors

func (response WorkflowRunGetMetrics403JSONResponse) VisitWorkflowRunGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowScheduledListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params WorkflowScheduledListParams
}

type WorkflowScheduledListResponseObject interface {
	VisitWorkflowScheduledListResponse(w http.ResponseWriter) error
}

type WorkflowScheduledList200JSONResponse ScheduledWorkflowsList

func (response WorkflowScheduledList200JSONResponse) VisitWorkflowScheduledListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowScheduledList400JSONResponse APIErrors

func (response WorkflowScheduledList400JSONResponse) VisitWorkflowScheduledListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowScheduledList403JSONResponse APIErrors

func (response WorkflowScheduledList403JSONResponse) VisitWorkflowScheduledListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowScheduledDeleteRequestObject struct {
	Tenant               openapi_types.UUID `json:"tenant"`
	ScheduledWorkflowRun openapi_types.UUID `json:"scheduled-workflow-run"`
}

type WorkflowScheduledDeleteResponseObject interface {
	VisitWorkflowScheduledDeleteResponse(w http.ResponseWriter) error
}

type WorkflowScheduledDelete204Response struct {
}

func (response WorkflowScheduledDelete204Response) VisitWorkflowScheduledDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type WorkflowScheduledDelete400JSONResponse APIErrors

func (response WorkflowScheduledDelete400JSONResponse) VisitWorkflowScheduledDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowScheduledDelete403JSONResponse APIError

func (response WorkflowScheduledDelete403JSONResponse) VisitWorkflowScheduledDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowScheduledGetRequestObject struct {
	Tenant               openapi_types.UUID `json:"tenant"`
	ScheduledWorkflowRun openapi_types.UUID `json:"scheduled-workflow-run"`
}

type WorkflowScheduledGetResponseObject interface {
	VisitWorkflowScheduledGetResponse(w http.ResponseWriter) error
}

type WorkflowScheduledGet200JSONResponse ScheduledWorkflows

func (response WorkflowScheduledGet200JSONResponse) VisitWorkflowScheduledGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowScheduledGet400JSONResponse APIErrors

func (response WorkflowScheduledGet400JSONResponse) VisitWorkflowScheduledGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowScheduledGet403JSONResponse APIErrors

func (response WorkflowScheduledGet403JSONResponse) VisitWorkflowScheduledGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowScheduledGet404JSONResponse APIErrors

func (response WorkflowScheduledGet404JSONResponse) VisitWorkflowScheduledGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CronWorkflowTriggerCreateRequestObject struct {
	Tenant   openapi_types.UUID `json:"tenant"`
	Workflow string             `json:"workflow"`
	Body     *CronWorkflowTriggerCreateJSONRequestBody
}

type CronWorkflowTriggerCreateResponseObject interface {
	VisitCronWorkflowTriggerCreateResponse(w http.ResponseWriter) error
}

type CronWorkflowTriggerCreate200JSONResponse CronWorkflows

func (response CronWorkflowTriggerCreate200JSONResponse) VisitCronWorkflowTriggerCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CronWorkflowTriggerCreate400JSONResponse APIErrors

func (response CronWorkflowTriggerCreate400JSONResponse) VisitCronWorkflowTriggerCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CronWorkflowTriggerCreate403JSONResponse APIErrors

func (response CronWorkflowTriggerCreate403JSONResponse) VisitCronWorkflowTriggerCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CronWorkflowTriggerCreate404JSONResponse APIErrors

func (response CronWorkflowTriggerCreate404JSONResponse) VisitCronWorkflowTriggerCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CronWorkflowTriggerCreate429JSONResponse APIErrors

func (response CronWorkflowTriggerCreate429JSONResponse) VisitCronWorkflowTriggerCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ScheduledWorkflowRunCreateRequestObject struct {
	Tenant   openapi_types.UUID `json:"tenant"`
	Workflow string             `json:"workflow"`
	Body     *ScheduledWorkflowRunCreateJSONRequestBody
}

type ScheduledWorkflowRunCreateResponseObject interface {
	VisitScheduledWorkflowRunCreateResponse(w http.ResponseWriter) error
}

type ScheduledWorkflowRunCreate200JSONResponse ScheduledWorkflows

func (response ScheduledWorkflowRunCreate200JSONResponse) VisitScheduledWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ScheduledWorkflowRunCreate400JSONResponse APIErrors

func (response ScheduledWorkflowRunCreate400JSONResponse) VisitScheduledWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ScheduledWorkflowRunCreate403JSONResponse APIErrors

func (response ScheduledWorkflowRunCreate403JSONResponse) VisitScheduledWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ScheduledWorkflowRunCreate404JSONResponse APIErrors

func (response ScheduledWorkflowRunCreate404JSONResponse) VisitScheduledWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ScheduledWorkflowRunCreate429JSONResponse APIErrors

func (response ScheduledWorkflowRunCreate429JSONResponse) VisitScheduledWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetWorkersCountRequestObject struct {
	Tenant   openapi_types.UUID `json:"tenant"`
	Workflow openapi_types.UUID `json:"workflow"`
}

type WorkflowGetWorkersCountResponseObject interface {
	VisitWorkflowGetWorkersCountResponse(w http.ResponseWriter) error
}

type WorkflowGetWorkersCount200JSONResponse WorkflowWorkersCount

func (response WorkflowGetWorkersCount200JSONResponse) VisitWorkflowGetWorkersCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetWorkersCount400JSONResponse APIErrors

func (response WorkflowGetWorkersCount400JSONResponse) VisitWorkflowGetWorkersCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetWorkersCount403JSONResponse APIErrors

func (response WorkflowGetWorkersCount403JSONResponse) VisitWorkflowGetWorkersCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UserGetCurrentRequestObject struct {
}

type UserGetCurrentResponseObject interface {
	VisitUserGetCurrentResponse(w http.ResponseWriter) error
}

type UserGetCurrent200JSONResponse User

func (response UserGetCurrent200JSONResponse) VisitUserGetCurrentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserGetCurrent400JSONResponse APIErrors

func (response UserGetCurrent400JSONResponse) VisitUserGetCurrentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserGetCurrent401JSONResponse APIErrors

func (response UserGetCurrent401JSONResponse) VisitUserGetCurrentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserGetCurrent405JSONResponse APIErrors

func (response UserGetCurrent405JSONResponse) VisitUserGetCurrentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateGithubOauthCallbackRequestObject struct {
}

type UserUpdateGithubOauthCallbackResponseObject interface {
	VisitUserUpdateGithubOauthCallbackResponse(w http.ResponseWriter) error
}

type UserUpdateGithubOauthCallback302ResponseHeaders struct {
	Location string
}

type UserUpdateGithubOauthCallback302Response struct {
	Headers UserUpdateGithubOauthCallback302ResponseHeaders
}

func (response UserUpdateGithubOauthCallback302Response) VisitUserUpdateGithubOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type UserUpdateGithubOauthStartRequestObject struct {
}

type UserUpdateGithubOauthStartResponseObject interface {
	VisitUserUpdateGithubOauthStartResponse(w http.ResponseWriter) error
}

type UserUpdateGithubOauthStart302ResponseHeaders struct {
	Location string
}

type UserUpdateGithubOauthStart302Response struct {
	Headers UserUpdateGithubOauthStart302ResponseHeaders
}

func (response UserUpdateGithubOauthStart302Response) VisitUserUpdateGithubOauthStartResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type UserUpdateGoogleOauthCallbackRequestObject struct {
}

type UserUpdateGoogleOauthCallbackResponseObject interface {
	VisitUserUpdateGoogleOauthCallbackResponse(w http.ResponseWriter) error
}

type UserUpdateGoogleOauthCallback302ResponseHeaders struct {
	Location string
}

type UserUpdateGoogleOauthCallback302Response struct {
	Headers UserUpdateGoogleOauthCallback302ResponseHeaders
}

func (response UserUpdateGoogleOauthCallback302Response) VisitUserUpdateGoogleOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type UserUpdateGoogleOauthStartRequestObject struct {
}

type UserUpdateGoogleOauthStartResponseObject interface {
	VisitUserUpdateGoogleOauthStartResponse(w http.ResponseWriter) error
}

type UserUpdateGoogleOauthStart302ResponseHeaders struct {
	Location string
}

type UserUpdateGoogleOauthStart302Response struct {
	Headers UserUpdateGoogleOauthStart302ResponseHeaders
}

func (response UserUpdateGoogleOauthStart302Response) VisitUserUpdateGoogleOauthStartResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type UserListTenantInvitesRequestObject struct {
}

type UserListTenantInvitesResponseObject interface {
	VisitUserListTenantInvitesResponse(w http.ResponseWriter) error
}

type UserListTenantInvites200JSONResponse TenantInviteList

func (response UserListTenantInvites200JSONResponse) VisitUserListTenantInvitesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserListTenantInvites400JSONResponse APIErrors

func (response UserListTenantInvites400JSONResponse) VisitUserListTenantInvitesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserListTenantInvites403JSONResponse APIErrors

func (response UserListTenantInvites403JSONResponse) VisitUserListTenantInvitesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteAcceptRequestObject struct {
	Body *TenantInviteAcceptJSONRequestBody
}

type TenantInviteAcceptResponseObject interface {
	VisitTenantInviteAcceptResponse(w http.ResponseWriter) error
}

type TenantInviteAccept200Response struct {
}

func (response TenantInviteAccept200Response) VisitTenantInviteAcceptResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TenantInviteAccept400JSONResponse APIErrors

func (response TenantInviteAccept400JSONResponse) VisitTenantInviteAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteAccept403JSONResponse APIError

func (response TenantInviteAccept403JSONResponse) VisitTenantInviteAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteRejectRequestObject struct {
	Body *TenantInviteRejectJSONRequestBody
}

type TenantInviteRejectResponseObject interface {
	VisitTenantInviteRejectResponse(w http.ResponseWriter) error
}

type TenantInviteReject200Response struct {
}

func (response TenantInviteReject200Response) VisitTenantInviteRejectResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TenantInviteReject400JSONResponse APIErrors

func (response TenantInviteReject400JSONResponse) VisitTenantInviteRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteReject403JSONResponse APIError

func (response TenantInviteReject403JSONResponse) VisitTenantInviteRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLoginRequestObject struct {
	Body *UserUpdateLoginJSONRequestBody
}

type UserUpdateLoginResponseObject interface {
	VisitUserUpdateLoginResponse(w http.ResponseWriter) error
}

type UserUpdateLogin200JSONResponse User

func (response UserUpdateLogin200JSONResponse) VisitUserUpdateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogin400JSONResponse APIErrors

func (response UserUpdateLogin400JSONResponse) VisitUserUpdateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogin401JSONResponse APIErrors

func (response UserUpdateLogin401JSONResponse) VisitUserUpdateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogin405JSONResponse APIErrors

func (response UserUpdateLogin405JSONResponse) VisitUserUpdateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogoutRequestObject struct {
}

type UserUpdateLogoutResponseObject interface {
	VisitUserUpdateLogoutResponse(w http.ResponseWriter) error
}

type UserUpdateLogout200JSONResponse User

func (response UserUpdateLogout200JSONResponse) VisitUserUpdateLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogout400JSONResponse APIErrors

func (response UserUpdateLogout400JSONResponse) VisitUserUpdateLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogout401JSONResponse APIErrors

func (response UserUpdateLogout401JSONResponse) VisitUserUpdateLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogout405JSONResponse APIErrors

func (response UserUpdateLogout405JSONResponse) VisitUserUpdateLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type TenantMembershipsListRequestObject struct {
}

type TenantMembershipsListResponseObject interface {
	VisitTenantMembershipsListResponse(w http.ResponseWriter) error
}

type TenantMembershipsList200JSONResponse UserTenantMembershipsList

func (response TenantMembershipsList200JSONResponse) VisitTenantMembershipsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantMembershipsList400JSONResponse APIErrors

func (response TenantMembershipsList400JSONResponse) VisitTenantMembershipsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantMembershipsList403JSONResponse APIErrors

func (response TenantMembershipsList403JSONResponse) VisitTenantMembershipsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdatePasswordRequestObject struct {
	Body *UserUpdatePasswordJSONRequestBody
}

type UserUpdatePasswordResponseObject interface {
	VisitUserUpdatePasswordResponse(w http.ResponseWriter) error
}

type UserUpdatePassword200JSONResponse User

func (response UserUpdatePassword200JSONResponse) VisitUserUpdatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdatePassword400JSONResponse APIErrors

func (response UserUpdatePassword400JSONResponse) VisitUserUpdatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdatePassword401JSONResponse APIErrors

func (response UserUpdatePassword401JSONResponse) VisitUserUpdatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdatePassword405JSONResponse APIErrors

func (response UserUpdatePassword405JSONResponse) VisitUserUpdatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type UserCreateRequestObject struct {
	Body *UserCreateJSONRequestBody
}

type UserCreateResponseObject interface {
	VisitUserCreateResponse(w http.ResponseWriter) error
}

type UserCreate200JSONResponse User

func (response UserCreate200JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserCreate400JSONResponse APIErrors

func (response UserCreate400JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserCreate401JSONResponse APIErrors

func (response UserCreate401JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserCreate405JSONResponse APIErrors

func (response UserCreate405JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateSlackOauthCallbackRequestObject struct {
}

type UserUpdateSlackOauthCallbackResponseObject interface {
	VisitUserUpdateSlackOauthCallbackResponse(w http.ResponseWriter) error
}

type UserUpdateSlackOauthCallback302ResponseHeaders struct {
	Location string
}

type UserUpdateSlackOauthCallback302Response struct {
	Headers UserUpdateSlackOauthCallback302ResponseHeaders
}

func (response UserUpdateSlackOauthCallback302Response) VisitUserUpdateSlackOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type InfoGetVersionRequestObject struct {
}

type InfoGetVersionResponseObject interface {
	VisitInfoGetVersionResponse(w http.ResponseWriter) error
}

type InfoGetVersion200JSONResponse struct {
	Version string `json:"version"`
}

func (response InfoGetVersion200JSONResponse) VisitInfoGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WebhookDeleteRequestObject struct {
	Webhook openapi_types.UUID `json:"webhook"`
}

type WebhookDeleteResponseObject interface {
	VisitWebhookDeleteResponse(w http.ResponseWriter) error
}

type WebhookDelete200Response struct {
}

func (response WebhookDelete200Response) VisitWebhookDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type WebhookDelete400JSONResponse APIErrors

func (response WebhookDelete400JSONResponse) VisitWebhookDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WebhookDelete401JSONResponse APIErrors

func (response WebhookDelete401JSONResponse) VisitWebhookDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type WebhookDelete405JSONResponse APIErrors

func (response WebhookDelete405JSONResponse) VisitWebhookDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type WebhookRequestsListRequestObject struct {
	Webhook openapi_types.UUID `json:"webhook"`
}

type WebhookRequestsListResponseObject interface {
	VisitWebhookRequestsListResponse(w http.ResponseWriter) error
}

type WebhookRequestsList200JSONResponse WebhookWorkerRequestListResponse

func (response WebhookRequestsList200JSONResponse) VisitWebhookRequestsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WebhookRequestsList400JSONResponse APIErrors

func (response WebhookRequestsList400JSONResponse) VisitWebhookRequestsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WebhookRequestsList401JSONResponse APIErrors

func (response WebhookRequestsList401JSONResponse) VisitWebhookRequestsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type WebhookRequestsList405JSONResponse APIErrors

func (response WebhookRequestsList405JSONResponse) VisitWebhookRequestsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type WorkerGetRequestObject struct {
	Worker openapi_types.UUID `json:"worker"`
}

type WorkerGetResponseObject interface {
	VisitWorkerGetResponse(w http.ResponseWriter) error
}

type WorkerGet200JSONResponse Worker

func (response WorkerGet200JSONResponse) VisitWorkerGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkerGet400JSONResponse APIErrors

func (response WorkerGet400JSONResponse) VisitWorkerGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkerGet403JSONResponse APIErrors

func (response WorkerGet403JSONResponse) VisitWorkerGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkerUpdateRequestObject struct {
	Worker openapi_types.UUID `json:"worker"`
	Body   *WorkerUpdateJSONRequestBody
}

type WorkerUpdateResponseObject interface {
	VisitWorkerUpdateResponse(w http.ResponseWriter) error
}

type WorkerUpdate200JSONResponse Worker

func (response WorkerUpdate200JSONResponse) VisitWorkerUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkerUpdate400JSONResponse APIErrors

func (response WorkerUpdate400JSONResponse) VisitWorkerUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkerUpdate403JSONResponse APIErrors

func (response WorkerUpdate403JSONResponse) VisitWorkerUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowDeleteRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
}

type WorkflowDeleteResponseObject interface {
	VisitWorkflowDeleteResponse(w http.ResponseWriter) error
}

type WorkflowDelete204Response struct {
}

func (response WorkflowDelete204Response) VisitWorkflowDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type WorkflowDelete400JSONResponse APIErrors

func (response WorkflowDelete400JSONResponse) VisitWorkflowDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowDelete403JSONResponse APIErrors

func (response WorkflowDelete403JSONResponse) VisitWorkflowDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowDelete404JSONResponse APIErrors

func (response WorkflowDelete404JSONResponse) VisitWorkflowDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
}

type WorkflowGetResponseObject interface {
	VisitWorkflowGetResponse(w http.ResponseWriter) error
}

type WorkflowGet200JSONResponse Workflow

func (response WorkflowGet200JSONResponse) VisitWorkflowGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGet400JSONResponse APIErrors

func (response WorkflowGet400JSONResponse) VisitWorkflowGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGet403JSONResponse APIErrors

func (response WorkflowGet403JSONResponse) VisitWorkflowGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGet404JSONResponse APIErrors

func (response WorkflowGet404JSONResponse) VisitWorkflowGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowUpdateRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
	Body     *WorkflowUpdateJSONRequestBody
}

type WorkflowUpdateResponseObject interface {
	VisitWorkflowUpdateResponse(w http.ResponseWriter) error
}

type WorkflowUpdate200JSONResponse Workflow

func (response WorkflowUpdate200JSONResponse) VisitWorkflowUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowUpdate400JSONResponse APIErrors

func (response WorkflowUpdate400JSONResponse) VisitWorkflowUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowUpdate403JSONResponse APIErrors

func (response WorkflowUpdate403JSONResponse) VisitWorkflowUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetMetricsRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
	Params   WorkflowGetMetricsParams
}

type WorkflowGetMetricsResponseObject interface {
	VisitWorkflowGetMetricsResponse(w http.ResponseWriter) error
}

type WorkflowGetMetrics200JSONResponse WorkflowMetrics

func (response WorkflowGetMetrics200JSONResponse) VisitWorkflowGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetMetrics400JSONResponse APIErrors

func (response WorkflowGetMetrics400JSONResponse) VisitWorkflowGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetMetrics403JSONResponse APIErrors

func (response WorkflowGetMetrics403JSONResponse) VisitWorkflowGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetMetrics404JSONResponse APIErrors

func (response WorkflowGetMetrics404JSONResponse) VisitWorkflowGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCreateRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
	Params   WorkflowRunCreateParams
	Body     *WorkflowRunCreateJSONRequestBody
}

type WorkflowRunCreateResponseObject interface {
	VisitWorkflowRunCreateResponse(w http.ResponseWriter) error
}

type WorkflowRunCreate200JSONResponse WorkflowRun

func (response WorkflowRunCreate200JSONResponse) VisitWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCreate400JSONResponse APIErrors

func (response WorkflowRunCreate400JSONResponse) VisitWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCreate403JSONResponse APIErrors

func (response WorkflowRunCreate403JSONResponse) VisitWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCreate404JSONResponse APIErrors

func (response WorkflowRunCreate404JSONResponse) VisitWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCreate429JSONResponse APIErrors

func (response WorkflowRunCreate429JSONResponse) VisitWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGetRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
	Params   WorkflowVersionGetParams
}

type WorkflowVersionGetResponseObject interface {
	VisitWorkflowVersionGetResponse(w http.ResponseWriter) error
}

type WorkflowVersionGet200JSONResponse WorkflowVersion

func (response WorkflowVersionGet200JSONResponse) VisitWorkflowVersionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGet400JSONResponse APIErrors

func (response WorkflowVersionGet400JSONResponse) VisitWorkflowVersionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGet403JSONResponse APIErrors

func (response WorkflowVersionGet403JSONResponse) VisitWorkflowVersionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGet404JSONResponse APIErrors

func (response WorkflowVersionGet404JSONResponse) VisitWorkflowVersionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StrictServerInterface interface {
	LivenessGet(ctx echo.Context, request LivenessGetRequestObject) (LivenessGetResponseObject, error)

	ReadinessGet(ctx echo.Context, request ReadinessGetRequestObject) (ReadinessGetResponseObject, error)

	AlertEmailGroupDelete(ctx echo.Context, request AlertEmailGroupDeleteRequestObject) (AlertEmailGroupDeleteResponseObject, error)

	AlertEmailGroupUpdate(ctx echo.Context, request AlertEmailGroupUpdateRequestObject) (AlertEmailGroupUpdateResponseObject, error)

	ApiTokenUpdateRevoke(ctx echo.Context, request ApiTokenUpdateRevokeRequestObject) (ApiTokenUpdateRevokeResponseObject, error)

	CloudMetadataGet(ctx echo.Context, request CloudMetadataGetRequestObject) (CloudMetadataGetResponseObject, error)

	EventGet(ctx echo.Context, request EventGetRequestObject) (EventGetResponseObject, error)

	EventDataGet(ctx echo.Context, request EventDataGetRequestObject) (EventDataGetResponseObject, error)

	MetadataGet(ctx echo.Context, request MetadataGetRequestObject) (MetadataGetResponseObject, error)

	MetadataListIntegrations(ctx echo.Context, request MetadataListIntegrationsRequestObject) (MetadataListIntegrationsResponseObject, error)

	MonitoringPostRunProbe(ctx echo.Context, request MonitoringPostRunProbeRequestObject) (MonitoringPostRunProbeResponseObject, error)

	SlackWebhookDelete(ctx echo.Context, request SlackWebhookDeleteRequestObject) (SlackWebhookDeleteResponseObject, error)

	SnsDelete(ctx echo.Context, request SnsDeleteRequestObject) (SnsDeleteResponseObject, error)

	SnsUpdate(ctx echo.Context, request SnsUpdateRequestObject) (SnsUpdateResponseObject, error)

	V1DagListTasks(ctx echo.Context, request V1DagListTasksRequestObject) (V1DagListTasksResponseObject, error)

	V1TaskGet(ctx echo.Context, request V1TaskGetRequestObject) (V1TaskGetResponseObject, error)

	V1LogLineList(ctx echo.Context, request V1LogLineListRequestObject) (V1LogLineListResponseObject, error)

	V1TaskEventList(ctx echo.Context, request V1TaskEventListRequestObject) (V1TaskEventListResponseObject, error)

	V1EventList(ctx echo.Context, request V1EventListRequestObject) (V1EventListResponseObject, error)

	V1FilterList(ctx echo.Context, request V1FilterListRequestObject) (V1FilterListResponseObject, error)

	V1FilterCreate(ctx echo.Context, request V1FilterCreateRequestObject) (V1FilterCreateResponseObject, error)

	V1FilterDelete(ctx echo.Context, request V1FilterDeleteRequestObject) (V1FilterDeleteResponseObject, error)

	V1FilterGet(ctx echo.Context, request V1FilterGetRequestObject) (V1FilterGetResponseObject, error)

	V1FilterUpdate(ctx echo.Context, request V1FilterUpdateRequestObject) (V1FilterUpdateResponseObject, error)

	V1TaskListStatusMetrics(ctx echo.Context, request V1TaskListStatusMetricsRequestObject) (V1TaskListStatusMetricsResponseObject, error)

	V1TaskGetPointMetrics(ctx echo.Context, request V1TaskGetPointMetricsRequestObject) (V1TaskGetPointMetricsResponseObject, error)

	V1TaskCancel(ctx echo.Context, request V1TaskCancelRequestObject) (V1TaskCancelResponseObject, error)

	V1TaskReplay(ctx echo.Context, request V1TaskReplayRequestObject) (V1TaskReplayResponseObject, error)

	V1WorkflowRunList(ctx echo.Context, request V1WorkflowRunListRequestObject) (V1WorkflowRunListResponseObject, error)

	V1WorkflowRunDisplayNamesList(ctx echo.Context, request V1WorkflowRunDisplayNamesListRequestObject) (V1WorkflowRunDisplayNamesListResponseObject, error)

	V1WorkflowRunCreate(ctx echo.Context, request V1WorkflowRunCreateRequestObject) (V1WorkflowRunCreateResponseObject, error)

	V1WorkflowRunGet(ctx echo.Context, request V1WorkflowRunGetRequestObject) (V1WorkflowRunGetResponseObject, error)

	V1WorkflowRunGetStatus(ctx echo.Context, request V1WorkflowRunGetStatusRequestObject) (V1WorkflowRunGetStatusResponseObject, error)

	V1WorkflowRunTaskEventsList(ctx echo.Context, request V1WorkflowRunTaskEventsListRequestObject) (V1WorkflowRunTaskEventsListResponseObject, error)

	V1WorkflowRunGetTimings(ctx echo.Context, request V1WorkflowRunGetTimingsRequestObject) (V1WorkflowRunGetTimingsResponseObject, error)

	StepRunListArchives(ctx echo.Context, request StepRunListArchivesRequestObject) (StepRunListArchivesResponseObject, error)

	StepRunListEvents(ctx echo.Context, request StepRunListEventsRequestObject) (StepRunListEventsResponseObject, error)

	LogLineList(ctx echo.Context, request LogLineListRequestObject) (LogLineListResponseObject, error)

	TenantCreate(ctx echo.Context, request TenantCreateRequestObject) (TenantCreateResponseObject, error)

	TenantGet(ctx echo.Context, request TenantGetRequestObject) (TenantGetResponseObject, error)

	TenantUpdate(ctx echo.Context, request TenantUpdateRequestObject) (TenantUpdateResponseObject, error)

	AlertEmailGroupList(ctx echo.Context, request AlertEmailGroupListRequestObject) (AlertEmailGroupListResponseObject, error)

	AlertEmailGroupCreate(ctx echo.Context, request AlertEmailGroupCreateRequestObject) (AlertEmailGroupCreateResponseObject, error)

	TenantAlertingSettingsGet(ctx echo.Context, request TenantAlertingSettingsGetRequestObject) (TenantAlertingSettingsGetResponseObject, error)

	ApiTokenList(ctx echo.Context, request ApiTokenListRequestObject) (ApiTokenListResponseObject, error)

	ApiTokenCreate(ctx echo.Context, request ApiTokenCreateRequestObject) (ApiTokenCreateResponseObject, error)

	EventList(ctx echo.Context, request EventListRequestObject) (EventListResponseObject, error)

	EventCreate(ctx echo.Context, request EventCreateRequestObject) (EventCreateResponseObject, error)

	EventCreateBulk(ctx echo.Context, request EventCreateBulkRequestObject) (EventCreateBulkResponseObject, error)

	EventUpdateCancel(ctx echo.Context, request EventUpdateCancelRequestObject) (EventUpdateCancelResponseObject, error)

	EventKeyList(ctx echo.Context, request EventKeyListRequestObject) (EventKeyListResponseObject, error)

	EventUpdateReplay(ctx echo.Context, request EventUpdateReplayRequestObject) (EventUpdateReplayResponseObject, error)

	TenantInviteList(ctx echo.Context, request TenantInviteListRequestObject) (TenantInviteListResponseObject, error)

	TenantInviteCreate(ctx echo.Context, request TenantInviteCreateRequestObject) (TenantInviteCreateResponseObject, error)

	TenantInviteDelete(ctx echo.Context, request TenantInviteDeleteRequestObject) (TenantInviteDeleteResponseObject, error)

	TenantInviteUpdate(ctx echo.Context, request TenantInviteUpdateRequestObject) (TenantInviteUpdateResponseObject, error)

	TenantMemberList(ctx echo.Context, request TenantMemberListRequestObject) (TenantMemberListResponseObject, error)

	TenantMemberDelete(ctx echo.Context, request TenantMemberDeleteRequestObject) (TenantMemberDeleteResponseObject, error)

	TenantGetQueueMetrics(ctx echo.Context, request TenantGetQueueMetricsRequestObject) (TenantGetQueueMetricsResponseObject, error)

	RateLimitList(ctx echo.Context, request RateLimitListRequestObject) (RateLimitListResponseObject, error)

	TenantResourcePolicyGet(ctx echo.Context, request TenantResourcePolicyGetRequestObject) (TenantResourcePolicyGetResponseObject, error)

	SlackWebhookList(ctx echo.Context, request SlackWebhookListRequestObject) (SlackWebhookListResponseObject, error)

	UserUpdateSlackOauthStart(ctx echo.Context, request UserUpdateSlackOauthStartRequestObject) (UserUpdateSlackOauthStartResponseObject, error)

	SnsList(ctx echo.Context, request SnsListRequestObject) (SnsListResponseObject, error)

	SnsCreate(ctx echo.Context, request SnsCreateRequestObject) (SnsCreateResponseObject, error)

	TenantGetStepRunQueueMetrics(ctx echo.Context, request TenantGetStepRunQueueMetricsRequestObject) (TenantGetStepRunQueueMetricsResponseObject, error)

	StepRunGet(ctx echo.Context, request StepRunGetRequestObject) (StepRunGetResponseObject, error)

	StepRunUpdateCancel(ctx echo.Context, request StepRunUpdateCancelRequestObject) (StepRunUpdateCancelResponseObject, error)

	StepRunUpdateRerun(ctx echo.Context, request StepRunUpdateRerunRequestObject) (StepRunUpdateRerunResponseObject, error)

	StepRunGetSchema(ctx echo.Context, request StepRunGetSchemaRequestObject) (StepRunGetSchemaResponseObject, error)

	WebhookList(ctx echo.Context, request WebhookListRequestObject) (WebhookListResponseObject, error)

	WebhookCreate(ctx echo.Context, request WebhookCreateRequestObject) (WebhookCreateResponseObject, error)

	WorkerList(ctx echo.Context, request WorkerListRequestObject) (WorkerListResponseObject, error)

	WorkflowRunUpdateReplay(ctx echo.Context, request WorkflowRunUpdateReplayRequestObject) (WorkflowRunUpdateReplayResponseObject, error)

	WorkflowRunGet(ctx echo.Context, request WorkflowRunGetRequestObject) (WorkflowRunGetResponseObject, error)

	WorkflowRunGetInput(ctx echo.Context, request WorkflowRunGetInputRequestObject) (WorkflowRunGetInputResponseObject, error)

	WorkflowRunGetShape(ctx echo.Context, request WorkflowRunGetShapeRequestObject) (WorkflowRunGetShapeResponseObject, error)

	WorkflowRunListStepRunEvents(ctx echo.Context, request WorkflowRunListStepRunEventsRequestObject) (WorkflowRunListStepRunEventsResponseObject, error)

	WorkflowList(ctx echo.Context, request WorkflowListRequestObject) (WorkflowListResponseObject, error)

	WorkflowRunCancel(ctx echo.Context, request WorkflowRunCancelRequestObject) (WorkflowRunCancelResponseObject, error)

	CronWorkflowList(ctx echo.Context, request CronWorkflowListRequestObject) (CronWorkflowListResponseObject, error)

	WorkflowCronDelete(ctx echo.Context, request WorkflowCronDeleteRequestObject) (WorkflowCronDeleteResponseObject, error)

	WorkflowCronGet(ctx echo.Context, request WorkflowCronGetRequestObject) (WorkflowCronGetResponseObject, error)

	WorkflowRunList(ctx echo.Context, request WorkflowRunListRequestObject) (WorkflowRunListResponseObject, error)

	WorkflowRunGetMetrics(ctx echo.Context, request WorkflowRunGetMetricsRequestObject) (WorkflowRunGetMetricsResponseObject, error)

	WorkflowScheduledList(ctx echo.Context, request WorkflowScheduledListRequestObject) (WorkflowScheduledListResponseObject, error)

	WorkflowScheduledDelete(ctx echo.Context, request WorkflowScheduledDeleteRequestObject) (WorkflowScheduledDeleteResponseObject, error)

	WorkflowScheduledGet(ctx echo.Context, request WorkflowScheduledGetRequestObject) (WorkflowScheduledGetResponseObject, error)

	CronWorkflowTriggerCreate(ctx echo.Context, request CronWorkflowTriggerCreateRequestObject) (CronWorkflowTriggerCreateResponseObject, error)

	ScheduledWorkflowRunCreate(ctx echo.Context, request ScheduledWorkflowRunCreateRequestObject) (ScheduledWorkflowRunCreateResponseObject, error)

	WorkflowGetWorkersCount(ctx echo.Context, request WorkflowGetWorkersCountRequestObject) (WorkflowGetWorkersCountResponseObject, error)

	UserGetCurrent(ctx echo.Context, request UserGetCurrentRequestObject) (UserGetCurrentResponseObject, error)

	UserUpdateGithubOauthCallback(ctx echo.Context, request UserUpdateGithubOauthCallbackRequestObject) (UserUpdateGithubOauthCallbackResponseObject, error)

	UserUpdateGithubOauthStart(ctx echo.Context, request UserUpdateGithubOauthStartRequestObject) (UserUpdateGithubOauthStartResponseObject, error)

	UserUpdateGoogleOauthCallback(ctx echo.Context, request UserUpdateGoogleOauthCallbackRequestObject) (UserUpdateGoogleOauthCallbackResponseObject, error)

	UserUpdateGoogleOauthStart(ctx echo.Context, request UserUpdateGoogleOauthStartRequestObject) (UserUpdateGoogleOauthStartResponseObject, error)

	UserListTenantInvites(ctx echo.Context, request UserListTenantInvitesRequestObject) (UserListTenantInvitesResponseObject, error)

	TenantInviteAccept(ctx echo.Context, request TenantInviteAcceptRequestObject) (TenantInviteAcceptResponseObject, error)

	TenantInviteReject(ctx echo.Context, request TenantInviteRejectRequestObject) (TenantInviteRejectResponseObject, error)

	UserUpdateLogin(ctx echo.Context, request UserUpdateLoginRequestObject) (UserUpdateLoginResponseObject, error)

	UserUpdateLogout(ctx echo.Context, request UserUpdateLogoutRequestObject) (UserUpdateLogoutResponseObject, error)

	TenantMembershipsList(ctx echo.Context, request TenantMembershipsListRequestObject) (TenantMembershipsListResponseObject, error)

	UserUpdatePassword(ctx echo.Context, request UserUpdatePasswordRequestObject) (UserUpdatePasswordResponseObject, error)

	UserCreate(ctx echo.Context, request UserCreateRequestObject) (UserCreateResponseObject, error)

	UserUpdateSlackOauthCallback(ctx echo.Context, request UserUpdateSlackOauthCallbackRequestObject) (UserUpdateSlackOauthCallbackResponseObject, error)

	InfoGetVersion(ctx echo.Context, request InfoGetVersionRequestObject) (InfoGetVersionResponseObject, error)

	WebhookDelete(ctx echo.Context, request WebhookDeleteRequestObject) (WebhookDeleteResponseObject, error)

	WebhookRequestsList(ctx echo.Context, request WebhookRequestsListRequestObject) (WebhookRequestsListResponseObject, error)

	WorkerGet(ctx echo.Context, request WorkerGetRequestObject) (WorkerGetResponseObject, error)

	WorkerUpdate(ctx echo.Context, request WorkerUpdateRequestObject) (WorkerUpdateResponseObject, error)

	WorkflowDelete(ctx echo.Context, request WorkflowDeleteRequestObject) (WorkflowDeleteResponseObject, error)

	WorkflowGet(ctx echo.Context, request WorkflowGetRequestObject) (WorkflowGetResponseObject, error)

	WorkflowUpdate(ctx echo.Context, request WorkflowUpdateRequestObject) (WorkflowUpdateResponseObject, error)

	WorkflowGetMetrics(ctx echo.Context, request WorkflowGetMetricsRequestObject) (WorkflowGetMetricsResponseObject, error)

	WorkflowRunCreate(ctx echo.Context, request WorkflowRunCreateRequestObject) (WorkflowRunCreateResponseObject, error)

	WorkflowVersionGet(ctx echo.Context, request WorkflowVersionGetRequestObject) (WorkflowVersionGetResponseObject, error)
}
type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)
type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// LivenessGet operation middleware
func (sh *strictHandler) LivenessGet(ctx echo.Context) error {
	var request LivenessGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LivenessGet(ctx, request.(LivenessGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LivenessGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LivenessGetResponseObject); ok {
		return validResponse.VisitLivenessGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ReadinessGet operation middleware
func (sh *strictHandler) ReadinessGet(ctx echo.Context) error {
	var request ReadinessGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadinessGet(ctx, request.(ReadinessGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadinessGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReadinessGetResponseObject); ok {
		return validResponse.VisitReadinessGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AlertEmailGroupDelete operation middleware
func (sh *strictHandler) AlertEmailGroupDelete(ctx echo.Context, alertEmailGroup openapi_types.UUID) error {
	var request AlertEmailGroupDeleteRequestObject

	request.AlertEmailGroup = alertEmailGroup

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlertEmailGroupDelete(ctx, request.(AlertEmailGroupDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlertEmailGroupDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AlertEmailGroupDeleteResponseObject); ok {
		return validResponse.VisitAlertEmailGroupDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AlertEmailGroupUpdate operation middleware
func (sh *strictHandler) AlertEmailGroupUpdate(ctx echo.Context, alertEmailGroup openapi_types.UUID) error {
	var request AlertEmailGroupUpdateRequestObject

	request.AlertEmailGroup = alertEmailGroup

	var body AlertEmailGroupUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlertEmailGroupUpdate(ctx, request.(AlertEmailGroupUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlertEmailGroupUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AlertEmailGroupUpdateResponseObject); ok {
		return validResponse.VisitAlertEmailGroupUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ApiTokenUpdateRevoke operation middleware
func (sh *strictHandler) ApiTokenUpdateRevoke(ctx echo.Context, apiToken openapi_types.UUID) error {
	var request ApiTokenUpdateRevokeRequestObject

	request.ApiToken = apiToken

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApiTokenUpdateRevoke(ctx, request.(ApiTokenUpdateRevokeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApiTokenUpdateRevoke")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApiTokenUpdateRevokeResponseObject); ok {
		return validResponse.VisitApiTokenUpdateRevokeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CloudMetadataGet operation middleware
func (sh *strictHandler) CloudMetadataGet(ctx echo.Context) error {
	var request CloudMetadataGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CloudMetadataGet(ctx, request.(CloudMetadataGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CloudMetadataGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CloudMetadataGetResponseObject); ok {
		return validResponse.VisitCloudMetadataGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventGet operation middleware
func (sh *strictHandler) EventGet(ctx echo.Context, event openapi_types.UUID) error {
	var request EventGetRequestObject

	request.Event = event

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventGet(ctx, request.(EventGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventGetResponseObject); ok {
		return validResponse.VisitEventGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventDataGet operation middleware
func (sh *strictHandler) EventDataGet(ctx echo.Context, event openapi_types.UUID) error {
	var request EventDataGetRequestObject

	request.Event = event

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventDataGet(ctx, request.(EventDataGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventDataGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventDataGetResponseObject); ok {
		return validResponse.VisitEventDataGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MetadataGet operation middleware
func (sh *strictHandler) MetadataGet(ctx echo.Context) error {
	var request MetadataGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MetadataGet(ctx, request.(MetadataGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MetadataGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MetadataGetResponseObject); ok {
		return validResponse.VisitMetadataGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MetadataListIntegrations operation middleware
func (sh *strictHandler) MetadataListIntegrations(ctx echo.Context) error {
	var request MetadataListIntegrationsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MetadataListIntegrations(ctx, request.(MetadataListIntegrationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MetadataListIntegrations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MetadataListIntegrationsResponseObject); ok {
		return validResponse.VisitMetadataListIntegrationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MonitoringPostRunProbe operation middleware
func (sh *strictHandler) MonitoringPostRunProbe(ctx echo.Context, tenant openapi_types.UUID) error {
	var request MonitoringPostRunProbeRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MonitoringPostRunProbe(ctx, request.(MonitoringPostRunProbeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MonitoringPostRunProbe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MonitoringPostRunProbeResponseObject); ok {
		return validResponse.VisitMonitoringPostRunProbeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SlackWebhookDelete operation middleware
func (sh *strictHandler) SlackWebhookDelete(ctx echo.Context, slack openapi_types.UUID) error {
	var request SlackWebhookDeleteRequestObject

	request.Slack = slack

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SlackWebhookDelete(ctx, request.(SlackWebhookDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SlackWebhookDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SlackWebhookDeleteResponseObject); ok {
		return validResponse.VisitSlackWebhookDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SnsDelete operation middleware
func (sh *strictHandler) SnsDelete(ctx echo.Context, sns openapi_types.UUID) error {
	var request SnsDeleteRequestObject

	request.Sns = sns

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SnsDelete(ctx, request.(SnsDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SnsDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SnsDeleteResponseObject); ok {
		return validResponse.VisitSnsDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SnsUpdate operation middleware
func (sh *strictHandler) SnsUpdate(ctx echo.Context, tenant openapi_types.UUID, event string) error {
	var request SnsUpdateRequestObject

	request.Tenant = tenant
	request.Event = event

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SnsUpdate(ctx, request.(SnsUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SnsUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SnsUpdateResponseObject); ok {
		return validResponse.VisitSnsUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1DagListTasks operation middleware
func (sh *strictHandler) V1DagListTasks(ctx echo.Context, params V1DagListTasksParams) error {
	var request V1DagListTasksRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1DagListTasks(ctx, request.(V1DagListTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1DagListTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1DagListTasksResponseObject); ok {
		return validResponse.VisitV1DagListTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1TaskGet operation middleware
func (sh *strictHandler) V1TaskGet(ctx echo.Context, task openapi_types.UUID, params V1TaskGetParams) error {
	var request V1TaskGetRequestObject

	request.Task = task
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1TaskGet(ctx, request.(V1TaskGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TaskGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1TaskGetResponseObject); ok {
		return validResponse.VisitV1TaskGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1LogLineList operation middleware
func (sh *strictHandler) V1LogLineList(ctx echo.Context, task openapi_types.UUID) error {
	var request V1LogLineListRequestObject

	request.Task = task

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1LogLineList(ctx, request.(V1LogLineListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1LogLineList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1LogLineListResponseObject); ok {
		return validResponse.VisitV1LogLineListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1TaskEventList operation middleware
func (sh *strictHandler) V1TaskEventList(ctx echo.Context, task openapi_types.UUID, params V1TaskEventListParams) error {
	var request V1TaskEventListRequestObject

	request.Task = task
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1TaskEventList(ctx, request.(V1TaskEventListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TaskEventList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1TaskEventListResponseObject); ok {
		return validResponse.VisitV1TaskEventListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1EventList operation middleware
func (sh *strictHandler) V1EventList(ctx echo.Context, tenant openapi_types.UUID, params V1EventListParams) error {
	var request V1EventListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1EventList(ctx, request.(V1EventListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1EventList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1EventListResponseObject); ok {
		return validResponse.VisitV1EventListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1FilterList operation middleware
func (sh *strictHandler) V1FilterList(ctx echo.Context, tenant openapi_types.UUID, params V1FilterListParams) error {
	var request V1FilterListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1FilterList(ctx, request.(V1FilterListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1FilterList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1FilterListResponseObject); ok {
		return validResponse.VisitV1FilterListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1FilterCreate operation middleware
func (sh *strictHandler) V1FilterCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request V1FilterCreateRequestObject

	request.Tenant = tenant

	var body V1FilterCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1FilterCreate(ctx, request.(V1FilterCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1FilterCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1FilterCreateResponseObject); ok {
		return validResponse.VisitV1FilterCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1FilterDelete operation middleware
func (sh *strictHandler) V1FilterDelete(ctx echo.Context, tenant openapi_types.UUID, v1Filter openapi_types.UUID) error {
	var request V1FilterDeleteRequestObject

	request.Tenant = tenant
	request.V1Filter = v1Filter

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1FilterDelete(ctx, request.(V1FilterDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1FilterDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1FilterDeleteResponseObject); ok {
		return validResponse.VisitV1FilterDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1FilterGet operation middleware
func (sh *strictHandler) V1FilterGet(ctx echo.Context, tenant openapi_types.UUID, v1Filter openapi_types.UUID) error {
	var request V1FilterGetRequestObject

	request.Tenant = tenant
	request.V1Filter = v1Filter

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1FilterGet(ctx, request.(V1FilterGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1FilterGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1FilterGetResponseObject); ok {
		return validResponse.VisitV1FilterGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1FilterUpdate operation middleware
func (sh *strictHandler) V1FilterUpdate(ctx echo.Context, tenant openapi_types.UUID, v1Filter openapi_types.UUID) error {
	var request V1FilterUpdateRequestObject

	request.Tenant = tenant
	request.V1Filter = v1Filter

	var body V1FilterUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1FilterUpdate(ctx, request.(V1FilterUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1FilterUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1FilterUpdateResponseObject); ok {
		return validResponse.VisitV1FilterUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1TaskListStatusMetrics operation middleware
func (sh *strictHandler) V1TaskListStatusMetrics(ctx echo.Context, tenant openapi_types.UUID, params V1TaskListStatusMetricsParams) error {
	var request V1TaskListStatusMetricsRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1TaskListStatusMetrics(ctx, request.(V1TaskListStatusMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TaskListStatusMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1TaskListStatusMetricsResponseObject); ok {
		return validResponse.VisitV1TaskListStatusMetricsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1TaskGetPointMetrics operation middleware
func (sh *strictHandler) V1TaskGetPointMetrics(ctx echo.Context, tenant openapi_types.UUID, params V1TaskGetPointMetricsParams) error {
	var request V1TaskGetPointMetricsRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1TaskGetPointMetrics(ctx, request.(V1TaskGetPointMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TaskGetPointMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1TaskGetPointMetricsResponseObject); ok {
		return validResponse.VisitV1TaskGetPointMetricsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1TaskCancel operation middleware
func (sh *strictHandler) V1TaskCancel(ctx echo.Context, tenant openapi_types.UUID) error {
	var request V1TaskCancelRequestObject

	request.Tenant = tenant

	var body V1TaskCancelJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1TaskCancel(ctx, request.(V1TaskCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TaskCancel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1TaskCancelResponseObject); ok {
		return validResponse.VisitV1TaskCancelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1TaskReplay operation middleware
func (sh *strictHandler) V1TaskReplay(ctx echo.Context, tenant openapi_types.UUID) error {
	var request V1TaskReplayRequestObject

	request.Tenant = tenant

	var body V1TaskReplayJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1TaskReplay(ctx, request.(V1TaskReplayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TaskReplay")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1TaskReplayResponseObject); ok {
		return validResponse.VisitV1TaskReplayResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1WorkflowRunList operation middleware
func (sh *strictHandler) V1WorkflowRunList(ctx echo.Context, tenant openapi_types.UUID, params V1WorkflowRunListParams) error {
	var request V1WorkflowRunListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1WorkflowRunList(ctx, request.(V1WorkflowRunListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1WorkflowRunList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1WorkflowRunListResponseObject); ok {
		return validResponse.VisitV1WorkflowRunListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1WorkflowRunDisplayNamesList operation middleware
func (sh *strictHandler) V1WorkflowRunDisplayNamesList(ctx echo.Context, tenant openapi_types.UUID, params V1WorkflowRunDisplayNamesListParams) error {
	var request V1WorkflowRunDisplayNamesListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1WorkflowRunDisplayNamesList(ctx, request.(V1WorkflowRunDisplayNamesListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1WorkflowRunDisplayNamesList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1WorkflowRunDisplayNamesListResponseObject); ok {
		return validResponse.VisitV1WorkflowRunDisplayNamesListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1WorkflowRunCreate operation middleware
func (sh *strictHandler) V1WorkflowRunCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request V1WorkflowRunCreateRequestObject

	request.Tenant = tenant

	var body V1WorkflowRunCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1WorkflowRunCreate(ctx, request.(V1WorkflowRunCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1WorkflowRunCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1WorkflowRunCreateResponseObject); ok {
		return validResponse.VisitV1WorkflowRunCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1WorkflowRunGet operation middleware
func (sh *strictHandler) V1WorkflowRunGet(ctx echo.Context, v1WorkflowRun openapi_types.UUID) error {
	var request V1WorkflowRunGetRequestObject

	request.V1WorkflowRun = v1WorkflowRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1WorkflowRunGet(ctx, request.(V1WorkflowRunGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1WorkflowRunGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1WorkflowRunGetResponseObject); ok {
		return validResponse.VisitV1WorkflowRunGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1WorkflowRunGetStatus operation middleware
func (sh *strictHandler) V1WorkflowRunGetStatus(ctx echo.Context, v1WorkflowRun openapi_types.UUID) error {
	var request V1WorkflowRunGetStatusRequestObject

	request.V1WorkflowRun = v1WorkflowRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1WorkflowRunGetStatus(ctx, request.(V1WorkflowRunGetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1WorkflowRunGetStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1WorkflowRunGetStatusResponseObject); ok {
		return validResponse.VisitV1WorkflowRunGetStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1WorkflowRunTaskEventsList operation middleware
func (sh *strictHandler) V1WorkflowRunTaskEventsList(ctx echo.Context, v1WorkflowRun openapi_types.UUID, params V1WorkflowRunTaskEventsListParams) error {
	var request V1WorkflowRunTaskEventsListRequestObject

	request.V1WorkflowRun = v1WorkflowRun
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1WorkflowRunTaskEventsList(ctx, request.(V1WorkflowRunTaskEventsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1WorkflowRunTaskEventsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1WorkflowRunTaskEventsListResponseObject); ok {
		return validResponse.VisitV1WorkflowRunTaskEventsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1WorkflowRunGetTimings operation middleware
func (sh *strictHandler) V1WorkflowRunGetTimings(ctx echo.Context, v1WorkflowRun openapi_types.UUID, params V1WorkflowRunGetTimingsParams) error {
	var request V1WorkflowRunGetTimingsRequestObject

	request.V1WorkflowRun = v1WorkflowRun
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1WorkflowRunGetTimings(ctx, request.(V1WorkflowRunGetTimingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1WorkflowRunGetTimings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1WorkflowRunGetTimingsResponseObject); ok {
		return validResponse.VisitV1WorkflowRunGetTimingsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunListArchives operation middleware
func (sh *strictHandler) StepRunListArchives(ctx echo.Context, stepRun openapi_types.UUID, params StepRunListArchivesParams) error {
	var request StepRunListArchivesRequestObject

	request.StepRun = stepRun
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunListArchives(ctx, request.(StepRunListArchivesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunListArchives")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunListArchivesResponseObject); ok {
		return validResponse.VisitStepRunListArchivesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunListEvents operation middleware
func (sh *strictHandler) StepRunListEvents(ctx echo.Context, stepRun openapi_types.UUID, params StepRunListEventsParams) error {
	var request StepRunListEventsRequestObject

	request.StepRun = stepRun
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunListEvents(ctx, request.(StepRunListEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunListEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunListEventsResponseObject); ok {
		return validResponse.VisitStepRunListEventsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// LogLineList operation middleware
func (sh *strictHandler) LogLineList(ctx echo.Context, stepRun openapi_types.UUID, params LogLineListParams) error {
	var request LogLineListRequestObject

	request.StepRun = stepRun
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LogLineList(ctx, request.(LogLineListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogLineList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogLineListResponseObject); ok {
		return validResponse.VisitLogLineListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantCreate operation middleware
func (sh *strictHandler) TenantCreate(ctx echo.Context) error {
	var request TenantCreateRequestObject

	var body TenantCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantCreate(ctx, request.(TenantCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantCreateResponseObject); ok {
		return validResponse.VisitTenantCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantGet operation middleware
func (sh *strictHandler) TenantGet(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantGetRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantGet(ctx, request.(TenantGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantGetResponseObject); ok {
		return validResponse.VisitTenantGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantUpdate operation middleware
func (sh *strictHandler) TenantUpdate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantUpdateRequestObject

	request.Tenant = tenant

	var body TenantUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantUpdate(ctx, request.(TenantUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantUpdateResponseObject); ok {
		return validResponse.VisitTenantUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AlertEmailGroupList operation middleware
func (sh *strictHandler) AlertEmailGroupList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request AlertEmailGroupListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlertEmailGroupList(ctx, request.(AlertEmailGroupListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlertEmailGroupList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AlertEmailGroupListResponseObject); ok {
		return validResponse.VisitAlertEmailGroupListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AlertEmailGroupCreate operation middleware
func (sh *strictHandler) AlertEmailGroupCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request AlertEmailGroupCreateRequestObject

	request.Tenant = tenant

	var body AlertEmailGroupCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlertEmailGroupCreate(ctx, request.(AlertEmailGroupCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlertEmailGroupCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AlertEmailGroupCreateResponseObject); ok {
		return validResponse.VisitAlertEmailGroupCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantAlertingSettingsGet operation middleware
func (sh *strictHandler) TenantAlertingSettingsGet(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantAlertingSettingsGetRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantAlertingSettingsGet(ctx, request.(TenantAlertingSettingsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantAlertingSettingsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantAlertingSettingsGetResponseObject); ok {
		return validResponse.VisitTenantAlertingSettingsGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ApiTokenList operation middleware
func (sh *strictHandler) ApiTokenList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request ApiTokenListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApiTokenList(ctx, request.(ApiTokenListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApiTokenList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApiTokenListResponseObject); ok {
		return validResponse.VisitApiTokenListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ApiTokenCreate operation middleware
func (sh *strictHandler) ApiTokenCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request ApiTokenCreateRequestObject

	request.Tenant = tenant

	var body ApiTokenCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApiTokenCreate(ctx, request.(ApiTokenCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApiTokenCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApiTokenCreateResponseObject); ok {
		return validResponse.VisitApiTokenCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventList operation middleware
func (sh *strictHandler) EventList(ctx echo.Context, tenant openapi_types.UUID, params EventListParams) error {
	var request EventListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventList(ctx, request.(EventListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventListResponseObject); ok {
		return validResponse.VisitEventListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventCreate operation middleware
func (sh *strictHandler) EventCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request EventCreateRequestObject

	request.Tenant = tenant

	var body EventCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventCreate(ctx, request.(EventCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventCreateResponseObject); ok {
		return validResponse.VisitEventCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventCreateBulk operation middleware
func (sh *strictHandler) EventCreateBulk(ctx echo.Context, tenant openapi_types.UUID) error {
	var request EventCreateBulkRequestObject

	request.Tenant = tenant

	var body EventCreateBulkJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventCreateBulk(ctx, request.(EventCreateBulkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventCreateBulk")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventCreateBulkResponseObject); ok {
		return validResponse.VisitEventCreateBulkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventUpdateCancel operation middleware
func (sh *strictHandler) EventUpdateCancel(ctx echo.Context, tenant openapi_types.UUID) error {
	var request EventUpdateCancelRequestObject

	request.Tenant = tenant

	var body EventUpdateCancelJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventUpdateCancel(ctx, request.(EventUpdateCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventUpdateCancel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventUpdateCancelResponseObject); ok {
		return validResponse.VisitEventUpdateCancelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventKeyList operation middleware
func (sh *strictHandler) EventKeyList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request EventKeyListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventKeyList(ctx, request.(EventKeyListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventKeyList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventKeyListResponseObject); ok {
		return validResponse.VisitEventKeyListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventUpdateReplay operation middleware
func (sh *strictHandler) EventUpdateReplay(ctx echo.Context, tenant openapi_types.UUID) error {
	var request EventUpdateReplayRequestObject

	request.Tenant = tenant

	var body EventUpdateReplayJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventUpdateReplay(ctx, request.(EventUpdateReplayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventUpdateReplay")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventUpdateReplayResponseObject); ok {
		return validResponse.VisitEventUpdateReplayResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteList operation middleware
func (sh *strictHandler) TenantInviteList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantInviteListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteList(ctx, request.(TenantInviteListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteListResponseObject); ok {
		return validResponse.VisitTenantInviteListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteCreate operation middleware
func (sh *strictHandler) TenantInviteCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantInviteCreateRequestObject

	request.Tenant = tenant

	var body TenantInviteCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteCreate(ctx, request.(TenantInviteCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteCreateResponseObject); ok {
		return validResponse.VisitTenantInviteCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteDelete operation middleware
func (sh *strictHandler) TenantInviteDelete(ctx echo.Context, tenant openapi_types.UUID, tenantInvite openapi_types.UUID) error {
	var request TenantInviteDeleteRequestObject

	request.Tenant = tenant
	request.TenantInvite = tenantInvite

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteDelete(ctx, request.(TenantInviteDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteDeleteResponseObject); ok {
		return validResponse.VisitTenantInviteDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteUpdate operation middleware
func (sh *strictHandler) TenantInviteUpdate(ctx echo.Context, tenant openapi_types.UUID, tenantInvite openapi_types.UUID) error {
	var request TenantInviteUpdateRequestObject

	request.Tenant = tenant
	request.TenantInvite = tenantInvite

	var body TenantInviteUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteUpdate(ctx, request.(TenantInviteUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteUpdateResponseObject); ok {
		return validResponse.VisitTenantInviteUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantMemberList operation middleware
func (sh *strictHandler) TenantMemberList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantMemberListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantMemberList(ctx, request.(TenantMemberListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantMemberList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantMemberListResponseObject); ok {
		return validResponse.VisitTenantMemberListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantMemberDelete operation middleware
func (sh *strictHandler) TenantMemberDelete(ctx echo.Context, tenant openapi_types.UUID, member openapi_types.UUID) error {
	var request TenantMemberDeleteRequestObject

	request.Tenant = tenant
	request.Member = member

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantMemberDelete(ctx, request.(TenantMemberDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantMemberDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantMemberDeleteResponseObject); ok {
		return validResponse.VisitTenantMemberDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantGetQueueMetrics operation middleware
func (sh *strictHandler) TenantGetQueueMetrics(ctx echo.Context, tenant openapi_types.UUID, params TenantGetQueueMetricsParams) error {
	var request TenantGetQueueMetricsRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantGetQueueMetrics(ctx, request.(TenantGetQueueMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantGetQueueMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantGetQueueMetricsResponseObject); ok {
		return validResponse.VisitTenantGetQueueMetricsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RateLimitList operation middleware
func (sh *strictHandler) RateLimitList(ctx echo.Context, tenant openapi_types.UUID, params RateLimitListParams) error {
	var request RateLimitListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RateLimitList(ctx, request.(RateLimitListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RateLimitList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RateLimitListResponseObject); ok {
		return validResponse.VisitRateLimitListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantResourcePolicyGet operation middleware
func (sh *strictHandler) TenantResourcePolicyGet(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantResourcePolicyGetRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantResourcePolicyGet(ctx, request.(TenantResourcePolicyGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantResourcePolicyGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantResourcePolicyGetResponseObject); ok {
		return validResponse.VisitTenantResourcePolicyGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SlackWebhookList operation middleware
func (sh *strictHandler) SlackWebhookList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request SlackWebhookListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SlackWebhookList(ctx, request.(SlackWebhookListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SlackWebhookList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SlackWebhookListResponseObject); ok {
		return validResponse.VisitSlackWebhookListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateSlackOauthStart operation middleware
func (sh *strictHandler) UserUpdateSlackOauthStart(ctx echo.Context, tenant openapi_types.UUID) error {
	var request UserUpdateSlackOauthStartRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateSlackOauthStart(ctx, request.(UserUpdateSlackOauthStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateSlackOauthStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateSlackOauthStartResponseObject); ok {
		return validResponse.VisitUserUpdateSlackOauthStartResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SnsList operation middleware
func (sh *strictHandler) SnsList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request SnsListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SnsList(ctx, request.(SnsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SnsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SnsListResponseObject); ok {
		return validResponse.VisitSnsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SnsCreate operation middleware
func (sh *strictHandler) SnsCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request SnsCreateRequestObject

	request.Tenant = tenant

	var body SnsCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SnsCreate(ctx, request.(SnsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SnsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SnsCreateResponseObject); ok {
		return validResponse.VisitSnsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantGetStepRunQueueMetrics operation middleware
func (sh *strictHandler) TenantGetStepRunQueueMetrics(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantGetStepRunQueueMetricsRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantGetStepRunQueueMetrics(ctx, request.(TenantGetStepRunQueueMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantGetStepRunQueueMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantGetStepRunQueueMetricsResponseObject); ok {
		return validResponse.VisitTenantGetStepRunQueueMetricsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunGet operation middleware
func (sh *strictHandler) StepRunGet(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error {
	var request StepRunGetRequestObject

	request.Tenant = tenant
	request.StepRun = stepRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunGet(ctx, request.(StepRunGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunGetResponseObject); ok {
		return validResponse.VisitStepRunGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunUpdateCancel operation middleware
func (sh *strictHandler) StepRunUpdateCancel(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error {
	var request StepRunUpdateCancelRequestObject

	request.Tenant = tenant
	request.StepRun = stepRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunUpdateCancel(ctx, request.(StepRunUpdateCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunUpdateCancel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunUpdateCancelResponseObject); ok {
		return validResponse.VisitStepRunUpdateCancelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunUpdateRerun operation middleware
func (sh *strictHandler) StepRunUpdateRerun(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error {
	var request StepRunUpdateRerunRequestObject

	request.Tenant = tenant
	request.StepRun = stepRun

	var body StepRunUpdateRerunJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunUpdateRerun(ctx, request.(StepRunUpdateRerunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunUpdateRerun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunUpdateRerunResponseObject); ok {
		return validResponse.VisitStepRunUpdateRerunResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunGetSchema operation middleware
func (sh *strictHandler) StepRunGetSchema(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error {
	var request StepRunGetSchemaRequestObject

	request.Tenant = tenant
	request.StepRun = stepRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunGetSchema(ctx, request.(StepRunGetSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunGetSchema")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunGetSchemaResponseObject); ok {
		return validResponse.VisitStepRunGetSchemaResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebhookList operation middleware
func (sh *strictHandler) WebhookList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request WebhookListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebhookList(ctx, request.(WebhookListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebhookList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebhookListResponseObject); ok {
		return validResponse.VisitWebhookListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebhookCreate operation middleware
func (sh *strictHandler) WebhookCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request WebhookCreateRequestObject

	request.Tenant = tenant

	var body WebhookCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebhookCreate(ctx, request.(WebhookCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebhookCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebhookCreateResponseObject); ok {
		return validResponse.VisitWebhookCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkerList operation middleware
func (sh *strictHandler) WorkerList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request WorkerListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkerList(ctx, request.(WorkerListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkerList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkerListResponseObject); ok {
		return validResponse.VisitWorkerListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunUpdateReplay operation middleware
func (sh *strictHandler) WorkflowRunUpdateReplay(ctx echo.Context, tenant openapi_types.UUID) error {
	var request WorkflowRunUpdateReplayRequestObject

	request.Tenant = tenant

	var body WorkflowRunUpdateReplayJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunUpdateReplay(ctx, request.(WorkflowRunUpdateReplayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunUpdateReplay")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunUpdateReplayResponseObject); ok {
		return validResponse.VisitWorkflowRunUpdateReplayResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunGet operation middleware
func (sh *strictHandler) WorkflowRunGet(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID) error {
	var request WorkflowRunGetRequestObject

	request.Tenant = tenant
	request.WorkflowRun = workflowRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunGet(ctx, request.(WorkflowRunGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunGetResponseObject); ok {
		return validResponse.VisitWorkflowRunGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunGetInput operation middleware
func (sh *strictHandler) WorkflowRunGetInput(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID) error {
	var request WorkflowRunGetInputRequestObject

	request.Tenant = tenant
	request.WorkflowRun = workflowRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunGetInput(ctx, request.(WorkflowRunGetInputRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunGetInput")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunGetInputResponseObject); ok {
		return validResponse.VisitWorkflowRunGetInputResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunGetShape operation middleware
func (sh *strictHandler) WorkflowRunGetShape(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID) error {
	var request WorkflowRunGetShapeRequestObject

	request.Tenant = tenant
	request.WorkflowRun = workflowRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunGetShape(ctx, request.(WorkflowRunGetShapeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunGetShape")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunGetShapeResponseObject); ok {
		return validResponse.VisitWorkflowRunGetShapeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunListStepRunEvents operation middleware
func (sh *strictHandler) WorkflowRunListStepRunEvents(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID, params WorkflowRunListStepRunEventsParams) error {
	var request WorkflowRunListStepRunEventsRequestObject

	request.Tenant = tenant
	request.WorkflowRun = workflowRun
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunListStepRunEvents(ctx, request.(WorkflowRunListStepRunEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunListStepRunEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunListStepRunEventsResponseObject); ok {
		return validResponse.VisitWorkflowRunListStepRunEventsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowList operation middleware
func (sh *strictHandler) WorkflowList(ctx echo.Context, tenant openapi_types.UUID, params WorkflowListParams) error {
	var request WorkflowListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowList(ctx, request.(WorkflowListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowListResponseObject); ok {
		return validResponse.VisitWorkflowListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunCancel operation middleware
func (sh *strictHandler) WorkflowRunCancel(ctx echo.Context, tenant openapi_types.UUID) error {
	var request WorkflowRunCancelRequestObject

	request.Tenant = tenant

	var body WorkflowRunCancelJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunCancel(ctx, request.(WorkflowRunCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunCancel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunCancelResponseObject); ok {
		return validResponse.VisitWorkflowRunCancelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CronWorkflowList operation middleware
func (sh *strictHandler) CronWorkflowList(ctx echo.Context, tenant openapi_types.UUID, params CronWorkflowListParams) error {
	var request CronWorkflowListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CronWorkflowList(ctx, request.(CronWorkflowListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CronWorkflowList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CronWorkflowListResponseObject); ok {
		return validResponse.VisitCronWorkflowListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowCronDelete operation middleware
func (sh *strictHandler) WorkflowCronDelete(ctx echo.Context, tenant openapi_types.UUID, cronWorkflow openapi_types.UUID) error {
	var request WorkflowCronDeleteRequestObject

	request.Tenant = tenant
	request.CronWorkflow = cronWorkflow

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowCronDelete(ctx, request.(WorkflowCronDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowCronDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowCronDeleteResponseObject); ok {
		return validResponse.VisitWorkflowCronDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowCronGet operation middleware
func (sh *strictHandler) WorkflowCronGet(ctx echo.Context, tenant openapi_types.UUID, cronWorkflow openapi_types.UUID) error {
	var request WorkflowCronGetRequestObject

	request.Tenant = tenant
	request.CronWorkflow = cronWorkflow

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowCronGet(ctx, request.(WorkflowCronGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowCronGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowCronGetResponseObject); ok {
		return validResponse.VisitWorkflowCronGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunList operation middleware
func (sh *strictHandler) WorkflowRunList(ctx echo.Context, tenant openapi_types.UUID, params WorkflowRunListParams) error {
	var request WorkflowRunListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunList(ctx, request.(WorkflowRunListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunListResponseObject); ok {
		return validResponse.VisitWorkflowRunListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunGetMetrics operation middleware
func (sh *strictHandler) WorkflowRunGetMetrics(ctx echo.Context, tenant openapi_types.UUID, params WorkflowRunGetMetricsParams) error {
	var request WorkflowRunGetMetricsRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunGetMetrics(ctx, request.(WorkflowRunGetMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunGetMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunGetMetricsResponseObject); ok {
		return validResponse.VisitWorkflowRunGetMetricsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowScheduledList operation middleware
func (sh *strictHandler) WorkflowScheduledList(ctx echo.Context, tenant openapi_types.UUID, params WorkflowScheduledListParams) error {
	var request WorkflowScheduledListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowScheduledList(ctx, request.(WorkflowScheduledListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowScheduledList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowScheduledListResponseObject); ok {
		return validResponse.VisitWorkflowScheduledListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowScheduledDelete operation middleware
func (sh *strictHandler) WorkflowScheduledDelete(ctx echo.Context, tenant openapi_types.UUID, scheduledWorkflowRun openapi_types.UUID) error {
	var request WorkflowScheduledDeleteRequestObject

	request.Tenant = tenant
	request.ScheduledWorkflowRun = scheduledWorkflowRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowScheduledDelete(ctx, request.(WorkflowScheduledDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowScheduledDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowScheduledDeleteResponseObject); ok {
		return validResponse.VisitWorkflowScheduledDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowScheduledGet operation middleware
func (sh *strictHandler) WorkflowScheduledGet(ctx echo.Context, tenant openapi_types.UUID, scheduledWorkflowRun openapi_types.UUID) error {
	var request WorkflowScheduledGetRequestObject

	request.Tenant = tenant
	request.ScheduledWorkflowRun = scheduledWorkflowRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowScheduledGet(ctx, request.(WorkflowScheduledGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowScheduledGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowScheduledGetResponseObject); ok {
		return validResponse.VisitWorkflowScheduledGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CronWorkflowTriggerCreate operation middleware
func (sh *strictHandler) CronWorkflowTriggerCreate(ctx echo.Context, tenant openapi_types.UUID, workflow string) error {
	var request CronWorkflowTriggerCreateRequestObject

	request.Tenant = tenant
	request.Workflow = workflow

	var body CronWorkflowTriggerCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CronWorkflowTriggerCreate(ctx, request.(CronWorkflowTriggerCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CronWorkflowTriggerCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CronWorkflowTriggerCreateResponseObject); ok {
		return validResponse.VisitCronWorkflowTriggerCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ScheduledWorkflowRunCreate operation middleware
func (sh *strictHandler) ScheduledWorkflowRunCreate(ctx echo.Context, tenant openapi_types.UUID, workflow string) error {
	var request ScheduledWorkflowRunCreateRequestObject

	request.Tenant = tenant
	request.Workflow = workflow

	var body ScheduledWorkflowRunCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ScheduledWorkflowRunCreate(ctx, request.(ScheduledWorkflowRunCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ScheduledWorkflowRunCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ScheduledWorkflowRunCreateResponseObject); ok {
		return validResponse.VisitScheduledWorkflowRunCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowGetWorkersCount operation middleware
func (sh *strictHandler) WorkflowGetWorkersCount(ctx echo.Context, tenant openapi_types.UUID, workflow openapi_types.UUID) error {
	var request WorkflowGetWorkersCountRequestObject

	request.Tenant = tenant
	request.Workflow = workflow

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowGetWorkersCount(ctx, request.(WorkflowGetWorkersCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowGetWorkersCount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowGetWorkersCountResponseObject); ok {
		return validResponse.VisitWorkflowGetWorkersCountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserGetCurrent operation middleware
func (sh *strictHandler) UserGetCurrent(ctx echo.Context) error {
	var request UserGetCurrentRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserGetCurrent(ctx, request.(UserGetCurrentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserGetCurrent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserGetCurrentResponseObject); ok {
		return validResponse.VisitUserGetCurrentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateGithubOauthCallback operation middleware
func (sh *strictHandler) UserUpdateGithubOauthCallback(ctx echo.Context) error {
	var request UserUpdateGithubOauthCallbackRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateGithubOauthCallback(ctx, request.(UserUpdateGithubOauthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateGithubOauthCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateGithubOauthCallbackResponseObject); ok {
		return validResponse.VisitUserUpdateGithubOauthCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateGithubOauthStart operation middleware
func (sh *strictHandler) UserUpdateGithubOauthStart(ctx echo.Context) error {
	var request UserUpdateGithubOauthStartRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateGithubOauthStart(ctx, request.(UserUpdateGithubOauthStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateGithubOauthStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateGithubOauthStartResponseObject); ok {
		return validResponse.VisitUserUpdateGithubOauthStartResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateGoogleOauthCallback operation middleware
func (sh *strictHandler) UserUpdateGoogleOauthCallback(ctx echo.Context) error {
	var request UserUpdateGoogleOauthCallbackRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateGoogleOauthCallback(ctx, request.(UserUpdateGoogleOauthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateGoogleOauthCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateGoogleOauthCallbackResponseObject); ok {
		return validResponse.VisitUserUpdateGoogleOauthCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateGoogleOauthStart operation middleware
func (sh *strictHandler) UserUpdateGoogleOauthStart(ctx echo.Context) error {
	var request UserUpdateGoogleOauthStartRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateGoogleOauthStart(ctx, request.(UserUpdateGoogleOauthStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateGoogleOauthStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateGoogleOauthStartResponseObject); ok {
		return validResponse.VisitUserUpdateGoogleOauthStartResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserListTenantInvites operation middleware
func (sh *strictHandler) UserListTenantInvites(ctx echo.Context) error {
	var request UserListTenantInvitesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserListTenantInvites(ctx, request.(UserListTenantInvitesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserListTenantInvites")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserListTenantInvitesResponseObject); ok {
		return validResponse.VisitUserListTenantInvitesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteAccept operation middleware
func (sh *strictHandler) TenantInviteAccept(ctx echo.Context) error {
	var request TenantInviteAcceptRequestObject

	var body TenantInviteAcceptJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteAccept(ctx, request.(TenantInviteAcceptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteAccept")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteAcceptResponseObject); ok {
		return validResponse.VisitTenantInviteAcceptResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteReject operation middleware
func (sh *strictHandler) TenantInviteReject(ctx echo.Context) error {
	var request TenantInviteRejectRequestObject

	var body TenantInviteRejectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteReject(ctx, request.(TenantInviteRejectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteReject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteRejectResponseObject); ok {
		return validResponse.VisitTenantInviteRejectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateLogin operation middleware
func (sh *strictHandler) UserUpdateLogin(ctx echo.Context) error {
	var request UserUpdateLoginRequestObject

	var body UserUpdateLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateLogin(ctx, request.(UserUpdateLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateLoginResponseObject); ok {
		return validResponse.VisitUserUpdateLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateLogout operation middleware
func (sh *strictHandler) UserUpdateLogout(ctx echo.Context) error {
	var request UserUpdateLogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateLogout(ctx, request.(UserUpdateLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateLogoutResponseObject); ok {
		return validResponse.VisitUserUpdateLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantMembershipsList operation middleware
func (sh *strictHandler) TenantMembershipsList(ctx echo.Context) error {
	var request TenantMembershipsListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantMembershipsList(ctx, request.(TenantMembershipsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantMembershipsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantMembershipsListResponseObject); ok {
		return validResponse.VisitTenantMembershipsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdatePassword operation middleware
func (sh *strictHandler) UserUpdatePassword(ctx echo.Context) error {
	var request UserUpdatePasswordRequestObject

	var body UserUpdatePasswordJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdatePassword(ctx, request.(UserUpdatePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdatePassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdatePasswordResponseObject); ok {
		return validResponse.VisitUserUpdatePasswordResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserCreate operation middleware
func (sh *strictHandler) UserCreate(ctx echo.Context) error {
	var request UserCreateRequestObject

	var body UserCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserCreate(ctx, request.(UserCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserCreateResponseObject); ok {
		return validResponse.VisitUserCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateSlackOauthCallback operation middleware
func (sh *strictHandler) UserUpdateSlackOauthCallback(ctx echo.Context) error {
	var request UserUpdateSlackOauthCallbackRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateSlackOauthCallback(ctx, request.(UserUpdateSlackOauthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateSlackOauthCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateSlackOauthCallbackResponseObject); ok {
		return validResponse.VisitUserUpdateSlackOauthCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// InfoGetVersion operation middleware
func (sh *strictHandler) InfoGetVersion(ctx echo.Context) error {
	var request InfoGetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InfoGetVersion(ctx, request.(InfoGetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InfoGetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(InfoGetVersionResponseObject); ok {
		return validResponse.VisitInfoGetVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebhookDelete operation middleware
func (sh *strictHandler) WebhookDelete(ctx echo.Context, webhook openapi_types.UUID) error {
	var request WebhookDeleteRequestObject

	request.Webhook = webhook

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebhookDelete(ctx, request.(WebhookDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebhookDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebhookDeleteResponseObject); ok {
		return validResponse.VisitWebhookDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebhookRequestsList operation middleware
func (sh *strictHandler) WebhookRequestsList(ctx echo.Context, webhook openapi_types.UUID) error {
	var request WebhookRequestsListRequestObject

	request.Webhook = webhook

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebhookRequestsList(ctx, request.(WebhookRequestsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebhookRequestsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebhookRequestsListResponseObject); ok {
		return validResponse.VisitWebhookRequestsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkerGet operation middleware
func (sh *strictHandler) WorkerGet(ctx echo.Context, worker openapi_types.UUID) error {
	var request WorkerGetRequestObject

	request.Worker = worker

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkerGet(ctx, request.(WorkerGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkerGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkerGetResponseObject); ok {
		return validResponse.VisitWorkerGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkerUpdate operation middleware
func (sh *strictHandler) WorkerUpdate(ctx echo.Context, worker openapi_types.UUID) error {
	var request WorkerUpdateRequestObject

	request.Worker = worker

	var body WorkerUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkerUpdate(ctx, request.(WorkerUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkerUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkerUpdateResponseObject); ok {
		return validResponse.VisitWorkerUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowDelete operation middleware
func (sh *strictHandler) WorkflowDelete(ctx echo.Context, workflow openapi_types.UUID) error {
	var request WorkflowDeleteRequestObject

	request.Workflow = workflow

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowDelete(ctx, request.(WorkflowDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowDeleteResponseObject); ok {
		return validResponse.VisitWorkflowDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowGet operation middleware
func (sh *strictHandler) WorkflowGet(ctx echo.Context, workflow openapi_types.UUID) error {
	var request WorkflowGetRequestObject

	request.Workflow = workflow

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowGet(ctx, request.(WorkflowGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowGetResponseObject); ok {
		return validResponse.VisitWorkflowGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowUpdate operation middleware
func (sh *strictHandler) WorkflowUpdate(ctx echo.Context, workflow openapi_types.UUID) error {
	var request WorkflowUpdateRequestObject

	request.Workflow = workflow

	var body WorkflowUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowUpdate(ctx, request.(WorkflowUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowUpdateResponseObject); ok {
		return validResponse.VisitWorkflowUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowGetMetrics operation middleware
func (sh *strictHandler) WorkflowGetMetrics(ctx echo.Context, workflow openapi_types.UUID, params WorkflowGetMetricsParams) error {
	var request WorkflowGetMetricsRequestObject

	request.Workflow = workflow
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowGetMetrics(ctx, request.(WorkflowGetMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowGetMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowGetMetricsResponseObject); ok {
		return validResponse.VisitWorkflowGetMetricsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunCreate operation middleware
func (sh *strictHandler) WorkflowRunCreate(ctx echo.Context, workflow openapi_types.UUID, params WorkflowRunCreateParams) error {
	var request WorkflowRunCreateRequestObject

	request.Workflow = workflow
	request.Params = params

	var body WorkflowRunCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunCreate(ctx, request.(WorkflowRunCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunCreateResponseObject); ok {
		return validResponse.VisitWorkflowRunCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowVersionGet operation middleware
func (sh *strictHandler) WorkflowVersionGet(ctx echo.Context, workflow openapi_types.UUID, params WorkflowVersionGetParams) error {
	var request WorkflowVersionGetRequestObject

	request.Workflow = workflow
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowVersionGet(ctx, request.(WorkflowVersionGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowVersionGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowVersionGetResponseObject); ok {
		return validResponse.VisitWorkflowVersionGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZEwepEnQOe10ft7+/H8BAAD//2w74V7irAIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
