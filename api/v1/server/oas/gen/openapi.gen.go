// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for EventOrderByDirection.
const (
	EventOrderByDirectionAsc  EventOrderByDirection = "asc"
	EventOrderByDirectionDesc EventOrderByDirection = "desc"
)

// Defines values for EventOrderByField.
const (
	EventOrderByFieldCreatedAt EventOrderByField = "createdAt"
)

// Defines values for JobRunStatus.
const (
	JobRunStatusCANCELLED JobRunStatus = "CANCELLED"
	JobRunStatusFAILED    JobRunStatus = "FAILED"
	JobRunStatusPENDING   JobRunStatus = "PENDING"
	JobRunStatusRUNNING   JobRunStatus = "RUNNING"
	JobRunStatusSUCCEEDED JobRunStatus = "SUCCEEDED"
)

// Defines values for LogLineLevel.
const (
	LogLineLevelDEBUG LogLineLevel = "DEBUG"
	LogLineLevelERROR LogLineLevel = "ERROR"
	LogLineLevelINFO  LogLineLevel = "INFO"
	LogLineLevelWARN  LogLineLevel = "WARN"
)

// Defines values for LogLineOrderByDirection.
const (
	LogLineOrderByDirectionAsc  LogLineOrderByDirection = "asc"
	LogLineOrderByDirectionDesc LogLineOrderByDirection = "desc"
)

// Defines values for LogLineOrderByField.
const (
	LogLineOrderByFieldCreatedAt LogLineOrderByField = "createdAt"
)

// Defines values for PullRequestState.
const (
	Closed PullRequestState = "closed"
	Open   PullRequestState = "open"
)

// Defines values for StepRunEventReason.
const (
	StepRunEventReasonASSIGNED           StepRunEventReason = "ASSIGNED"
	StepRunEventReasonCANCELLED          StepRunEventReason = "CANCELLED"
	StepRunEventReasonFAILED             StepRunEventReason = "FAILED"
	StepRunEventReasonFINISHED           StepRunEventReason = "FINISHED"
	StepRunEventReasonREASSIGNED         StepRunEventReason = "REASSIGNED"
	StepRunEventReasonREQUEUEDNOWORKER   StepRunEventReason = "REQUEUED_NO_WORKER"
	StepRunEventReasonREQUEUEDRATELIMIT  StepRunEventReason = "REQUEUED_RATE_LIMIT"
	StepRunEventReasonRETRIEDBYUSER      StepRunEventReason = "RETRIED_BY_USER"
	StepRunEventReasonRETRYING           StepRunEventReason = "RETRYING"
	StepRunEventReasonSCHEDULINGTIMEDOUT StepRunEventReason = "SCHEDULING_TIMED_OUT"
	StepRunEventReasonSLOTRELEASED       StepRunEventReason = "SLOT_RELEASED"
	StepRunEventReasonSTARTED            StepRunEventReason = "STARTED"
	StepRunEventReasonTIMEDOUT           StepRunEventReason = "TIMED_OUT"
	StepRunEventReasonTIMEOUTREFRESHED   StepRunEventReason = "TIMEOUT_REFRESHED"
)

// Defines values for StepRunEventSeverity.
const (
	StepRunEventSeverityCRITICAL StepRunEventSeverity = "CRITICAL"
	StepRunEventSeverityINFO     StepRunEventSeverity = "INFO"
	StepRunEventSeverityWARNING  StepRunEventSeverity = "WARNING"
)

// Defines values for StepRunStatus.
const (
	StepRunStatusASSIGNED          StepRunStatus = "ASSIGNED"
	StepRunStatusCANCELLED         StepRunStatus = "CANCELLED"
	StepRunStatusFAILED            StepRunStatus = "FAILED"
	StepRunStatusPENDING           StepRunStatus = "PENDING"
	StepRunStatusPENDINGASSIGNMENT StepRunStatus = "PENDING_ASSIGNMENT"
	StepRunStatusRUNNING           StepRunStatus = "RUNNING"
	StepRunStatusSUCCEEDED         StepRunStatus = "SUCCEEDED"
)

// Defines values for TenantMemberRole.
const (
	ADMIN  TenantMemberRole = "ADMIN"
	MEMBER TenantMemberRole = "MEMBER"
	OWNER  TenantMemberRole = "OWNER"
)

// Defines values for WorkerStatus.
const (
	ACTIVE   WorkerStatus = "ACTIVE"
	INACTIVE WorkerStatus = "INACTIVE"
)

// Defines values for WorkflowConcurrencyLimitStrategy.
const (
	CANCELINPROGRESS WorkflowConcurrencyLimitStrategy = "CANCEL_IN_PROGRESS"
	DROPNEWEST       WorkflowConcurrencyLimitStrategy = "DROP_NEWEST"
	GROUPROUNDROBIN  WorkflowConcurrencyLimitStrategy = "GROUP_ROUND_ROBIN"
	QUEUENEWEST      WorkflowConcurrencyLimitStrategy = "QUEUE_NEWEST"
)

// Defines values for WorkflowRunStatus.
const (
	WorkflowRunStatusCANCELLED WorkflowRunStatus = "CANCELLED"
	WorkflowRunStatusFAILED    WorkflowRunStatus = "FAILED"
	WorkflowRunStatusPENDING   WorkflowRunStatus = "PENDING"
	WorkflowRunStatusQUEUED    WorkflowRunStatus = "QUEUED"
	WorkflowRunStatusRUNNING   WorkflowRunStatus = "RUNNING"
	WorkflowRunStatusSUCCEEDED WorkflowRunStatus = "SUCCEEDED"
)

// APIError defines model for APIError.
type APIError struct {
	// Code a custom Hatchet error code
	Code *uint64 `json:"code,omitempty"`

	// Description a description for this error
	Description string `json:"description"`

	// DocsLink a link to the documentation for this error, if it exists
	DocsLink *string `json:"docs_link,omitempty"`

	// Field the field that this error is associated with, if applicable
	Field *string `json:"field,omitempty"`
}

// APIErrors defines model for APIErrors.
type APIErrors struct {
	Errors []APIError `json:"errors"`
}

// APIMeta defines model for APIMeta.
type APIMeta struct {
	Auth    *APIMetaAuth    `json:"auth,omitempty"`
	Posthog *APIMetaPosthog `json:"posthog,omitempty"`

	// PylonAppId the Pylon app ID for usepylon.com chat support
	PylonAppId *string `json:"pylonAppId,omitempty"`
}

// APIMetaAuth defines model for APIMetaAuth.
type APIMetaAuth struct {
	// Schemes the supported types of authentication
	Schemes *[]string `json:"schemes,omitempty"`
}

// APIMetaIntegration defines model for APIMetaIntegration.
type APIMetaIntegration struct {
	// Enabled whether this integration is enabled on the instance
	Enabled bool `json:"enabled"`

	// Name the name of the integration
	Name string `json:"name"`
}

// APIMetaPosthog defines model for APIMetaPosthog.
type APIMetaPosthog struct {
	// ApiHost the PostHog API host
	ApiHost *string `json:"apiHost,omitempty"`

	// ApiKey the PostHog API key
	ApiKey *string `json:"apiKey,omitempty"`
}

// APIResourceMeta defines model for APIResourceMeta.
type APIResourceMeta struct {
	// CreatedAt the time that this resource was created
	CreatedAt time.Time `json:"createdAt"`

	// Id the id of this resource, in UUID format
	Id openapi_types.UUID `json:"id"`

	// UpdatedAt the time that this resource was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// APIToken defines model for APIToken.
type APIToken struct {
	// ExpiresAt When the API token expires.
	ExpiresAt time.Time       `json:"expiresAt"`
	Metadata  APIResourceMeta `json:"metadata"`

	// Name The name of the API token.
	Name string `json:"name"`
}

// AcceptInviteRequest defines model for AcceptInviteRequest.
type AcceptInviteRequest struct {
	Invite string `json:"invite" validate:"required,uuid"`
}

// CreateAPITokenRequest defines model for CreateAPITokenRequest.
type CreateAPITokenRequest struct {
	// Name A name for the API token.
	Name string `json:"name"`
}

// CreateAPITokenResponse defines model for CreateAPITokenResponse.
type CreateAPITokenResponse struct {
	// Token The API token.
	Token string `json:"token"`
}

// CreatePullRequestFromStepRun defines model for CreatePullRequestFromStepRun.
type CreatePullRequestFromStepRun struct {
	BranchName string `json:"branchName"`
}

// CreateSNSIntegrationRequest defines model for CreateSNSIntegrationRequest.
type CreateSNSIntegrationRequest struct {
	// TopicArn The Amazon Resource Name (ARN) of the SNS topic.
	TopicArn string `json:"topicArn" validate:"required,min=1,max=256"`
}

// CreateTenantAlertEmailGroupRequest defines model for CreateTenantAlertEmailGroupRequest.
type CreateTenantAlertEmailGroupRequest struct {
	// Emails A list of emails for users
	Emails []string `json:"emails" validate:"required,dive,email"`
}

// CreateTenantInviteRequest defines model for CreateTenantInviteRequest.
type CreateTenantInviteRequest struct {
	// Email The email of the user to invite.
	Email string           `json:"email" validate:"required,email"`
	Role  TenantMemberRole `json:"role"`
}

// CreateTenantRequest defines model for CreateTenantRequest.
type CreateTenantRequest struct {
	// Name The name of the tenant.
	Name string `json:"name" validate:"required"`

	// Slug The slug of the tenant.
	Slug string `json:"slug" validate:"required,hatchetName"`
}

// Event defines model for Event.
type Event struct {
	// AdditionalMetadata Additional metadata for the event.
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`

	// Key The key for the event.
	Key      string          `json:"key"`
	Metadata APIResourceMeta `json:"metadata"`
	Tenant   *Tenant         `json:"tenant,omitempty"`

	// TenantId The ID of the tenant associated with this event.
	TenantId           string                   `json:"tenantId"`
	WorkflowRunSummary *EventWorkflowRunSummary `json:"workflowRunSummary,omitempty"`
}

// EventData defines model for EventData.
type EventData struct {
	// Data The data for the event (JSON bytes).
	Data string `json:"data"`
}

// EventKey The key for the event.
type EventKey = string

// EventKeyList defines model for EventKeyList.
type EventKeyList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]EventKey         `json:"rows,omitempty"`
}

// EventList defines model for EventList.
type EventList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]Event            `json:"rows,omitempty"`
}

// EventOrderByDirection defines model for EventOrderByDirection.
type EventOrderByDirection string

// EventOrderByField defines model for EventOrderByField.
type EventOrderByField string

// EventSearch defines model for EventSearch.
type EventSearch = string

// EventWorkflowRunSummary defines model for EventWorkflowRunSummary.
type EventWorkflowRunSummary struct {
	// Failed The number of failed runs.
	Failed *int64 `json:"failed,omitempty"`

	// Pending The number of pending runs.
	Pending *int64 `json:"pending,omitempty"`

	// Queued The number of queued runs.
	Queued *int64 `json:"queued,omitempty"`

	// Running The number of running runs.
	Running *int64 `json:"running,omitempty"`

	// Succeeded The number of succeeded runs.
	Succeeded *int64 `json:"succeeded,omitempty"`
}

// GetStepRunDiffResponse defines model for GetStepRunDiffResponse.
type GetStepRunDiffResponse struct {
	Diffs []StepRunDiff `json:"diffs"`
}

// GithubAppInstallation defines model for GithubAppInstallation.
type GithubAppInstallation struct {
	AccountAvatarUrl        string          `json:"account_avatar_url"`
	AccountName             string          `json:"account_name"`
	InstallationSettingsUrl string          `json:"installation_settings_url"`
	Metadata                APIResourceMeta `json:"metadata"`
}

// GithubBranch defines model for GithubBranch.
type GithubBranch struct {
	BranchName string `json:"branch_name"`
	IsDefault  bool   `json:"is_default"`
}

// GithubRepo defines model for GithubRepo.
type GithubRepo struct {
	RepoName  string `json:"repo_name"`
	RepoOwner string `json:"repo_owner"`
}

// Job defines model for Job.
type Job struct {
	// Description The description of the job.
	Description *string         `json:"description,omitempty"`
	Metadata    APIResourceMeta `json:"metadata"`
	Name        string          `json:"name"`
	Steps       []Step          `json:"steps"`
	TenantId    string          `json:"tenantId"`

	// Timeout The timeout of the job.
	Timeout   *string `json:"timeout,omitempty"`
	VersionId string  `json:"versionId"`
}

// JobRun defines model for JobRun.
type JobRun struct {
	CancelledAt     *time.Time              `json:"cancelledAt,omitempty"`
	CancelledError  *string                 `json:"cancelledError,omitempty"`
	CancelledReason *string                 `json:"cancelledReason,omitempty"`
	FinishedAt      *time.Time              `json:"finishedAt,omitempty"`
	Job             *Job                    `json:"job,omitempty"`
	JobId           string                  `json:"jobId"`
	Metadata        APIResourceMeta         `json:"metadata"`
	Result          *map[string]interface{} `json:"result,omitempty"`
	StartedAt       *time.Time              `json:"startedAt,omitempty"`
	Status          JobRunStatus            `json:"status"`
	StepRuns        *[]StepRun              `json:"stepRuns,omitempty"`
	TenantId        string                  `json:"tenantId"`
	TickerId        *string                 `json:"tickerId,omitempty"`
	TimeoutAt       *time.Time              `json:"timeoutAt,omitempty"`
	WorkflowRun     *WorkflowRun            `json:"workflowRun,omitempty"`
	WorkflowRunId   string                  `json:"workflowRunId"`
}

// JobRunStatus defines model for JobRunStatus.
type JobRunStatus string

// LinkGithubRepositoryRequest defines model for LinkGithubRepositoryRequest.
type LinkGithubRepositoryRequest struct {
	// GitRepoBranch The repository branch.
	GitRepoBranch string `json:"gitRepoBranch"`

	// GitRepoName The repository name.
	GitRepoName string `json:"gitRepoName"`

	// GitRepoOwner The repository owner.
	GitRepoOwner string `json:"gitRepoOwner"`

	// InstallationId The repository name.
	InstallationId string `json:"installationId"`
}

// ListAPIMetaIntegration defines model for ListAPIMetaIntegration.
type ListAPIMetaIntegration = []APIMetaIntegration

// ListAPITokensResponse defines model for ListAPITokensResponse.
type ListAPITokensResponse struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]APIToken         `json:"rows,omitempty"`
}

// ListGithubAppInstallationsResponse defines model for ListGithubAppInstallationsResponse.
type ListGithubAppInstallationsResponse struct {
	Pagination PaginationResponse      `json:"pagination"`
	Rows       []GithubAppInstallation `json:"rows"`
}

// ListGithubBranchesResponse defines model for ListGithubBranchesResponse.
type ListGithubBranchesResponse = []GithubBranch

// ListGithubReposResponse defines model for ListGithubReposResponse.
type ListGithubReposResponse = []GithubRepo

// ListPullRequestsResponse defines model for ListPullRequestsResponse.
type ListPullRequestsResponse struct {
	PullRequests []PullRequest `json:"pullRequests"`
}

// ListSNSIntegrations defines model for ListSNSIntegrations.
type ListSNSIntegrations struct {
	Pagination PaginationResponse `json:"pagination"`
	Rows       []SNSIntegration   `json:"rows"`
}

// ListSlackWebhooks defines model for ListSlackWebhooks.
type ListSlackWebhooks struct {
	Pagination PaginationResponse `json:"pagination"`
	Rows       []SlackWebhook     `json:"rows"`
}

// LogLine defines model for LogLine.
type LogLine struct {
	// CreatedAt The creation date of the log line.
	CreatedAt time.Time `json:"createdAt"`

	// Message The log message.
	Message string `json:"message"`

	// Metadata The log metadata.
	Metadata map[string]interface{} `json:"metadata"`
}

// LogLineLevel defines model for LogLineLevel.
type LogLineLevel string

// LogLineLevelField defines model for LogLineLevelField.
type LogLineLevelField = []LogLineLevel

// LogLineList defines model for LogLineList.
type LogLineList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]LogLine          `json:"rows,omitempty"`
}

// LogLineOrderByDirection defines model for LogLineOrderByDirection.
type LogLineOrderByDirection string

// LogLineOrderByField defines model for LogLineOrderByField.
type LogLineOrderByField string

// LogLineSearch defines model for LogLineSearch.
type LogLineSearch = string

// PaginationResponse defines model for PaginationResponse.
type PaginationResponse struct {
	// CurrentPage the current page
	CurrentPage *int64 `json:"current_page,omitempty"`

	// NextPage the next page
	NextPage *int64 `json:"next_page,omitempty"`

	// NumPages the total number of pages for listing
	NumPages *int64 `json:"num_pages,omitempty"`
}

// PullRequest defines model for PullRequest.
type PullRequest struct {
	PullRequestBaseBranch string           `json:"pullRequestBaseBranch"`
	PullRequestHeadBranch string           `json:"pullRequestHeadBranch"`
	PullRequestID         int              `json:"pullRequestID"`
	PullRequestNumber     int              `json:"pullRequestNumber"`
	PullRequestState      PullRequestState `json:"pullRequestState"`
	PullRequestTitle      string           `json:"pullRequestTitle"`
	RepositoryName        string           `json:"repositoryName"`
	RepositoryOwner       string           `json:"repositoryOwner"`
}

// PullRequestState defines model for PullRequestState.
type PullRequestState string

// RejectInviteRequest defines model for RejectInviteRequest.
type RejectInviteRequest struct {
	Invite string `json:"invite" validate:"required,uuid"`
}

// ReplayEventRequest defines model for ReplayEventRequest.
type ReplayEventRequest struct {
	EventIds []openapi_types.UUID `json:"eventIds"`
}

// RerunStepRunRequest defines model for RerunStepRunRequest.
type RerunStepRunRequest struct {
	Input map[string]interface{} `json:"input"`
}

// SNSIntegration defines model for SNSIntegration.
type SNSIntegration struct {
	// IngestUrl The URL to send SNS messages to.
	IngestUrl *string         `json:"ingestUrl,omitempty"`
	Metadata  APIResourceMeta `json:"metadata"`

	// TenantId The unique identifier for the tenant that the SNS integration belongs to.
	TenantId openapi_types.UUID `json:"tenantId"`

	// TopicArn The Amazon Resource Name (ARN) of the SNS topic.
	TopicArn string `json:"topicArn"`
}

// SlackWebhook defines model for SlackWebhook.
type SlackWebhook struct {
	// ChannelId The channel id associated with this slack webhook.
	ChannelId string `json:"channelId"`

	// ChannelName The channel name associated with this slack webhook.
	ChannelName string          `json:"channelName"`
	Metadata    APIResourceMeta `json:"metadata"`

	// TeamId The team id associated with this slack webhook.
	TeamId string `json:"teamId"`

	// TeamName The team name associated with this slack webhook.
	TeamName string `json:"teamName"`

	// TenantId The unique identifier for the tenant that the SNS integration belongs to.
	TenantId openapi_types.UUID `json:"tenantId"`
}

// Step defines model for Step.
type Step struct {
	Action   string          `json:"action"`
	Children *[]string       `json:"children,omitempty"`
	JobId    string          `json:"jobId"`
	Metadata APIResourceMeta `json:"metadata"`
	Parents  *[]string       `json:"parents,omitempty"`

	// ReadableId The readable id of the step.
	ReadableId string `json:"readableId"`
	TenantId   string `json:"tenantId"`

	// Timeout The timeout of the step.
	Timeout *string `json:"timeout,omitempty"`
}

// StepRun defines model for StepRun.
type StepRun struct {
	CancelledAt       *time.Time              `json:"cancelledAt,omitempty"`
	CancelledAtEpoch  *int                    `json:"cancelledAtEpoch,omitempty"`
	CancelledError    *string                 `json:"cancelledError,omitempty"`
	CancelledReason   *string                 `json:"cancelledReason,omitempty"`
	ChildWorkflowRuns *[]string               `json:"childWorkflowRuns,omitempty"`
	Children          *[]string               `json:"children,omitempty"`
	Error             *string                 `json:"error,omitempty"`
	FinishedAt        *time.Time              `json:"finishedAt,omitempty"`
	FinishedAtEpoch   *int                    `json:"finishedAtEpoch,omitempty"`
	Input             *string                 `json:"input,omitempty"`
	JobRun            *JobRun                 `json:"jobRun,omitempty"`
	JobRunId          string                  `json:"jobRunId"`
	Metadata          APIResourceMeta         `json:"metadata"`
	Output            *string                 `json:"output,omitempty"`
	Parents           *[]string               `json:"parents,omitempty"`
	RequeueAfter      *time.Time              `json:"requeueAfter,omitempty"`
	Result            *map[string]interface{} `json:"result,omitempty"`
	StartedAt         *time.Time              `json:"startedAt,omitempty"`
	StartedAtEpoch    *int                    `json:"startedAtEpoch,omitempty"`
	Status            StepRunStatus           `json:"status"`
	Step              *Step                   `json:"step,omitempty"`
	StepId            string                  `json:"stepId"`
	TenantId          string                  `json:"tenantId"`
	TimeoutAt         *time.Time              `json:"timeoutAt,omitempty"`
	TimeoutAtEpoch    *int                    `json:"timeoutAtEpoch,omitempty"`
	WorkerId          *string                 `json:"workerId,omitempty"`
}

// StepRunDiff defines model for StepRunDiff.
type StepRunDiff struct {
	Key      string `json:"key"`
	Modified string `json:"modified"`
	Original string `json:"original"`
}

// StepRunEvent defines model for StepRunEvent.
type StepRunEvent struct {
	Count         int                     `json:"count"`
	Data          *map[string]interface{} `json:"data,omitempty"`
	Id            int                     `json:"id"`
	Message       string                  `json:"message"`
	Reason        StepRunEventReason      `json:"reason"`
	Severity      StepRunEventSeverity    `json:"severity"`
	StepRunId     string                  `json:"stepRunId"`
	TimeFirstSeen time.Time               `json:"timeFirstSeen"`
	TimeLastSeen  time.Time               `json:"timeLastSeen"`
}

// StepRunEventList defines model for StepRunEventList.
type StepRunEventList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]StepRunEvent     `json:"rows,omitempty"`
}

// StepRunEventReason defines model for StepRunEventReason.
type StepRunEventReason string

// StepRunEventSeverity defines model for StepRunEventSeverity.
type StepRunEventSeverity string

// StepRunStatus defines model for StepRunStatus.
type StepRunStatus string

// Tenant defines model for Tenant.
type Tenant struct {
	// AnalyticsOptOut Whether the tenant has opted out of analytics.
	AnalyticsOptOut *bool           `json:"analyticsOptOut,omitempty"`
	Metadata        APIResourceMeta `json:"metadata"`

	// Name The name of the tenant.
	Name string `json:"name"`

	// Slug The slug of the tenant.
	Slug string `json:"slug"`
}

// TenantAlertEmailGroup defines model for TenantAlertEmailGroup.
type TenantAlertEmailGroup struct {
	// Emails A list of emails for users
	Emails   []string        `json:"emails"`
	Metadata APIResourceMeta `json:"metadata"`
}

// TenantAlertEmailGroupList defines model for TenantAlertEmailGroupList.
type TenantAlertEmailGroupList struct {
	Pagination *PaginationResponse      `json:"pagination,omitempty"`
	Rows       *[]TenantAlertEmailGroup `json:"rows,omitempty"`
}

// TenantAlertingSettings defines model for TenantAlertingSettings.
type TenantAlertingSettings struct {
	// LastAlertedAt The last time an alert was sent.
	LastAlertedAt *time.Time `json:"lastAlertedAt,omitempty"`

	// MaxAlertingFrequency The max frequency at which to alert.
	MaxAlertingFrequency string          `json:"maxAlertingFrequency"`
	Metadata             APIResourceMeta `json:"metadata"`
}

// TenantInvite defines model for TenantInvite.
type TenantInvite struct {
	// Email The email of the user to invite.
	Email string `json:"email"`

	// Expires The time that this invite expires.
	Expires  time.Time        `json:"expires"`
	Metadata APIResourceMeta  `json:"metadata"`
	Role     TenantMemberRole `json:"role"`

	// TenantId The tenant id associated with this tenant invite.
	TenantId string `json:"tenantId"`

	// TenantName The tenant name for the tenant.
	TenantName *string `json:"tenantName,omitempty"`
}

// TenantInviteList defines model for TenantInviteList.
type TenantInviteList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]TenantInvite     `json:"rows,omitempty"`
}

// TenantMember defines model for TenantMember.
type TenantMember struct {
	Metadata APIResourceMeta  `json:"metadata"`
	Role     TenantMemberRole `json:"role"`
	Tenant   *Tenant          `json:"tenant,omitempty"`
	User     UserTenantPublic `json:"user"`
}

// TenantMemberList defines model for TenantMemberList.
type TenantMemberList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]TenantMember     `json:"rows,omitempty"`
}

// TenantMemberRole defines model for TenantMemberRole.
type TenantMemberRole string

// TriggerWorkflowRunRequest defines model for TriggerWorkflowRunRequest.
type TriggerWorkflowRunRequest struct {
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`
	Input              map[string]interface{}  `json:"input"`
}

// UpdateTenantAlertEmailGroupRequest defines model for UpdateTenantAlertEmailGroupRequest.
type UpdateTenantAlertEmailGroupRequest struct {
	// Emails A list of emails for users
	Emails []string `json:"emails" validate:"required,dive,email"`
}

// UpdateTenantInviteRequest defines model for UpdateTenantInviteRequest.
type UpdateTenantInviteRequest struct {
	Role TenantMemberRole `json:"role"`
}

// UpdateTenantRequest defines model for UpdateTenantRequest.
type UpdateTenantRequest struct {
	// AnalyticsOptOut Whether the tenant has opted out of analytics.
	AnalyticsOptOut *bool `json:"analyticsOptOut,omitempty"`

	// MaxAlertingFrequency The max frequency at which to alert.
	MaxAlertingFrequency *string `json:"maxAlertingFrequency,omitempty" validate:"omitnil,duration"`

	// Name The name of the tenant.
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email The email address of the user.
	Email openapi_types.Email `json:"email"`

	// EmailHash A hash of the user's email address for use with Pylon Support Chat
	EmailHash *string `json:"emailHash,omitempty"`

	// EmailVerified Whether the user has verified their email address.
	EmailVerified bool `json:"emailVerified"`

	// HasPassword Whether the user has a password set.
	HasPassword *bool           `json:"hasPassword,omitempty"`
	Metadata    APIResourceMeta `json:"metadata"`

	// Name The display name of the user.
	Name *string `json:"name,omitempty"`
}

// UserChangePasswordRequest defines model for UserChangePasswordRequest.
type UserChangePasswordRequest struct {
	// NewPassword The new password for the user.
	NewPassword string `json:"newPassword" validate:"required,password"`

	// Password The password of the user.
	Password string `json:"password" validate:"required,password"`
}

// UserLoginRequest defines model for UserLoginRequest.
type UserLoginRequest struct {
	// Email The email address of the user.
	Email openapi_types.Email `json:"email" validate:"required,email"`

	// Password The password of the user.
	Password string `json:"password" validate:"required,password"`
}

// UserRegisterRequest defines model for UserRegisterRequest.
type UserRegisterRequest struct {
	// Email The email address of the user.
	Email openapi_types.Email `json:"email" validate:"required,email"`

	// Name The name of the user.
	Name string `json:"name"`

	// Password The password of the user.
	Password string `json:"password" validate:"required,password"`
}

// UserTenantMembershipsList defines model for UserTenantMembershipsList.
type UserTenantMembershipsList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]TenantMember     `json:"rows,omitempty"`
}

// UserTenantPublic defines model for UserTenantPublic.
type UserTenantPublic struct {
	// Email The email address of the user.
	Email openapi_types.Email `json:"email"`

	// Name The display name of the user.
	Name *string `json:"name,omitempty"`
}

// Worker defines model for Worker.
type Worker struct {
	// Actions The actions this worker can perform.
	Actions *[]string `json:"actions,omitempty"`

	// AvailableRuns The number of runs this worker can execute concurrently.
	AvailableRuns *int `json:"availableRuns,omitempty"`

	// DispatcherId the id of the assigned dispatcher, in UUID format
	DispatcherId *openapi_types.UUID `json:"dispatcherId,omitempty"`

	// LastHeartbeatAt The time this worker last sent a heartbeat.
	LastHeartbeatAt *time.Time `json:"lastHeartbeatAt,omitempty"`

	// LastListenerEstablished The time this worker last sent a heartbeat.
	LastListenerEstablished *time.Time `json:"lastListenerEstablished,omitempty"`

	// MaxRuns The maximum number of runs this worker can execute concurrently.
	MaxRuns  *int            `json:"maxRuns,omitempty"`
	Metadata APIResourceMeta `json:"metadata"`

	// Name The name of the worker.
	Name string `json:"name"`

	// RecentStepRuns The recent step runs for this worker.
	RecentStepRuns *[]StepRun `json:"recentStepRuns,omitempty"`

	// Status The status of the worker.
	Status *WorkerStatus `json:"status,omitempty"`
}

// WorkerStatus The status of the worker.
type WorkerStatus string

// WorkerList defines model for WorkerList.
type WorkerList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]Worker           `json:"rows,omitempty"`
}

// Workflow defines model for Workflow.
type Workflow struct {
	Deployment *WorkflowDeploymentConfig `json:"deployment,omitempty"`

	// Description The description of the workflow.
	Description *string `json:"description,omitempty"`

	// Jobs The jobs of the workflow.
	Jobs     *[]Job          `json:"jobs,omitempty"`
	LastRun  *WorkflowRun    `json:"lastRun,omitempty"`
	Metadata APIResourceMeta `json:"metadata"`

	// Name The name of the workflow.
	Name string `json:"name"`

	// Tags The tags of the workflow.
	Tags     *[]WorkflowTag         `json:"tags,omitempty"`
	Versions *[]WorkflowVersionMeta `json:"versions,omitempty"`
}

// WorkflowConcurrency defines model for WorkflowConcurrency.
type WorkflowConcurrency struct {
	// GetConcurrencyGroup An action which gets the concurrency group for the WorkflowRun.
	GetConcurrencyGroup string `json:"getConcurrencyGroup"`

	// LimitStrategy The strategy to use when the concurrency limit is reached.
	LimitStrategy WorkflowConcurrencyLimitStrategy `json:"limitStrategy"`

	// MaxRuns The maximum number of concurrent workflow runs.
	MaxRuns int32 `json:"maxRuns"`
}

// WorkflowConcurrencyLimitStrategy The strategy to use when the concurrency limit is reached.
type WorkflowConcurrencyLimitStrategy string

// WorkflowDeploymentConfig defines model for WorkflowDeploymentConfig.
type WorkflowDeploymentConfig struct {
	// GitRepoBranch The repository branch.
	GitRepoBranch string `json:"gitRepoBranch"`

	// GitRepoName The repository name.
	GitRepoName string `json:"gitRepoName"`

	// GitRepoOwner The repository owner.
	GitRepoOwner          string                 `json:"gitRepoOwner"`
	GithubAppInstallation *GithubAppInstallation `json:"githubAppInstallation,omitempty"`

	// GithubAppInstallationId The id of the Github App installation.
	GithubAppInstallationId openapi_types.UUID `json:"githubAppInstallationId"`
	Metadata                APIResourceMeta    `json:"metadata"`
}

// WorkflowID A workflow ID.
type WorkflowID = string

// WorkflowList defines model for WorkflowList.
type WorkflowList struct {
	Metadata   *APIResourceMeta    `json:"metadata,omitempty"`
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]Workflow         `json:"rows,omitempty"`
}

// WorkflowMetrics defines model for WorkflowMetrics.
type WorkflowMetrics struct {
	// GroupKeyCount The total number of concurrency group keys.
	GroupKeyCount *int `json:"groupKeyCount,omitempty"`

	// GroupKeyRunsCount The number of runs for a specific group key (passed via filter)
	GroupKeyRunsCount *int `json:"groupKeyRunsCount,omitempty"`
}

// WorkflowRun defines model for WorkflowRun.
type WorkflowRun struct {
	AdditionalMetadata *map[string]interface{} `json:"additionalMetadata,omitempty"`
	DisplayName        *string                 `json:"displayName,omitempty"`
	Error              *string                 `json:"error,omitempty"`
	FinishedAt         *time.Time              `json:"finishedAt,omitempty"`
	Input              *map[string]interface{} `json:"input,omitempty"`
	JobRuns            *[]JobRun               `json:"jobRuns,omitempty"`
	Metadata           APIResourceMeta         `json:"metadata"`
	ParentId           *openapi_types.UUID     `json:"parentId,omitempty"`
	ParentStepRunId    *openapi_types.UUID     `json:"parentStepRunId,omitempty"`
	StartedAt          *time.Time              `json:"startedAt,omitempty"`
	Status             WorkflowRunStatus       `json:"status"`
	TenantId           string                  `json:"tenantId"`
	TriggeredBy        WorkflowRunTriggeredBy  `json:"triggeredBy"`
	WorkflowVersion    *WorkflowVersion        `json:"workflowVersion,omitempty"`
	WorkflowVersionId  string                  `json:"workflowVersionId"`
}

// WorkflowRunList defines model for WorkflowRunList.
type WorkflowRunList struct {
	Pagination *PaginationResponse `json:"pagination,omitempty"`
	Rows       *[]WorkflowRun      `json:"rows,omitempty"`
}

// WorkflowRunStatus defines model for WorkflowRunStatus.
type WorkflowRunStatus string

// WorkflowRunStatusList defines model for WorkflowRunStatusList.
type WorkflowRunStatusList = []WorkflowRunStatus

// WorkflowRunTriggeredBy defines model for WorkflowRunTriggeredBy.
type WorkflowRunTriggeredBy struct {
	CronParentId *string         `json:"cronParentId,omitempty"`
	CronSchedule *string         `json:"cronSchedule,omitempty"`
	Event        *Event          `json:"event,omitempty"`
	EventId      *string         `json:"eventId,omitempty"`
	Metadata     APIResourceMeta `json:"metadata"`
	ParentId     string          `json:"parentId"`
}

// WorkflowRunsCancelRequest defines model for WorkflowRunsCancelRequest.
type WorkflowRunsCancelRequest struct {
	WorkflowRunIds []openapi_types.UUID `json:"workflowRunIds"`
}

// WorkflowRunsMetrics defines model for WorkflowRunsMetrics.
type WorkflowRunsMetrics struct {
	Counts *WorkflowRunsMetricsCounts `json:"counts,omitempty"`
}

// WorkflowRunsMetricsCounts defines model for WorkflowRunsMetricsCounts.
type WorkflowRunsMetricsCounts struct {
	FAILED    *int `json:"FAILED,omitempty"`
	PENDING   *int `json:"PENDING,omitempty"`
	QUEUED    *int `json:"QUEUED,omitempty"`
	RUNNING   *int `json:"RUNNING,omitempty"`
	SUCCEEDED *int `json:"SUCCEEDED,omitempty"`
}

// WorkflowTag defines model for WorkflowTag.
type WorkflowTag struct {
	// Color The description of the workflow.
	Color string `json:"color"`

	// Name The name of the workflow.
	Name string `json:"name"`
}

// WorkflowTriggerCronRef defines model for WorkflowTriggerCronRef.
type WorkflowTriggerCronRef struct {
	Cron     *string `json:"cron,omitempty"`
	ParentId *string `json:"parent_id,omitempty"`
}

// WorkflowTriggerEventRef defines model for WorkflowTriggerEventRef.
type WorkflowTriggerEventRef struct {
	EventKey *string `json:"event_key,omitempty"`
	ParentId *string `json:"parent_id,omitempty"`
}

// WorkflowTriggers defines model for WorkflowTriggers.
type WorkflowTriggers struct {
	Crons             *[]WorkflowTriggerCronRef  `json:"crons,omitempty"`
	Events            *[]WorkflowTriggerEventRef `json:"events,omitempty"`
	Metadata          *APIResourceMeta           `json:"metadata,omitempty"`
	TenantId          *string                    `json:"tenant_id,omitempty"`
	WorkflowVersionId *string                    `json:"workflow_version_id,omitempty"`
}

// WorkflowVersion defines model for WorkflowVersion.
type WorkflowVersion struct {
	Concurrency     *WorkflowConcurrency `json:"concurrency,omitempty"`
	Jobs            *[]Job               `json:"jobs,omitempty"`
	Metadata        APIResourceMeta      `json:"metadata"`
	Order           int32                `json:"order"`
	ScheduleTimeout *string              `json:"scheduleTimeout,omitempty"`
	Triggers        *WorkflowTriggers    `json:"triggers,omitempty"`

	// Version The version of the workflow.
	Version    string    `json:"version"`
	Workflow   *Workflow `json:"workflow,omitempty"`
	WorkflowId string    `json:"workflowId"`
}

// WorkflowVersionDefinition defines model for WorkflowVersionDefinition.
type WorkflowVersionDefinition struct {
	// RawDefinition The raw YAML definition of the workflow.
	RawDefinition string `json:"rawDefinition"`
}

// WorkflowVersionMeta defines model for WorkflowVersionMeta.
type WorkflowVersionMeta struct {
	Metadata APIResourceMeta `json:"metadata"`
	Order    int32           `json:"order"`

	// Version The version of the workflow.
	Version    string    `json:"version"`
	Workflow   *Workflow `json:"workflow,omitempty"`
	WorkflowId string    `json:"workflowId"`
}

// StepRunListEventsParams defines parameters for StepRunListEvents.
type StepRunListEventsParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// LogLineListParams defines parameters for LogLineList.
type LogLineListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Levels A list of levels to filter by
	Levels *LogLineLevelField `form:"levels,omitempty" json:"levels,omitempty"`

	// Search The search query to filter for
	Search *LogLineSearch `form:"search,omitempty" json:"search,omitempty"`

	// OrderByField What to order by
	OrderByField *LogLineOrderByField `form:"orderByField,omitempty" json:"orderByField,omitempty"`

	// OrderByDirection The order direction
	OrderByDirection *LogLineOrderByDirection `form:"orderByDirection,omitempty" json:"orderByDirection,omitempty"`
}

// EventListParams defines parameters for EventList.
type EventListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Keys A list of keys to filter by
	Keys *[]EventKey `form:"keys,omitempty" json:"keys,omitempty"`

	// Workflows A list of workflow IDs to filter by
	Workflows *[]WorkflowID `form:"workflows,omitempty" json:"workflows,omitempty"`

	// Statuses A list of workflow run statuses to filter by
	Statuses *WorkflowRunStatusList `form:"statuses,omitempty" json:"statuses,omitempty"`

	// Search The search query to filter for
	Search *EventSearch `form:"search,omitempty" json:"search,omitempty"`

	// OrderByField What to order by
	OrderByField *EventOrderByField `form:"orderByField,omitempty" json:"orderByField,omitempty"`

	// OrderByDirection The order direction
	OrderByDirection *EventOrderByDirection `form:"orderByDirection,omitempty" json:"orderByDirection,omitempty"`

	// AdditionalMetadata A list of metadata key value pairs to filter by
	AdditionalMetadata *[]string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`
}

// WorkflowRunListPullRequestsParams defines parameters for WorkflowRunListPullRequests.
type WorkflowRunListPullRequestsParams struct {
	// State The pull request state
	State *PullRequestState `form:"state,omitempty" json:"state,omitempty"`
}

// WorkflowRunListParams defines parameters for WorkflowRunList.
type WorkflowRunListParams struct {
	// Offset The number to skip
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number to limit by
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// EventId The event id to get runs for.
	EventId *openapi_types.UUID `form:"eventId,omitempty" json:"eventId,omitempty"`

	// WorkflowId The workflow id to get runs for.
	WorkflowId *openapi_types.UUID `form:"workflowId,omitempty" json:"workflowId,omitempty"`

	// ParentWorkflowRunId The parent workflow run id
	ParentWorkflowRunId *openapi_types.UUID `form:"parentWorkflowRunId,omitempty" json:"parentWorkflowRunId,omitempty"`

	// ParentStepRunId The parent step run id
	ParentStepRunId *openapi_types.UUID `form:"parentStepRunId,omitempty" json:"parentStepRunId,omitempty"`

	// Statuses A list of workflow run statuses to filter by
	Statuses *WorkflowRunStatusList `form:"statuses,omitempty" json:"statuses,omitempty"`

	// AdditionalMetadata A list of metadata key value pairs to filter by
	AdditionalMetadata *[]string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`
}

// WorkflowRunGetMetricsParams defines parameters for WorkflowRunGetMetrics.
type WorkflowRunGetMetricsParams struct {
	// EventId The event id to get runs for.
	EventId *openapi_types.UUID `form:"eventId,omitempty" json:"eventId,omitempty"`

	// WorkflowId The workflow id to get runs for.
	WorkflowId *openapi_types.UUID `form:"workflowId,omitempty" json:"workflowId,omitempty"`

	// ParentWorkflowRunId The parent workflow run id
	ParentWorkflowRunId *openapi_types.UUID `form:"parentWorkflowRunId,omitempty" json:"parentWorkflowRunId,omitempty"`

	// ParentStepRunId The parent step run id
	ParentStepRunId *openapi_types.UUID `form:"parentStepRunId,omitempty" json:"parentStepRunId,omitempty"`

	// AdditionalMetadata A list of metadata key value pairs to filter by
	AdditionalMetadata *[]string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`
}

// WorkflowGetMetricsParams defines parameters for WorkflowGetMetrics.
type WorkflowGetMetricsParams struct {
	// Status A status of workflow runs to filter by
	Status *WorkflowRunStatus `form:"status,omitempty" json:"status,omitempty"`

	// GroupKey A group key to filter metrics by
	GroupKey *string `form:"groupKey,omitempty" json:"groupKey,omitempty"`
}

// WorkflowRunCreateParams defines parameters for WorkflowRunCreate.
type WorkflowRunCreateParams struct {
	// Version The workflow version. If not supplied, the latest version is fetched.
	Version *openapi_types.UUID `form:"version,omitempty" json:"version,omitempty"`
}

// WorkflowVersionGetParams defines parameters for WorkflowVersionGet.
type WorkflowVersionGetParams struct {
	// Version The workflow version. If not supplied, the latest version is fetched.
	Version *openapi_types.UUID `form:"version,omitempty" json:"version,omitempty"`
}

// WorkflowVersionGetDefinitionParams defines parameters for WorkflowVersionGetDefinition.
type WorkflowVersionGetDefinitionParams struct {
	// Version The workflow version. If not supplied, the latest version is fetched.
	Version *openapi_types.UUID `form:"version,omitempty" json:"version,omitempty"`
}

// AlertEmailGroupUpdateJSONRequestBody defines body for AlertEmailGroupUpdate for application/json ContentType.
type AlertEmailGroupUpdateJSONRequestBody = UpdateTenantAlertEmailGroupRequest

// StepRunUpdateCreatePrJSONRequestBody defines body for StepRunUpdateCreatePr for application/json ContentType.
type StepRunUpdateCreatePrJSONRequestBody = CreatePullRequestFromStepRun

// TenantCreateJSONRequestBody defines body for TenantCreate for application/json ContentType.
type TenantCreateJSONRequestBody = CreateTenantRequest

// TenantUpdateJSONRequestBody defines body for TenantUpdate for application/json ContentType.
type TenantUpdateJSONRequestBody = UpdateTenantRequest

// AlertEmailGroupCreateJSONRequestBody defines body for AlertEmailGroupCreate for application/json ContentType.
type AlertEmailGroupCreateJSONRequestBody = CreateTenantAlertEmailGroupRequest

// ApiTokenCreateJSONRequestBody defines body for ApiTokenCreate for application/json ContentType.
type ApiTokenCreateJSONRequestBody = CreateAPITokenRequest

// EventUpdateReplayJSONRequestBody defines body for EventUpdateReplay for application/json ContentType.
type EventUpdateReplayJSONRequestBody = ReplayEventRequest

// TenantInviteCreateJSONRequestBody defines body for TenantInviteCreate for application/json ContentType.
type TenantInviteCreateJSONRequestBody = CreateTenantInviteRequest

// TenantInviteUpdateJSONRequestBody defines body for TenantInviteUpdate for application/json ContentType.
type TenantInviteUpdateJSONRequestBody = UpdateTenantInviteRequest

// SnsCreateJSONRequestBody defines body for SnsCreate for application/json ContentType.
type SnsCreateJSONRequestBody = CreateSNSIntegrationRequest

// StepRunUpdateRerunJSONRequestBody defines body for StepRunUpdateRerun for application/json ContentType.
type StepRunUpdateRerunJSONRequestBody = RerunStepRunRequest

// WorkflowRunCancelJSONRequestBody defines body for WorkflowRunCancel for application/json ContentType.
type WorkflowRunCancelJSONRequestBody = WorkflowRunsCancelRequest

// TenantInviteAcceptJSONRequestBody defines body for TenantInviteAccept for application/json ContentType.
type TenantInviteAcceptJSONRequestBody = AcceptInviteRequest

// TenantInviteRejectJSONRequestBody defines body for TenantInviteReject for application/json ContentType.
type TenantInviteRejectJSONRequestBody = RejectInviteRequest

// UserUpdateLoginJSONRequestBody defines body for UserUpdateLogin for application/json ContentType.
type UserUpdateLoginJSONRequestBody = UserLoginRequest

// UserUpdatePasswordJSONRequestBody defines body for UserUpdatePassword for application/json ContentType.
type UserUpdatePasswordJSONRequestBody = UserChangePasswordRequest

// UserCreateJSONRequestBody defines body for UserCreate for application/json ContentType.
type UserCreateJSONRequestBody = UserRegisterRequest

// WorkflowUpdateLinkGithubJSONRequestBody defines body for WorkflowUpdateLinkGithub for application/json ContentType.
type WorkflowUpdateLinkGithubJSONRequestBody = LinkGithubRepositoryRequest

// WorkflowRunCreateJSONRequestBody defines body for WorkflowRunCreate for application/json ContentType.
type WorkflowRunCreateJSONRequestBody = TriggerWorkflowRunRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get liveness
	// (GET /api/live)
	LivenessGet(ctx echo.Context) error
	// Get readiness
	// (GET /api/ready)
	ReadinessGet(ctx echo.Context) error
	// Delete tenant alert email group
	// (DELETE /api/v1/alerting-email-groups/{alert-email-group})
	AlertEmailGroupDelete(ctx echo.Context, alertEmailGroup openapi_types.UUID) error
	// Update tenant alert email group
	// (PATCH /api/v1/alerting-email-groups/{alert-email-group})
	AlertEmailGroupUpdate(ctx echo.Context, alertEmailGroup openapi_types.UUID) error
	// Revoke API Token
	// (POST /api/v1/api-tokens/{api-token})
	ApiTokenUpdateRevoke(ctx echo.Context, apiToken openapi_types.UUID) error
	// Get event data
	// (GET /api/v1/events/{event}/data)
	EventDataGet(ctx echo.Context, event openapi_types.UUID) error
	// List Github App installations
	// (GET /api/v1/github-app/installations)
	GithubAppListInstallations(ctx echo.Context) error
	// List Github App repositories
	// (GET /api/v1/github-app/installations/{gh-installation}/repos)
	GithubAppListRepos(ctx echo.Context, ghInstallation openapi_types.UUID) error
	// List Github App branches
	// (GET /api/v1/github-app/installations/{gh-installation}/repos/{gh-repo-owner}/{gh-repo-name}/branches)
	GithubAppListBranches(ctx echo.Context, ghInstallation openapi_types.UUID, ghRepoOwner string, ghRepoName string) error
	// Github app global webhook
	// (POST /api/v1/github/webhook)
	GithubUpdateGlobalWebhook(ctx echo.Context) error
	// Github app tenant webhook
	// (POST /api/v1/github/webhook/{webhook})
	GithubUpdateTenantWebhook(ctx echo.Context, webhook openapi_types.UUID) error
	// Get metadata
	// (GET /api/v1/meta)
	MetadataGet(ctx echo.Context) error
	// List integrations
	// (GET /api/v1/meta/integrations)
	MetadataListIntegrations(ctx echo.Context) error
	// Delete Slack webhook
	// (DELETE /api/v1/slack/{slack})
	SlackWebhookDelete(ctx echo.Context, slack openapi_types.UUID) error
	// Delete SNS integration
	// (DELETE /api/v1/sns/{sns})
	SnsDelete(ctx echo.Context, sns openapi_types.UUID) error
	// Github app tenant webhook
	// (POST /api/v1/sns/{tenant}/{event})
	SnsUpdate(ctx echo.Context, tenant openapi_types.UUID, event string) error
	// Create pull request
	// (POST /api/v1/step-runs/{step-run}/create-pr)
	StepRunUpdateCreatePr(ctx echo.Context, stepRun openapi_types.UUID) error
	// Get diff
	// (GET /api/v1/step-runs/{step-run}/diff)
	StepRunGetDiff(ctx echo.Context, stepRun openapi_types.UUID) error
	// List events for step run
	// (GET /api/v1/step-runs/{step-run}/events)
	StepRunListEvents(ctx echo.Context, stepRun openapi_types.UUID, params StepRunListEventsParams) error
	// List log lines
	// (GET /api/v1/step-runs/{step-run}/logs)
	LogLineList(ctx echo.Context, stepRun openapi_types.UUID, params LogLineListParams) error
	// Create tenant
	// (POST /api/v1/tenants)
	TenantCreate(ctx echo.Context) error
	// Update tenant
	// (PATCH /api/v1/tenants/{tenant})
	TenantUpdate(ctx echo.Context, tenant openapi_types.UUID) error
	// List tenant alert email groups
	// (GET /api/v1/tenants/{tenant}/alerting-email-groups)
	AlertEmailGroupList(ctx echo.Context, tenant openapi_types.UUID) error
	// Create tenant alert email group
	// (POST /api/v1/tenants/{tenant}/alerting-email-groups)
	AlertEmailGroupCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// Get tenant alerting settings
	// (GET /api/v1/tenants/{tenant}/alerting/settings)
	TenantAlertingSettingsGet(ctx echo.Context, tenant openapi_types.UUID) error
	// List API Tokens
	// (GET /api/v1/tenants/{tenant}/api-tokens)
	ApiTokenList(ctx echo.Context, tenant openapi_types.UUID) error
	// Create API Token
	// (POST /api/v1/tenants/{tenant}/api-tokens)
	ApiTokenCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// List events
	// (GET /api/v1/tenants/{tenant}/events)
	EventList(ctx echo.Context, tenant openapi_types.UUID, params EventListParams) error
	// List event keys
	// (GET /api/v1/tenants/{tenant}/events/keys)
	EventKeyList(ctx echo.Context, tenant openapi_types.UUID) error
	// Replay events
	// (POST /api/v1/tenants/{tenant}/events/replay)
	EventUpdateReplay(ctx echo.Context, tenant openapi_types.UUID) error
	// List tenant invites
	// (GET /api/v1/tenants/{tenant}/invites)
	TenantInviteList(ctx echo.Context, tenant openapi_types.UUID) error
	// Create tenant invite
	// (POST /api/v1/tenants/{tenant}/invites)
	TenantInviteCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// Delete invite
	// (DELETE /api/v1/tenants/{tenant}/invites/{tenant-invite})
	TenantInviteDelete(ctx echo.Context, tenant openapi_types.UUID, tenantInvite openapi_types.UUID) error
	// Update invite
	// (PATCH /api/v1/tenants/{tenant}/invites/{tenant-invite})
	TenantInviteUpdate(ctx echo.Context, tenant openapi_types.UUID, tenantInvite openapi_types.UUID) error
	// List tenant members
	// (GET /api/v1/tenants/{tenant}/members)
	TenantMemberList(ctx echo.Context, tenant openapi_types.UUID) error
	// Delete a tenant member
	// (DELETE /api/v1/tenants/{tenant}/members/{member})
	TenantMemberDelete(ctx echo.Context, tenant openapi_types.UUID, member openapi_types.UUID) error
	// List Slack integrations
	// (GET /api/v1/tenants/{tenant}/slack)
	SlackWebhookList(ctx echo.Context, tenant openapi_types.UUID) error
	// Start OAuth flow
	// (GET /api/v1/tenants/{tenant}/slack/start)
	UserUpdateSlackOauthStart(ctx echo.Context, tenant openapi_types.UUID) error
	// List SNS integrations
	// (GET /api/v1/tenants/{tenant}/sns)
	SnsList(ctx echo.Context, tenant openapi_types.UUID) error
	// Create SNS integration
	// (POST /api/v1/tenants/{tenant}/sns)
	SnsCreate(ctx echo.Context, tenant openapi_types.UUID) error
	// Get step run
	// (GET /api/v1/tenants/{tenant}/step-runs/{step-run})
	StepRunGet(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error
	// Attempts to cancel a step run
	// (POST /api/v1/tenants/{tenant}/step-runs/{step-run}/cancel)
	StepRunUpdateCancel(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error
	// Rerun step run
	// (POST /api/v1/tenants/{tenant}/step-runs/{step-run}/rerun)
	StepRunUpdateRerun(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error
	// Get step run schema
	// (GET /api/v1/tenants/{tenant}/step-runs/{step-run}/schema)
	StepRunGetSchema(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error
	// Get workers
	// (GET /api/v1/tenants/{tenant}/worker)
	WorkerList(ctx echo.Context, tenant openapi_types.UUID) error
	// Get workflow run
	// (GET /api/v1/tenants/{tenant}/workflow-runs/{workflow-run})
	WorkflowRunGet(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID) error
	// List pull requests
	// (GET /api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/prs)
	WorkflowRunListPullRequests(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID, params WorkflowRunListPullRequestsParams) error
	// Get workflows
	// (GET /api/v1/tenants/{tenant}/workflows)
	WorkflowList(ctx echo.Context, tenant openapi_types.UUID) error
	// Cancel workflow runs
	// (POST /api/v1/tenants/{tenant}/workflows/cancel)
	WorkflowRunCancel(ctx echo.Context, tenant openapi_types.UUID) error
	// Get workflow runs
	// (GET /api/v1/tenants/{tenant}/workflows/runs)
	WorkflowRunList(ctx echo.Context, tenant openapi_types.UUID, params WorkflowRunListParams) error
	// Get workflow runs
	// (GET /api/v1/tenants/{tenant}/workflows/runs/metrics)
	WorkflowRunGetMetrics(ctx echo.Context, tenant openapi_types.UUID, params WorkflowRunGetMetricsParams) error
	// Get current user
	// (GET /api/v1/users/current)
	UserGetCurrent(ctx echo.Context) error
	// Complete OAuth flow
	// (GET /api/v1/users/github-app/callback)
	UserUpdateGithubAppOauthCallback(ctx echo.Context) error
	// Start OAuth flow
	// (GET /api/v1/users/github-app/start)
	UserUpdateGithubAppOauthStart(ctx echo.Context) error
	// Complete OAuth flow
	// (GET /api/v1/users/github/callback)
	UserUpdateGithubOauthCallback(ctx echo.Context) error
	// Start OAuth flow
	// (GET /api/v1/users/github/start)
	UserUpdateGithubOauthStart(ctx echo.Context) error
	// Complete OAuth flow
	// (GET /api/v1/users/google/callback)
	UserUpdateGoogleOauthCallback(ctx echo.Context) error
	// Start OAuth flow
	// (GET /api/v1/users/google/start)
	UserUpdateGoogleOauthStart(ctx echo.Context) error
	// List tenant invites
	// (GET /api/v1/users/invites)
	UserListTenantInvites(ctx echo.Context) error
	// Accept tenant invite
	// (POST /api/v1/users/invites/accept)
	TenantInviteAccept(ctx echo.Context) error
	// Reject tenant invite
	// (POST /api/v1/users/invites/reject)
	TenantInviteReject(ctx echo.Context) error
	// Login user
	// (POST /api/v1/users/login)
	UserUpdateLogin(ctx echo.Context) error
	// Logout user
	// (POST /api/v1/users/logout)
	UserUpdateLogout(ctx echo.Context) error
	// List tenant memberships
	// (GET /api/v1/users/memberships)
	TenantMembershipsList(ctx echo.Context) error
	// Change user password
	// (POST /api/v1/users/password)
	UserUpdatePassword(ctx echo.Context) error
	// Register user
	// (POST /api/v1/users/register)
	UserCreate(ctx echo.Context) error
	// Complete OAuth flow
	// (GET /api/v1/users/slack/callback)
	UserUpdateSlackOauthCallback(ctx echo.Context) error
	// Get worker
	// (GET /api/v1/workers/{worker})
	WorkerGet(ctx echo.Context, worker openapi_types.UUID) error
	// Delete workflow
	// (DELETE /api/v1/workflows/{workflow})
	WorkflowDelete(ctx echo.Context, workflow openapi_types.UUID) error
	// Get workflow
	// (GET /api/v1/workflows/{workflow})
	WorkflowGet(ctx echo.Context, workflow openapi_types.UUID) error
	// Link github repository
	// (POST /api/v1/workflows/{workflow}/link-github)
	WorkflowUpdateLinkGithub(ctx echo.Context, workflow openapi_types.UUID) error
	// Get workflow metrics
	// (GET /api/v1/workflows/{workflow}/metrics)
	WorkflowGetMetrics(ctx echo.Context, workflow openapi_types.UUID, params WorkflowGetMetricsParams) error
	// Trigger workflow run
	// (POST /api/v1/workflows/{workflow}/trigger)
	WorkflowRunCreate(ctx echo.Context, workflow openapi_types.UUID, params WorkflowRunCreateParams) error
	// Get workflow version
	// (GET /api/v1/workflows/{workflow}/versions)
	WorkflowVersionGet(ctx echo.Context, workflow openapi_types.UUID, params WorkflowVersionGetParams) error
	// Get workflow version definition
	// (GET /api/v1/workflows/{workflow}/versions/definition)
	WorkflowVersionGetDefinition(ctx echo.Context, workflow openapi_types.UUID, params WorkflowVersionGetDefinitionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LivenessGet converts echo context to params.
func (w *ServerInterfaceWrapper) LivenessGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LivenessGet(ctx)
	return err
}

// ReadinessGet converts echo context to params.
func (w *ServerInterfaceWrapper) ReadinessGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReadinessGet(ctx)
	return err
}

// AlertEmailGroupDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AlertEmailGroupDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alert-email-group" -------------
	var alertEmailGroup openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "alert-email-group", runtime.ParamLocationPath, ctx.Param("alert-email-group"), &alertEmailGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alert-email-group: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AlertEmailGroupDelete(ctx, alertEmailGroup)
	return err
}

// AlertEmailGroupUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AlertEmailGroupUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alert-email-group" -------------
	var alertEmailGroup openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "alert-email-group", runtime.ParamLocationPath, ctx.Param("alert-email-group"), &alertEmailGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alert-email-group: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AlertEmailGroupUpdate(ctx, alertEmailGroup)
	return err
}

// ApiTokenUpdateRevoke converts echo context to params.
func (w *ServerInterfaceWrapper) ApiTokenUpdateRevoke(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "api-token" -------------
	var apiToken openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "api-token", runtime.ParamLocationPath, ctx.Param("api-token"), &apiToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api-token: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiTokenUpdateRevoke(ctx, apiToken)
	return err
}

// EventDataGet converts echo context to params.
func (w *ServerInterfaceWrapper) EventDataGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event" -------------
	var event openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "event", runtime.ParamLocationPath, ctx.Param("event"), &event)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventDataGet(ctx, event)
	return err
}

// GithubAppListInstallations converts echo context to params.
func (w *ServerInterfaceWrapper) GithubAppListInstallations(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GithubAppListInstallations(ctx)
	return err
}

// GithubAppListRepos converts echo context to params.
func (w *ServerInterfaceWrapper) GithubAppListRepos(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gh-installation" -------------
	var ghInstallation openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "gh-installation", runtime.ParamLocationPath, ctx.Param("gh-installation"), &ghInstallation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gh-installation: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GithubAppListRepos(ctx, ghInstallation)
	return err
}

// GithubAppListBranches converts echo context to params.
func (w *ServerInterfaceWrapper) GithubAppListBranches(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gh-installation" -------------
	var ghInstallation openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "gh-installation", runtime.ParamLocationPath, ctx.Param("gh-installation"), &ghInstallation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gh-installation: %s", err))
	}

	// ------------- Path parameter "gh-repo-owner" -------------
	var ghRepoOwner string

	err = runtime.BindStyledParameterWithLocation("simple", false, "gh-repo-owner", runtime.ParamLocationPath, ctx.Param("gh-repo-owner"), &ghRepoOwner)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gh-repo-owner: %s", err))
	}

	// ------------- Path parameter "gh-repo-name" -------------
	var ghRepoName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "gh-repo-name", runtime.ParamLocationPath, ctx.Param("gh-repo-name"), &ghRepoName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gh-repo-name: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GithubAppListBranches(ctx, ghInstallation, ghRepoOwner, ghRepoName)
	return err
}

// GithubUpdateGlobalWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) GithubUpdateGlobalWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GithubUpdateGlobalWebhook(ctx)
	return err
}

// GithubUpdateTenantWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) GithubUpdateTenantWebhook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "webhook" -------------
	var webhook openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "webhook", runtime.ParamLocationPath, ctx.Param("webhook"), &webhook)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter webhook: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GithubUpdateTenantWebhook(ctx, webhook)
	return err
}

// MetadataGet converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MetadataGet(ctx)
	return err
}

// MetadataListIntegrations converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataListIntegrations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MetadataListIntegrations(ctx)
	return err
}

// SlackWebhookDelete converts echo context to params.
func (w *ServerInterfaceWrapper) SlackWebhookDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slack" -------------
	var slack openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "slack", runtime.ParamLocationPath, ctx.Param("slack"), &slack)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slack: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SlackWebhookDelete(ctx, slack)
	return err
}

// SnsDelete converts echo context to params.
func (w *ServerInterfaceWrapper) SnsDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sns" -------------
	var sns openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "sns", runtime.ParamLocationPath, ctx.Param("sns"), &sns)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sns: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SnsDelete(ctx, sns)
	return err
}

// SnsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SnsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "event" -------------
	var event string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event", runtime.ParamLocationPath, ctx.Param("event"), &event)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SnsUpdate(ctx, tenant, event)
	return err
}

// StepRunUpdateCreatePr converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunUpdateCreatePr(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunUpdateCreatePr(ctx, stepRun)
	return err
}

// StepRunGetDiff converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunGetDiff(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunGetDiff(ctx, stepRun)
	return err
}

// StepRunListEvents converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunListEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StepRunListEventsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunListEvents(ctx, stepRun, params)
	return err
}

// LogLineList converts echo context to params.
func (w *ServerInterfaceWrapper) LogLineList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LogLineListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "levels" -------------

	err = runtime.BindQueryParameter("form", true, false, "levels", ctx.QueryParams(), &params.Levels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter levels: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "orderByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByField", ctx.QueryParams(), &params.OrderByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByField: %s", err))
	}

	// ------------- Optional query parameter "orderByDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByDirection", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByDirection: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogLineList(ctx, stepRun, params)
	return err
}

// TenantCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TenantCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantCreate(ctx)
	return err
}

// TenantUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TenantUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantUpdate(ctx, tenant)
	return err
}

// AlertEmailGroupList converts echo context to params.
func (w *ServerInterfaceWrapper) AlertEmailGroupList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AlertEmailGroupList(ctx, tenant)
	return err
}

// AlertEmailGroupCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AlertEmailGroupCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AlertEmailGroupCreate(ctx, tenant)
	return err
}

// TenantAlertingSettingsGet converts echo context to params.
func (w *ServerInterfaceWrapper) TenantAlertingSettingsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantAlertingSettingsGet(ctx, tenant)
	return err
}

// ApiTokenList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiTokenList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiTokenList(ctx, tenant)
	return err
}

// ApiTokenCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiTokenCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiTokenCreate(ctx, tenant)
	return err
}

// EventList converts echo context to params.
func (w *ServerInterfaceWrapper) EventList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EventListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "keys" -------------

	err = runtime.BindQueryParameter("form", true, false, "keys", ctx.QueryParams(), &params.Keys)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keys: %s", err))
	}

	// ------------- Optional query parameter "workflows" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflows", ctx.QueryParams(), &params.Workflows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflows: %s", err))
	}

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", ctx.QueryParams(), &params.Statuses)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter statuses: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "orderByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByField", ctx.QueryParams(), &params.OrderByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByField: %s", err))
	}

	// ------------- Optional query parameter "orderByDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByDirection", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByDirection: %s", err))
	}

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additionalMetadata: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventList(ctx, tenant, params)
	return err
}

// EventKeyList converts echo context to params.
func (w *ServerInterfaceWrapper) EventKeyList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventKeyList(ctx, tenant)
	return err
}

// EventUpdateReplay converts echo context to params.
func (w *ServerInterfaceWrapper) EventUpdateReplay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventUpdateReplay(ctx, tenant)
	return err
}

// TenantInviteList converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteList(ctx, tenant)
	return err
}

// TenantInviteCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteCreate(ctx, tenant)
	return err
}

// TenantInviteDelete converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "tenant-invite" -------------
	var tenantInvite openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant-invite", runtime.ParamLocationPath, ctx.Param("tenant-invite"), &tenantInvite)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant-invite: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteDelete(ctx, tenant, tenantInvite)
	return err
}

// TenantInviteUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "tenant-invite" -------------
	var tenantInvite openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant-invite", runtime.ParamLocationPath, ctx.Param("tenant-invite"), &tenantInvite)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant-invite: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteUpdate(ctx, tenant, tenantInvite)
	return err
}

// TenantMemberList converts echo context to params.
func (w *ServerInterfaceWrapper) TenantMemberList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantMemberList(ctx, tenant)
	return err
}

// TenantMemberDelete converts echo context to params.
func (w *ServerInterfaceWrapper) TenantMemberDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "member" -------------
	var member openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "member", runtime.ParamLocationPath, ctx.Param("member"), &member)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter member: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantMemberDelete(ctx, tenant, member)
	return err
}

// SlackWebhookList converts echo context to params.
func (w *ServerInterfaceWrapper) SlackWebhookList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SlackWebhookList(ctx, tenant)
	return err
}

// UserUpdateSlackOauthStart converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateSlackOauthStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateSlackOauthStart(ctx, tenant)
	return err
}

// SnsList converts echo context to params.
func (w *ServerInterfaceWrapper) SnsList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SnsList(ctx, tenant)
	return err
}

// SnsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) SnsCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SnsCreate(ctx, tenant)
	return err
}

// StepRunGet converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunGet(ctx, tenant, stepRun)
	return err
}

// StepRunUpdateCancel converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunUpdateCancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunUpdateCancel(ctx, tenant, stepRun)
	return err
}

// StepRunUpdateRerun converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunUpdateRerun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunUpdateRerun(ctx, tenant, stepRun)
	return err
}

// StepRunGetSchema converts echo context to params.
func (w *ServerInterfaceWrapper) StepRunGetSchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "step-run" -------------
	var stepRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "step-run", runtime.ParamLocationPath, ctx.Param("step-run"), &stepRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StepRunGetSchema(ctx, tenant, stepRun)
	return err
}

// WorkerList converts echo context to params.
func (w *ServerInterfaceWrapper) WorkerList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkerList(ctx, tenant)
	return err
}

// WorkflowRunGet converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "workflow-run" -------------
	var workflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow-run", runtime.ParamLocationPath, ctx.Param("workflow-run"), &workflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunGet(ctx, tenant, workflowRun)
	return err
}

// WorkflowRunListPullRequests converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunListPullRequests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// ------------- Path parameter "workflow-run" -------------
	var workflowRun openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow-run", runtime.ParamLocationPath, ctx.Param("workflow-run"), &workflowRun)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow-run: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowRunListPullRequestsParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunListPullRequests(ctx, tenant, workflowRun, params)
	return err
}

// WorkflowList converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowList(ctx, tenant)
	return err
}

// WorkflowRunCancel converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunCancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunCancel(ctx, tenant)
	return err
}

// WorkflowRunList converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowRunListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "eventId" -------------

	err = runtime.BindQueryParameter("form", true, false, "eventId", ctx.QueryParams(), &params.EventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// ------------- Optional query parameter "workflowId" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowId", ctx.QueryParams(), &params.WorkflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflowId: %s", err))
	}

	// ------------- Optional query parameter "parentWorkflowRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "parentWorkflowRunId", ctx.QueryParams(), &params.ParentWorkflowRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parentWorkflowRunId: %s", err))
	}

	// ------------- Optional query parameter "parentStepRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "parentStepRunId", ctx.QueryParams(), &params.ParentStepRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parentStepRunId: %s", err))
	}

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", ctx.QueryParams(), &params.Statuses)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter statuses: %s", err))
	}

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additionalMetadata: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunList(ctx, tenant, params)
	return err
}

// WorkflowRunGetMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunGetMetrics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenant" -------------
	var tenant openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenant", runtime.ParamLocationPath, ctx.Param("tenant"), &tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowRunGetMetricsParams
	// ------------- Optional query parameter "eventId" -------------

	err = runtime.BindQueryParameter("form", true, false, "eventId", ctx.QueryParams(), &params.EventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// ------------- Optional query parameter "workflowId" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowId", ctx.QueryParams(), &params.WorkflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflowId: %s", err))
	}

	// ------------- Optional query parameter "parentWorkflowRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "parentWorkflowRunId", ctx.QueryParams(), &params.ParentWorkflowRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parentWorkflowRunId: %s", err))
	}

	// ------------- Optional query parameter "parentStepRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "parentStepRunId", ctx.QueryParams(), &params.ParentStepRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parentStepRunId: %s", err))
	}

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additionalMetadata: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunGetMetrics(ctx, tenant, params)
	return err
}

// UserGetCurrent converts echo context to params.
func (w *ServerInterfaceWrapper) UserGetCurrent(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserGetCurrent(ctx)
	return err
}

// UserUpdateGithubAppOauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateGithubAppOauthCallback(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateGithubAppOauthCallback(ctx)
	return err
}

// UserUpdateGithubAppOauthStart converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateGithubAppOauthStart(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateGithubAppOauthStart(ctx)
	return err
}

// UserUpdateGithubOauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateGithubOauthCallback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateGithubOauthCallback(ctx)
	return err
}

// UserUpdateGithubOauthStart converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateGithubOauthStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateGithubOauthStart(ctx)
	return err
}

// UserUpdateGoogleOauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateGoogleOauthCallback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateGoogleOauthCallback(ctx)
	return err
}

// UserUpdateGoogleOauthStart converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateGoogleOauthStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateGoogleOauthStart(ctx)
	return err
}

// UserListTenantInvites converts echo context to params.
func (w *ServerInterfaceWrapper) UserListTenantInvites(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserListTenantInvites(ctx)
	return err
}

// TenantInviteAccept converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteAccept(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteAccept(ctx)
	return err
}

// TenantInviteReject converts echo context to params.
func (w *ServerInterfaceWrapper) TenantInviteReject(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantInviteReject(ctx)
	return err
}

// UserUpdateLogin converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateLogin(ctx)
	return err
}

// UserUpdateLogout converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateLogout(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateLogout(ctx)
	return err
}

// TenantMembershipsList converts echo context to params.
func (w *ServerInterfaceWrapper) TenantMembershipsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TenantMembershipsList(ctx)
	return err
}

// UserUpdatePassword converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdatePassword(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdatePassword(ctx)
	return err
}

// UserCreate converts echo context to params.
func (w *ServerInterfaceWrapper) UserCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserCreate(ctx)
	return err
}

// UserUpdateSlackOauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) UserUpdateSlackOauthCallback(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserUpdateSlackOauthCallback(ctx)
	return err
}

// WorkerGet converts echo context to params.
func (w *ServerInterfaceWrapper) WorkerGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "worker" -------------
	var worker openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "worker", runtime.ParamLocationPath, ctx.Param("worker"), &worker)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter worker: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkerGet(ctx, worker)
	return err
}

// WorkflowDelete converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowDelete(ctx, workflow)
	return err
}

// WorkflowGet converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowGet(ctx, workflow)
	return err
}

// WorkflowUpdateLinkGithub converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowUpdateLinkGithub(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowUpdateLinkGithub(ctx, workflow)
	return err
}

// WorkflowGetMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowGetMetrics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowGetMetricsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "groupKey" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupKey", ctx.QueryParams(), &params.GroupKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupKey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowGetMetrics(ctx, workflow, params)
	return err
}

// WorkflowRunCreate converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowRunCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowRunCreateParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowRunCreate(ctx, workflow, params)
	return err
}

// WorkflowVersionGet converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowVersionGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowVersionGetParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowVersionGet(ctx, workflow, params)
	return err
}

// WorkflowVersionGetDefinition converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowVersionGetDefinition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow" -------------
	var workflow openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow", runtime.ParamLocationPath, ctx.Param("workflow"), &workflow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowVersionGetDefinitionParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowVersionGetDefinition(ctx, workflow, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/live", wrapper.LivenessGet)
	router.GET(baseURL+"/api/ready", wrapper.ReadinessGet)
	router.DELETE(baseURL+"/api/v1/alerting-email-groups/:alert-email-group", wrapper.AlertEmailGroupDelete)
	router.PATCH(baseURL+"/api/v1/alerting-email-groups/:alert-email-group", wrapper.AlertEmailGroupUpdate)
	router.POST(baseURL+"/api/v1/api-tokens/:api-token", wrapper.ApiTokenUpdateRevoke)
	router.GET(baseURL+"/api/v1/events/:event/data", wrapper.EventDataGet)
	router.GET(baseURL+"/api/v1/github-app/installations", wrapper.GithubAppListInstallations)
	router.GET(baseURL+"/api/v1/github-app/installations/:gh-installation/repos", wrapper.GithubAppListRepos)
	router.GET(baseURL+"/api/v1/github-app/installations/:gh-installation/repos/:gh-repo-owner/:gh-repo-name/branches", wrapper.GithubAppListBranches)
	router.POST(baseURL+"/api/v1/github/webhook", wrapper.GithubUpdateGlobalWebhook)
	router.POST(baseURL+"/api/v1/github/webhook/:webhook", wrapper.GithubUpdateTenantWebhook)
	router.GET(baseURL+"/api/v1/meta", wrapper.MetadataGet)
	router.GET(baseURL+"/api/v1/meta/integrations", wrapper.MetadataListIntegrations)
	router.DELETE(baseURL+"/api/v1/slack/:slack", wrapper.SlackWebhookDelete)
	router.DELETE(baseURL+"/api/v1/sns/:sns", wrapper.SnsDelete)
	router.POST(baseURL+"/api/v1/sns/:tenant/:event", wrapper.SnsUpdate)
	router.POST(baseURL+"/api/v1/step-runs/:step-run/create-pr", wrapper.StepRunUpdateCreatePr)
	router.GET(baseURL+"/api/v1/step-runs/:step-run/diff", wrapper.StepRunGetDiff)
	router.GET(baseURL+"/api/v1/step-runs/:step-run/events", wrapper.StepRunListEvents)
	router.GET(baseURL+"/api/v1/step-runs/:step-run/logs", wrapper.LogLineList)
	router.POST(baseURL+"/api/v1/tenants", wrapper.TenantCreate)
	router.PATCH(baseURL+"/api/v1/tenants/:tenant", wrapper.TenantUpdate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/alerting-email-groups", wrapper.AlertEmailGroupList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/alerting-email-groups", wrapper.AlertEmailGroupCreate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/alerting/settings", wrapper.TenantAlertingSettingsGet)
	router.GET(baseURL+"/api/v1/tenants/:tenant/api-tokens", wrapper.ApiTokenList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/api-tokens", wrapper.ApiTokenCreate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/events", wrapper.EventList)
	router.GET(baseURL+"/api/v1/tenants/:tenant/events/keys", wrapper.EventKeyList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/events/replay", wrapper.EventUpdateReplay)
	router.GET(baseURL+"/api/v1/tenants/:tenant/invites", wrapper.TenantInviteList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/invites", wrapper.TenantInviteCreate)
	router.DELETE(baseURL+"/api/v1/tenants/:tenant/invites/:tenant-invite", wrapper.TenantInviteDelete)
	router.PATCH(baseURL+"/api/v1/tenants/:tenant/invites/:tenant-invite", wrapper.TenantInviteUpdate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/members", wrapper.TenantMemberList)
	router.DELETE(baseURL+"/api/v1/tenants/:tenant/members/:member", wrapper.TenantMemberDelete)
	router.GET(baseURL+"/api/v1/tenants/:tenant/slack", wrapper.SlackWebhookList)
	router.GET(baseURL+"/api/v1/tenants/:tenant/slack/start", wrapper.UserUpdateSlackOauthStart)
	router.GET(baseURL+"/api/v1/tenants/:tenant/sns", wrapper.SnsList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/sns", wrapper.SnsCreate)
	router.GET(baseURL+"/api/v1/tenants/:tenant/step-runs/:step-run", wrapper.StepRunGet)
	router.POST(baseURL+"/api/v1/tenants/:tenant/step-runs/:step-run/cancel", wrapper.StepRunUpdateCancel)
	router.POST(baseURL+"/api/v1/tenants/:tenant/step-runs/:step-run/rerun", wrapper.StepRunUpdateRerun)
	router.GET(baseURL+"/api/v1/tenants/:tenant/step-runs/:step-run/schema", wrapper.StepRunGetSchema)
	router.GET(baseURL+"/api/v1/tenants/:tenant/worker", wrapper.WorkerList)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflow-runs/:workflow-run", wrapper.WorkflowRunGet)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflow-runs/:workflow-run/prs", wrapper.WorkflowRunListPullRequests)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows", wrapper.WorkflowList)
	router.POST(baseURL+"/api/v1/tenants/:tenant/workflows/cancel", wrapper.WorkflowRunCancel)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows/runs", wrapper.WorkflowRunList)
	router.GET(baseURL+"/api/v1/tenants/:tenant/workflows/runs/metrics", wrapper.WorkflowRunGetMetrics)
	router.GET(baseURL+"/api/v1/users/current", wrapper.UserGetCurrent)
	router.GET(baseURL+"/api/v1/users/github-app/callback", wrapper.UserUpdateGithubAppOauthCallback)
	router.GET(baseURL+"/api/v1/users/github-app/start", wrapper.UserUpdateGithubAppOauthStart)
	router.GET(baseURL+"/api/v1/users/github/callback", wrapper.UserUpdateGithubOauthCallback)
	router.GET(baseURL+"/api/v1/users/github/start", wrapper.UserUpdateGithubOauthStart)
	router.GET(baseURL+"/api/v1/users/google/callback", wrapper.UserUpdateGoogleOauthCallback)
	router.GET(baseURL+"/api/v1/users/google/start", wrapper.UserUpdateGoogleOauthStart)
	router.GET(baseURL+"/api/v1/users/invites", wrapper.UserListTenantInvites)
	router.POST(baseURL+"/api/v1/users/invites/accept", wrapper.TenantInviteAccept)
	router.POST(baseURL+"/api/v1/users/invites/reject", wrapper.TenantInviteReject)
	router.POST(baseURL+"/api/v1/users/login", wrapper.UserUpdateLogin)
	router.POST(baseURL+"/api/v1/users/logout", wrapper.UserUpdateLogout)
	router.GET(baseURL+"/api/v1/users/memberships", wrapper.TenantMembershipsList)
	router.POST(baseURL+"/api/v1/users/password", wrapper.UserUpdatePassword)
	router.POST(baseURL+"/api/v1/users/register", wrapper.UserCreate)
	router.GET(baseURL+"/api/v1/users/slack/callback", wrapper.UserUpdateSlackOauthCallback)
	router.GET(baseURL+"/api/v1/workers/:worker", wrapper.WorkerGet)
	router.DELETE(baseURL+"/api/v1/workflows/:workflow", wrapper.WorkflowDelete)
	router.GET(baseURL+"/api/v1/workflows/:workflow", wrapper.WorkflowGet)
	router.POST(baseURL+"/api/v1/workflows/:workflow/link-github", wrapper.WorkflowUpdateLinkGithub)
	router.GET(baseURL+"/api/v1/workflows/:workflow/metrics", wrapper.WorkflowGetMetrics)
	router.POST(baseURL+"/api/v1/workflows/:workflow/trigger", wrapper.WorkflowRunCreate)
	router.GET(baseURL+"/api/v1/workflows/:workflow/versions", wrapper.WorkflowVersionGet)
	router.GET(baseURL+"/api/v1/workflows/:workflow/versions/definition", wrapper.WorkflowVersionGetDefinition)

}

type LivenessGetRequestObject struct {
}

type LivenessGetResponseObject interface {
	VisitLivenessGetResponse(w http.ResponseWriter) error
}

type LivenessGet200Response struct {
}

func (response LivenessGet200Response) VisitLivenessGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LivenessGet500Response struct {
}

func (response LivenessGet500Response) VisitLivenessGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ReadinessGetRequestObject struct {
}

type ReadinessGetResponseObject interface {
	VisitReadinessGetResponse(w http.ResponseWriter) error
}

type ReadinessGet200Response struct {
}

func (response ReadinessGet200Response) VisitReadinessGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReadinessGet500Response struct {
}

func (response ReadinessGet500Response) VisitReadinessGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AlertEmailGroupDeleteRequestObject struct {
	AlertEmailGroup openapi_types.UUID `json:"alert-email-group"`
}

type AlertEmailGroupDeleteResponseObject interface {
	VisitAlertEmailGroupDeleteResponse(w http.ResponseWriter) error
}

type AlertEmailGroupDelete204Response struct {
}

func (response AlertEmailGroupDelete204Response) VisitAlertEmailGroupDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AlertEmailGroupDelete400JSONResponse APIErrors

func (response AlertEmailGroupDelete400JSONResponse) VisitAlertEmailGroupDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupDelete403JSONResponse APIError

func (response AlertEmailGroupDelete403JSONResponse) VisitAlertEmailGroupDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupUpdateRequestObject struct {
	AlertEmailGroup openapi_types.UUID `json:"alert-email-group"`
	Body            *AlertEmailGroupUpdateJSONRequestBody
}

type AlertEmailGroupUpdateResponseObject interface {
	VisitAlertEmailGroupUpdateResponse(w http.ResponseWriter) error
}

type AlertEmailGroupUpdate200JSONResponse TenantAlertEmailGroup

func (response AlertEmailGroupUpdate200JSONResponse) VisitAlertEmailGroupUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupUpdate400JSONResponse APIErrors

func (response AlertEmailGroupUpdate400JSONResponse) VisitAlertEmailGroupUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupUpdate403JSONResponse APIError

func (response AlertEmailGroupUpdate403JSONResponse) VisitAlertEmailGroupUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenUpdateRevokeRequestObject struct {
	ApiToken openapi_types.UUID `json:"api-token"`
}

type ApiTokenUpdateRevokeResponseObject interface {
	VisitApiTokenUpdateRevokeResponse(w http.ResponseWriter) error
}

type ApiTokenUpdateRevoke204Response struct {
}

func (response ApiTokenUpdateRevoke204Response) VisitApiTokenUpdateRevokeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ApiTokenUpdateRevoke400JSONResponse APIErrors

func (response ApiTokenUpdateRevoke400JSONResponse) VisitApiTokenUpdateRevokeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenUpdateRevoke403JSONResponse APIErrors

func (response ApiTokenUpdateRevoke403JSONResponse) VisitApiTokenUpdateRevokeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventDataGetRequestObject struct {
	Event openapi_types.UUID `json:"event"`
}

type EventDataGetResponseObject interface {
	VisitEventDataGetResponse(w http.ResponseWriter) error
}

type EventDataGet200JSONResponse EventData

func (response EventDataGet200JSONResponse) VisitEventDataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventDataGet400JSONResponse APIErrors

func (response EventDataGet400JSONResponse) VisitEventDataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventDataGet403JSONResponse APIErrors

func (response EventDataGet403JSONResponse) VisitEventDataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListInstallationsRequestObject struct {
}

type GithubAppListInstallationsResponseObject interface {
	VisitGithubAppListInstallationsResponse(w http.ResponseWriter) error
}

type GithubAppListInstallations200JSONResponse ListGithubAppInstallationsResponse

func (response GithubAppListInstallations200JSONResponse) VisitGithubAppListInstallationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListInstallations400JSONResponse APIErrors

func (response GithubAppListInstallations400JSONResponse) VisitGithubAppListInstallationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListInstallations401JSONResponse APIErrors

func (response GithubAppListInstallations401JSONResponse) VisitGithubAppListInstallationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListInstallations405JSONResponse APIErrors

func (response GithubAppListInstallations405JSONResponse) VisitGithubAppListInstallationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListReposRequestObject struct {
	GhInstallation openapi_types.UUID `json:"gh-installation"`
}

type GithubAppListReposResponseObject interface {
	VisitGithubAppListReposResponse(w http.ResponseWriter) error
}

type GithubAppListRepos200JSONResponse ListGithubReposResponse

func (response GithubAppListRepos200JSONResponse) VisitGithubAppListReposResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListRepos400JSONResponse APIErrors

func (response GithubAppListRepos400JSONResponse) VisitGithubAppListReposResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListRepos401JSONResponse APIErrors

func (response GithubAppListRepos401JSONResponse) VisitGithubAppListReposResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListRepos405JSONResponse APIErrors

func (response GithubAppListRepos405JSONResponse) VisitGithubAppListReposResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListBranchesRequestObject struct {
	GhInstallation openapi_types.UUID `json:"gh-installation"`
	GhRepoOwner    string             `json:"gh-repo-owner"`
	GhRepoName     string             `json:"gh-repo-name"`
}

type GithubAppListBranchesResponseObject interface {
	VisitGithubAppListBranchesResponse(w http.ResponseWriter) error
}

type GithubAppListBranches200JSONResponse ListGithubBranchesResponse

func (response GithubAppListBranches200JSONResponse) VisitGithubAppListBranchesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListBranches400JSONResponse APIErrors

func (response GithubAppListBranches400JSONResponse) VisitGithubAppListBranchesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListBranches401JSONResponse APIErrors

func (response GithubAppListBranches401JSONResponse) VisitGithubAppListBranchesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GithubAppListBranches405JSONResponse APIErrors

func (response GithubAppListBranches405JSONResponse) VisitGithubAppListBranchesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type GithubUpdateGlobalWebhookRequestObject struct {
}

type GithubUpdateGlobalWebhookResponseObject interface {
	VisitGithubUpdateGlobalWebhookResponse(w http.ResponseWriter) error
}

type GithubUpdateGlobalWebhook200Response struct {
}

func (response GithubUpdateGlobalWebhook200Response) VisitGithubUpdateGlobalWebhookResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GithubUpdateGlobalWebhook400JSONResponse APIErrors

func (response GithubUpdateGlobalWebhook400JSONResponse) VisitGithubUpdateGlobalWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GithubUpdateGlobalWebhook401JSONResponse APIErrors

func (response GithubUpdateGlobalWebhook401JSONResponse) VisitGithubUpdateGlobalWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GithubUpdateGlobalWebhook405JSONResponse APIErrors

func (response GithubUpdateGlobalWebhook405JSONResponse) VisitGithubUpdateGlobalWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type GithubUpdateTenantWebhookRequestObject struct {
	Webhook openapi_types.UUID `json:"webhook"`
}

type GithubUpdateTenantWebhookResponseObject interface {
	VisitGithubUpdateTenantWebhookResponse(w http.ResponseWriter) error
}

type GithubUpdateTenantWebhook200Response struct {
}

func (response GithubUpdateTenantWebhook200Response) VisitGithubUpdateTenantWebhookResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GithubUpdateTenantWebhook400JSONResponse APIErrors

func (response GithubUpdateTenantWebhook400JSONResponse) VisitGithubUpdateTenantWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GithubUpdateTenantWebhook401JSONResponse APIErrors

func (response GithubUpdateTenantWebhook401JSONResponse) VisitGithubUpdateTenantWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GithubUpdateTenantWebhook405JSONResponse APIErrors

func (response GithubUpdateTenantWebhook405JSONResponse) VisitGithubUpdateTenantWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type MetadataGetRequestObject struct {
}

type MetadataGetResponseObject interface {
	VisitMetadataGetResponse(w http.ResponseWriter) error
}

type MetadataGet200JSONResponse APIMeta

func (response MetadataGet200JSONResponse) VisitMetadataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MetadataGet400JSONResponse APIErrors

func (response MetadataGet400JSONResponse) VisitMetadataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type MetadataListIntegrationsRequestObject struct {
}

type MetadataListIntegrationsResponseObject interface {
	VisitMetadataListIntegrationsResponse(w http.ResponseWriter) error
}

type MetadataListIntegrations200JSONResponse ListAPIMetaIntegration

func (response MetadataListIntegrations200JSONResponse) VisitMetadataListIntegrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MetadataListIntegrations400JSONResponse APIErrors

func (response MetadataListIntegrations400JSONResponse) VisitMetadataListIntegrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookDeleteRequestObject struct {
	Slack openapi_types.UUID `json:"slack"`
}

type SlackWebhookDeleteResponseObject interface {
	VisitSlackWebhookDeleteResponse(w http.ResponseWriter) error
}

type SlackWebhookDelete204Response struct {
}

func (response SlackWebhookDelete204Response) VisitSlackWebhookDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SlackWebhookDelete400JSONResponse APIErrors

func (response SlackWebhookDelete400JSONResponse) VisitSlackWebhookDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookDelete401JSONResponse APIErrors

func (response SlackWebhookDelete401JSONResponse) VisitSlackWebhookDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookDelete405JSONResponse APIErrors

func (response SlackWebhookDelete405JSONResponse) VisitSlackWebhookDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type SnsDeleteRequestObject struct {
	Sns openapi_types.UUID `json:"sns"`
}

type SnsDeleteResponseObject interface {
	VisitSnsDeleteResponse(w http.ResponseWriter) error
}

type SnsDelete204Response struct {
}

func (response SnsDelete204Response) VisitSnsDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SnsDelete400JSONResponse APIErrors

func (response SnsDelete400JSONResponse) VisitSnsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SnsDelete401JSONResponse APIErrors

func (response SnsDelete401JSONResponse) VisitSnsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SnsDelete405JSONResponse APIErrors

func (response SnsDelete405JSONResponse) VisitSnsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type SnsUpdateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Event  string             `json:"event"`
}

type SnsUpdateResponseObject interface {
	VisitSnsUpdateResponse(w http.ResponseWriter) error
}

type SnsUpdate200Response struct {
}

func (response SnsUpdate200Response) VisitSnsUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SnsUpdate400JSONResponse APIErrors

func (response SnsUpdate400JSONResponse) VisitSnsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SnsUpdate401JSONResponse APIErrors

func (response SnsUpdate401JSONResponse) VisitSnsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SnsUpdate405JSONResponse APIErrors

func (response SnsUpdate405JSONResponse) VisitSnsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateCreatePrRequestObject struct {
	StepRun openapi_types.UUID `json:"step-run"`
	Body    *StepRunUpdateCreatePrJSONRequestBody
}

type StepRunUpdateCreatePrResponseObject interface {
	VisitStepRunUpdateCreatePrResponse(w http.ResponseWriter) error
}

type StepRunUpdateCreatePr200JSONResponse CreatePullRequestFromStepRun

func (response StepRunUpdateCreatePr200JSONResponse) VisitStepRunUpdateCreatePrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateCreatePr400JSONResponse APIErrors

func (response StepRunUpdateCreatePr400JSONResponse) VisitStepRunUpdateCreatePrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateCreatePr403JSONResponse APIErrors

func (response StepRunUpdateCreatePr403JSONResponse) VisitStepRunUpdateCreatePrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateCreatePr404JSONResponse APIErrors

func (response StepRunUpdateCreatePr404JSONResponse) VisitStepRunUpdateCreatePrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetDiffRequestObject struct {
	StepRun openapi_types.UUID `json:"step-run"`
}

type StepRunGetDiffResponseObject interface {
	VisitStepRunGetDiffResponse(w http.ResponseWriter) error
}

type StepRunGetDiff200JSONResponse GetStepRunDiffResponse

func (response StepRunGetDiff200JSONResponse) VisitStepRunGetDiffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetDiff400JSONResponse APIErrors

func (response StepRunGetDiff400JSONResponse) VisitStepRunGetDiffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetDiff403JSONResponse APIErrors

func (response StepRunGetDiff403JSONResponse) VisitStepRunGetDiffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetDiff404JSONResponse APIErrors

func (response StepRunGetDiff404JSONResponse) VisitStepRunGetDiffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListEventsRequestObject struct {
	StepRun openapi_types.UUID `json:"step-run"`
	Params  StepRunListEventsParams
}

type StepRunListEventsResponseObject interface {
	VisitStepRunListEventsResponse(w http.ResponseWriter) error
}

type StepRunListEvents200JSONResponse StepRunEventList

func (response StepRunListEvents200JSONResponse) VisitStepRunListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListEvents400JSONResponse APIErrors

func (response StepRunListEvents400JSONResponse) VisitStepRunListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListEvents403JSONResponse APIErrors

func (response StepRunListEvents403JSONResponse) VisitStepRunListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunListEvents404JSONResponse APIErrors

func (response StepRunListEvents404JSONResponse) VisitStepRunListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LogLineListRequestObject struct {
	StepRun openapi_types.UUID `json:"step-run"`
	Params  LogLineListParams
}

type LogLineListResponseObject interface {
	VisitLogLineListResponse(w http.ResponseWriter) error
}

type LogLineList200JSONResponse LogLineList

func (response LogLineList200JSONResponse) VisitLogLineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LogLineList400JSONResponse APIErrors

func (response LogLineList400JSONResponse) VisitLogLineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LogLineList403JSONResponse APIErrors

func (response LogLineList403JSONResponse) VisitLogLineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantCreateRequestObject struct {
	Body *TenantCreateJSONRequestBody
}

type TenantCreateResponseObject interface {
	VisitTenantCreateResponse(w http.ResponseWriter) error
}

type TenantCreate200JSONResponse Tenant

func (response TenantCreate200JSONResponse) VisitTenantCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantCreate400JSONResponse APIErrors

func (response TenantCreate400JSONResponse) VisitTenantCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantCreate403JSONResponse APIError

func (response TenantCreate403JSONResponse) VisitTenantCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantUpdateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *TenantUpdateJSONRequestBody
}

type TenantUpdateResponseObject interface {
	VisitTenantUpdateResponse(w http.ResponseWriter) error
}

type TenantUpdate200JSONResponse Tenant

func (response TenantUpdate200JSONResponse) VisitTenantUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantUpdate400JSONResponse APIErrors

func (response TenantUpdate400JSONResponse) VisitTenantUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantUpdate403JSONResponse APIError

func (response TenantUpdate403JSONResponse) VisitTenantUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type AlertEmailGroupListResponseObject interface {
	VisitAlertEmailGroupListResponse(w http.ResponseWriter) error
}

type AlertEmailGroupList200JSONResponse TenantAlertEmailGroupList

func (response AlertEmailGroupList200JSONResponse) VisitAlertEmailGroupListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupList400JSONResponse APIErrors

func (response AlertEmailGroupList400JSONResponse) VisitAlertEmailGroupListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupList403JSONResponse APIError

func (response AlertEmailGroupList403JSONResponse) VisitAlertEmailGroupListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *AlertEmailGroupCreateJSONRequestBody
}

type AlertEmailGroupCreateResponseObject interface {
	VisitAlertEmailGroupCreateResponse(w http.ResponseWriter) error
}

type AlertEmailGroupCreate201JSONResponse TenantAlertEmailGroup

func (response AlertEmailGroupCreate201JSONResponse) VisitAlertEmailGroupCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupCreate400JSONResponse APIErrors

func (response AlertEmailGroupCreate400JSONResponse) VisitAlertEmailGroupCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AlertEmailGroupCreate403JSONResponse APIError

func (response AlertEmailGroupCreate403JSONResponse) VisitAlertEmailGroupCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantAlertingSettingsGetRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type TenantAlertingSettingsGetResponseObject interface {
	VisitTenantAlertingSettingsGetResponse(w http.ResponseWriter) error
}

type TenantAlertingSettingsGet200JSONResponse TenantAlertingSettings

func (response TenantAlertingSettingsGet200JSONResponse) VisitTenantAlertingSettingsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantAlertingSettingsGet400JSONResponse APIErrors

func (response TenantAlertingSettingsGet400JSONResponse) VisitTenantAlertingSettingsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantAlertingSettingsGet403JSONResponse APIError

func (response TenantAlertingSettingsGet403JSONResponse) VisitTenantAlertingSettingsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type ApiTokenListResponseObject interface {
	VisitApiTokenListResponse(w http.ResponseWriter) error
}

type ApiTokenList200JSONResponse ListAPITokensResponse

func (response ApiTokenList200JSONResponse) VisitApiTokenListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenList400JSONResponse APIErrors

func (response ApiTokenList400JSONResponse) VisitApiTokenListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenList403JSONResponse APIErrors

func (response ApiTokenList403JSONResponse) VisitApiTokenListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *ApiTokenCreateJSONRequestBody
}

type ApiTokenCreateResponseObject interface {
	VisitApiTokenCreateResponse(w http.ResponseWriter) error
}

type ApiTokenCreate200JSONResponse CreateAPITokenResponse

func (response ApiTokenCreate200JSONResponse) VisitApiTokenCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenCreate400JSONResponse APIErrors

func (response ApiTokenCreate400JSONResponse) VisitApiTokenCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApiTokenCreate403JSONResponse APIErrors

func (response ApiTokenCreate403JSONResponse) VisitApiTokenCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params EventListParams
}

type EventListResponseObject interface {
	VisitEventListResponse(w http.ResponseWriter) error
}

type EventList200JSONResponse EventList

func (response EventList200JSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventList400JSONResponse APIErrors

func (response EventList400JSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventList403JSONResponse APIErrors

func (response EventList403JSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventKeyListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type EventKeyListResponseObject interface {
	VisitEventKeyListResponse(w http.ResponseWriter) error
}

type EventKeyList200JSONResponse EventKeyList

func (response EventKeyList200JSONResponse) VisitEventKeyListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventKeyList400JSONResponse APIErrors

func (response EventKeyList400JSONResponse) VisitEventKeyListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventKeyList403JSONResponse APIErrors

func (response EventKeyList403JSONResponse) VisitEventKeyListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateReplayRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *EventUpdateReplayJSONRequestBody
}

type EventUpdateReplayResponseObject interface {
	VisitEventUpdateReplayResponse(w http.ResponseWriter) error
}

type EventUpdateReplay200JSONResponse EventList

func (response EventUpdateReplay200JSONResponse) VisitEventUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateReplay400JSONResponse APIErrors

func (response EventUpdateReplay400JSONResponse) VisitEventUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdateReplay403JSONResponse APIErrors

func (response EventUpdateReplay403JSONResponse) VisitEventUpdateReplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type TenantInviteListResponseObject interface {
	VisitTenantInviteListResponse(w http.ResponseWriter) error
}

type TenantInviteList200JSONResponse TenantInviteList

func (response TenantInviteList200JSONResponse) VisitTenantInviteListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteList400JSONResponse APIErrors

func (response TenantInviteList400JSONResponse) VisitTenantInviteListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteList403JSONResponse APIError

func (response TenantInviteList403JSONResponse) VisitTenantInviteListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *TenantInviteCreateJSONRequestBody
}

type TenantInviteCreateResponseObject interface {
	VisitTenantInviteCreateResponse(w http.ResponseWriter) error
}

type TenantInviteCreate201JSONResponse TenantInvite

func (response TenantInviteCreate201JSONResponse) VisitTenantInviteCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteCreate400JSONResponse APIErrors

func (response TenantInviteCreate400JSONResponse) VisitTenantInviteCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteCreate403JSONResponse APIError

func (response TenantInviteCreate403JSONResponse) VisitTenantInviteCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteDeleteRequestObject struct {
	Tenant       openapi_types.UUID `json:"tenant"`
	TenantInvite openapi_types.UUID `json:"tenant-invite"`
}

type TenantInviteDeleteResponseObject interface {
	VisitTenantInviteDeleteResponse(w http.ResponseWriter) error
}

type TenantInviteDelete200JSONResponse TenantInvite

func (response TenantInviteDelete200JSONResponse) VisitTenantInviteDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteDelete400JSONResponse APIErrors

func (response TenantInviteDelete400JSONResponse) VisitTenantInviteDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteUpdateRequestObject struct {
	Tenant       openapi_types.UUID `json:"tenant"`
	TenantInvite openapi_types.UUID `json:"tenant-invite"`
	Body         *TenantInviteUpdateJSONRequestBody
}

type TenantInviteUpdateResponseObject interface {
	VisitTenantInviteUpdateResponse(w http.ResponseWriter) error
}

type TenantInviteUpdate200JSONResponse TenantInvite

func (response TenantInviteUpdate200JSONResponse) VisitTenantInviteUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteUpdate400JSONResponse APIErrors

func (response TenantInviteUpdate400JSONResponse) VisitTenantInviteUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type TenantMemberListResponseObject interface {
	VisitTenantMemberListResponse(w http.ResponseWriter) error
}

type TenantMemberList200JSONResponse TenantMemberList

func (response TenantMemberList200JSONResponse) VisitTenantMemberListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberList400JSONResponse APIErrors

func (response TenantMemberList400JSONResponse) VisitTenantMemberListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberList403JSONResponse APIError

func (response TenantMemberList403JSONResponse) VisitTenantMemberListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberDeleteRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Member openapi_types.UUID `json:"member"`
}

type TenantMemberDeleteResponseObject interface {
	VisitTenantMemberDeleteResponse(w http.ResponseWriter) error
}

type TenantMemberDelete204JSONResponse TenantMember

func (response TenantMemberDelete204JSONResponse) VisitTenantMemberDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberDelete400JSONResponse APIErrors

func (response TenantMemberDelete400JSONResponse) VisitTenantMemberDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberDelete403JSONResponse APIErrors

func (response TenantMemberDelete403JSONResponse) VisitTenantMemberDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantMemberDelete404JSONResponse APIErrors

func (response TenantMemberDelete404JSONResponse) VisitTenantMemberDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type SlackWebhookListResponseObject interface {
	VisitSlackWebhookListResponse(w http.ResponseWriter) error
}

type SlackWebhookList200JSONResponse ListSlackWebhooks

func (response SlackWebhookList200JSONResponse) VisitSlackWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookList400JSONResponse APIErrors

func (response SlackWebhookList400JSONResponse) VisitSlackWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookList401JSONResponse APIErrors

func (response SlackWebhookList401JSONResponse) VisitSlackWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SlackWebhookList405JSONResponse APIErrors

func (response SlackWebhookList405JSONResponse) VisitSlackWebhookListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateSlackOauthStartRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type UserUpdateSlackOauthStartResponseObject interface {
	VisitUserUpdateSlackOauthStartResponse(w http.ResponseWriter) error
}

type UserUpdateSlackOauthStart302ResponseHeaders struct {
	Location string
}

type UserUpdateSlackOauthStart302Response struct {
	Headers UserUpdateSlackOauthStart302ResponseHeaders
}

func (response UserUpdateSlackOauthStart302Response) VisitUserUpdateSlackOauthStartResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SnsListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type SnsListResponseObject interface {
	VisitSnsListResponse(w http.ResponseWriter) error
}

type SnsList200JSONResponse ListSNSIntegrations

func (response SnsList200JSONResponse) VisitSnsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SnsList400JSONResponse APIErrors

func (response SnsList400JSONResponse) VisitSnsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SnsList401JSONResponse APIErrors

func (response SnsList401JSONResponse) VisitSnsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SnsList405JSONResponse APIErrors

func (response SnsList405JSONResponse) VisitSnsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type SnsCreateRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *SnsCreateJSONRequestBody
}

type SnsCreateResponseObject interface {
	VisitSnsCreateResponse(w http.ResponseWriter) error
}

type SnsCreate201JSONResponse SNSIntegration

func (response SnsCreate201JSONResponse) VisitSnsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type SnsCreate400JSONResponse APIErrors

func (response SnsCreate400JSONResponse) VisitSnsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SnsCreate401JSONResponse APIErrors

func (response SnsCreate401JSONResponse) VisitSnsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SnsCreate405JSONResponse APIErrors

func (response SnsCreate405JSONResponse) VisitSnsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetRequestObject struct {
	Tenant  openapi_types.UUID `json:"tenant"`
	StepRun openapi_types.UUID `json:"step-run"`
}

type StepRunGetResponseObject interface {
	VisitStepRunGetResponse(w http.ResponseWriter) error
}

type StepRunGet200JSONResponse StepRun

func (response StepRunGet200JSONResponse) VisitStepRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGet400JSONResponse APIErrors

func (response StepRunGet400JSONResponse) VisitStepRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGet403JSONResponse APIErrors

func (response StepRunGet403JSONResponse) VisitStepRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGet404JSONResponse APIErrors

func (response StepRunGet404JSONResponse) VisitStepRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateCancelRequestObject struct {
	Tenant  openapi_types.UUID `json:"tenant"`
	StepRun openapi_types.UUID `json:"step-run"`
}

type StepRunUpdateCancelResponseObject interface {
	VisitStepRunUpdateCancelResponse(w http.ResponseWriter) error
}

type StepRunUpdateCancel200JSONResponse StepRun

func (response StepRunUpdateCancel200JSONResponse) VisitStepRunUpdateCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateCancel400JSONResponse APIErrors

func (response StepRunUpdateCancel400JSONResponse) VisitStepRunUpdateCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateCancel403JSONResponse APIErrors

func (response StepRunUpdateCancel403JSONResponse) VisitStepRunUpdateCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateRerunRequestObject struct {
	Tenant  openapi_types.UUID `json:"tenant"`
	StepRun openapi_types.UUID `json:"step-run"`
	Body    *StepRunUpdateRerunJSONRequestBody
}

type StepRunUpdateRerunResponseObject interface {
	VisitStepRunUpdateRerunResponse(w http.ResponseWriter) error
}

type StepRunUpdateRerun200JSONResponse StepRun

func (response StepRunUpdateRerun200JSONResponse) VisitStepRunUpdateRerunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateRerun400JSONResponse APIErrors

func (response StepRunUpdateRerun400JSONResponse) VisitStepRunUpdateRerunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunUpdateRerun403JSONResponse APIErrors

func (response StepRunUpdateRerun403JSONResponse) VisitStepRunUpdateRerunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetSchemaRequestObject struct {
	Tenant  openapi_types.UUID `json:"tenant"`
	StepRun openapi_types.UUID `json:"step-run"`
}

type StepRunGetSchemaResponseObject interface {
	VisitStepRunGetSchemaResponse(w http.ResponseWriter) error
}

type StepRunGetSchema200JSONResponse map[string]interface{}

func (response StepRunGetSchema200JSONResponse) VisitStepRunGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetSchema400JSONResponse APIErrors

func (response StepRunGetSchema400JSONResponse) VisitStepRunGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetSchema403JSONResponse APIErrors

func (response StepRunGetSchema403JSONResponse) VisitStepRunGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StepRunGetSchema404JSONResponse APIErrors

func (response StepRunGetSchema404JSONResponse) VisitStepRunGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkerListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type WorkerListResponseObject interface {
	VisitWorkerListResponse(w http.ResponseWriter) error
}

type WorkerList200JSONResponse WorkerList

func (response WorkerList200JSONResponse) VisitWorkerListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkerList400JSONResponse APIErrors

func (response WorkerList400JSONResponse) VisitWorkerListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkerList403JSONResponse APIErrors

func (response WorkerList403JSONResponse) VisitWorkerListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetRequestObject struct {
	Tenant      openapi_types.UUID `json:"tenant"`
	WorkflowRun openapi_types.UUID `json:"workflow-run"`
}

type WorkflowRunGetResponseObject interface {
	VisitWorkflowRunGetResponse(w http.ResponseWriter) error
}

type WorkflowRunGet200JSONResponse WorkflowRun

func (response WorkflowRunGet200JSONResponse) VisitWorkflowRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGet400JSONResponse APIErrors

func (response WorkflowRunGet400JSONResponse) VisitWorkflowRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGet403JSONResponse APIErrors

func (response WorkflowRunGet403JSONResponse) VisitWorkflowRunGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunListPullRequestsRequestObject struct {
	Tenant      openapi_types.UUID `json:"tenant"`
	WorkflowRun openapi_types.UUID `json:"workflow-run"`
	Params      WorkflowRunListPullRequestsParams
}

type WorkflowRunListPullRequestsResponseObject interface {
	VisitWorkflowRunListPullRequestsResponse(w http.ResponseWriter) error
}

type WorkflowRunListPullRequests200JSONResponse ListPullRequestsResponse

func (response WorkflowRunListPullRequests200JSONResponse) VisitWorkflowRunListPullRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunListPullRequests400JSONResponse APIErrors

func (response WorkflowRunListPullRequests400JSONResponse) VisitWorkflowRunListPullRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunListPullRequests403JSONResponse APIErrors

func (response WorkflowRunListPullRequests403JSONResponse) VisitWorkflowRunListPullRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
}

type WorkflowListResponseObject interface {
	VisitWorkflowListResponse(w http.ResponseWriter) error
}

type WorkflowList200JSONResponse WorkflowList

func (response WorkflowList200JSONResponse) VisitWorkflowListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowList400JSONResponse APIErrors

func (response WorkflowList400JSONResponse) VisitWorkflowListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowList403JSONResponse APIErrors

func (response WorkflowList403JSONResponse) VisitWorkflowListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCancelRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Body   *WorkflowRunCancelJSONRequestBody
}

type WorkflowRunCancelResponseObject interface {
	VisitWorkflowRunCancelResponse(w http.ResponseWriter) error
}

type WorkflowRunCancel200JSONResponse struct {
	WorkflowRunIds *[]openapi_types.UUID `json:"workflowRunIds,omitempty"`
}

func (response WorkflowRunCancel200JSONResponse) VisitWorkflowRunCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCancel400JSONResponse APIErrors

func (response WorkflowRunCancel400JSONResponse) VisitWorkflowRunCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCancel403JSONResponse APIErrors

func (response WorkflowRunCancel403JSONResponse) VisitWorkflowRunCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunListRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params WorkflowRunListParams
}

type WorkflowRunListResponseObject interface {
	VisitWorkflowRunListResponse(w http.ResponseWriter) error
}

type WorkflowRunList200JSONResponse WorkflowRunList

func (response WorkflowRunList200JSONResponse) VisitWorkflowRunListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunList400JSONResponse APIErrors

func (response WorkflowRunList400JSONResponse) VisitWorkflowRunListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunList403JSONResponse APIErrors

func (response WorkflowRunList403JSONResponse) VisitWorkflowRunListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetMetricsRequestObject struct {
	Tenant openapi_types.UUID `json:"tenant"`
	Params WorkflowRunGetMetricsParams
}

type WorkflowRunGetMetricsResponseObject interface {
	VisitWorkflowRunGetMetricsResponse(w http.ResponseWriter) error
}

type WorkflowRunGetMetrics200JSONResponse WorkflowRunsMetrics

func (response WorkflowRunGetMetrics200JSONResponse) VisitWorkflowRunGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetMetrics400JSONResponse APIErrors

func (response WorkflowRunGetMetrics400JSONResponse) VisitWorkflowRunGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunGetMetrics403JSONResponse APIErrors

func (response WorkflowRunGetMetrics403JSONResponse) VisitWorkflowRunGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UserGetCurrentRequestObject struct {
}

type UserGetCurrentResponseObject interface {
	VisitUserGetCurrentResponse(w http.ResponseWriter) error
}

type UserGetCurrent200JSONResponse User

func (response UserGetCurrent200JSONResponse) VisitUserGetCurrentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserGetCurrent400JSONResponse APIErrors

func (response UserGetCurrent400JSONResponse) VisitUserGetCurrentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserGetCurrent401JSONResponse APIErrors

func (response UserGetCurrent401JSONResponse) VisitUserGetCurrentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserGetCurrent405JSONResponse APIErrors

func (response UserGetCurrent405JSONResponse) VisitUserGetCurrentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateGithubAppOauthCallbackRequestObject struct {
}

type UserUpdateGithubAppOauthCallbackResponseObject interface {
	VisitUserUpdateGithubAppOauthCallbackResponse(w http.ResponseWriter) error
}

type UserUpdateGithubAppOauthCallback302ResponseHeaders struct {
	Location string
}

type UserUpdateGithubAppOauthCallback302Response struct {
	Headers UserUpdateGithubAppOauthCallback302ResponseHeaders
}

func (response UserUpdateGithubAppOauthCallback302Response) VisitUserUpdateGithubAppOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type UserUpdateGithubAppOauthStartRequestObject struct {
}

type UserUpdateGithubAppOauthStartResponseObject interface {
	VisitUserUpdateGithubAppOauthStartResponse(w http.ResponseWriter) error
}

type UserUpdateGithubAppOauthStart302ResponseHeaders struct {
	Location string
}

type UserUpdateGithubAppOauthStart302Response struct {
	Headers UserUpdateGithubAppOauthStart302ResponseHeaders
}

func (response UserUpdateGithubAppOauthStart302Response) VisitUserUpdateGithubAppOauthStartResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type UserUpdateGithubOauthCallbackRequestObject struct {
}

type UserUpdateGithubOauthCallbackResponseObject interface {
	VisitUserUpdateGithubOauthCallbackResponse(w http.ResponseWriter) error
}

type UserUpdateGithubOauthCallback302ResponseHeaders struct {
	Location string
}

type UserUpdateGithubOauthCallback302Response struct {
	Headers UserUpdateGithubOauthCallback302ResponseHeaders
}

func (response UserUpdateGithubOauthCallback302Response) VisitUserUpdateGithubOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type UserUpdateGithubOauthStartRequestObject struct {
}

type UserUpdateGithubOauthStartResponseObject interface {
	VisitUserUpdateGithubOauthStartResponse(w http.ResponseWriter) error
}

type UserUpdateGithubOauthStart302ResponseHeaders struct {
	Location string
}

type UserUpdateGithubOauthStart302Response struct {
	Headers UserUpdateGithubOauthStart302ResponseHeaders
}

func (response UserUpdateGithubOauthStart302Response) VisitUserUpdateGithubOauthStartResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type UserUpdateGoogleOauthCallbackRequestObject struct {
}

type UserUpdateGoogleOauthCallbackResponseObject interface {
	VisitUserUpdateGoogleOauthCallbackResponse(w http.ResponseWriter) error
}

type UserUpdateGoogleOauthCallback302ResponseHeaders struct {
	Location string
}

type UserUpdateGoogleOauthCallback302Response struct {
	Headers UserUpdateGoogleOauthCallback302ResponseHeaders
}

func (response UserUpdateGoogleOauthCallback302Response) VisitUserUpdateGoogleOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type UserUpdateGoogleOauthStartRequestObject struct {
}

type UserUpdateGoogleOauthStartResponseObject interface {
	VisitUserUpdateGoogleOauthStartResponse(w http.ResponseWriter) error
}

type UserUpdateGoogleOauthStart302ResponseHeaders struct {
	Location string
}

type UserUpdateGoogleOauthStart302Response struct {
	Headers UserUpdateGoogleOauthStart302ResponseHeaders
}

func (response UserUpdateGoogleOauthStart302Response) VisitUserUpdateGoogleOauthStartResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type UserListTenantInvitesRequestObject struct {
}

type UserListTenantInvitesResponseObject interface {
	VisitUserListTenantInvitesResponse(w http.ResponseWriter) error
}

type UserListTenantInvites200JSONResponse TenantInviteList

func (response UserListTenantInvites200JSONResponse) VisitUserListTenantInvitesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserListTenantInvites400JSONResponse APIErrors

func (response UserListTenantInvites400JSONResponse) VisitUserListTenantInvitesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserListTenantInvites403JSONResponse APIErrors

func (response UserListTenantInvites403JSONResponse) VisitUserListTenantInvitesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteAcceptRequestObject struct {
	Body *TenantInviteAcceptJSONRequestBody
}

type TenantInviteAcceptResponseObject interface {
	VisitTenantInviteAcceptResponse(w http.ResponseWriter) error
}

type TenantInviteAccept200Response struct {
}

func (response TenantInviteAccept200Response) VisitTenantInviteAcceptResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TenantInviteAccept400JSONResponse APIErrors

func (response TenantInviteAccept400JSONResponse) VisitTenantInviteAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteAccept403JSONResponse APIError

func (response TenantInviteAccept403JSONResponse) VisitTenantInviteAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteRejectRequestObject struct {
	Body *TenantInviteRejectJSONRequestBody
}

type TenantInviteRejectResponseObject interface {
	VisitTenantInviteRejectResponse(w http.ResponseWriter) error
}

type TenantInviteReject200Response struct {
}

func (response TenantInviteReject200Response) VisitTenantInviteRejectResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TenantInviteReject400JSONResponse APIErrors

func (response TenantInviteReject400JSONResponse) VisitTenantInviteRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantInviteReject403JSONResponse APIError

func (response TenantInviteReject403JSONResponse) VisitTenantInviteRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLoginRequestObject struct {
	Body *UserUpdateLoginJSONRequestBody
}

type UserUpdateLoginResponseObject interface {
	VisitUserUpdateLoginResponse(w http.ResponseWriter) error
}

type UserUpdateLogin200JSONResponse User

func (response UserUpdateLogin200JSONResponse) VisitUserUpdateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogin400JSONResponse APIErrors

func (response UserUpdateLogin400JSONResponse) VisitUserUpdateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogin401JSONResponse APIErrors

func (response UserUpdateLogin401JSONResponse) VisitUserUpdateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogin405JSONResponse APIErrors

func (response UserUpdateLogin405JSONResponse) VisitUserUpdateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogoutRequestObject struct {
}

type UserUpdateLogoutResponseObject interface {
	VisitUserUpdateLogoutResponse(w http.ResponseWriter) error
}

type UserUpdateLogout200JSONResponse User

func (response UserUpdateLogout200JSONResponse) VisitUserUpdateLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogout400JSONResponse APIErrors

func (response UserUpdateLogout400JSONResponse) VisitUserUpdateLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogout401JSONResponse APIErrors

func (response UserUpdateLogout401JSONResponse) VisitUserUpdateLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateLogout405JSONResponse APIErrors

func (response UserUpdateLogout405JSONResponse) VisitUserUpdateLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type TenantMembershipsListRequestObject struct {
}

type TenantMembershipsListResponseObject interface {
	VisitTenantMembershipsListResponse(w http.ResponseWriter) error
}

type TenantMembershipsList200JSONResponse UserTenantMembershipsList

func (response TenantMembershipsList200JSONResponse) VisitTenantMembershipsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TenantMembershipsList400JSONResponse APIErrors

func (response TenantMembershipsList400JSONResponse) VisitTenantMembershipsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TenantMembershipsList403JSONResponse APIErrors

func (response TenantMembershipsList403JSONResponse) VisitTenantMembershipsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdatePasswordRequestObject struct {
	Body *UserUpdatePasswordJSONRequestBody
}

type UserUpdatePasswordResponseObject interface {
	VisitUserUpdatePasswordResponse(w http.ResponseWriter) error
}

type UserUpdatePassword200JSONResponse User

func (response UserUpdatePassword200JSONResponse) VisitUserUpdatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdatePassword400JSONResponse APIErrors

func (response UserUpdatePassword400JSONResponse) VisitUserUpdatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdatePassword401JSONResponse APIErrors

func (response UserUpdatePassword401JSONResponse) VisitUserUpdatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdatePassword405JSONResponse APIErrors

func (response UserUpdatePassword405JSONResponse) VisitUserUpdatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type UserCreateRequestObject struct {
	Body *UserCreateJSONRequestBody
}

type UserCreateResponseObject interface {
	VisitUserCreateResponse(w http.ResponseWriter) error
}

type UserCreate200JSONResponse User

func (response UserCreate200JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserCreate400JSONResponse APIErrors

func (response UserCreate400JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserCreate401JSONResponse APIErrors

func (response UserCreate401JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserCreate405JSONResponse APIErrors

func (response UserCreate405JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type UserUpdateSlackOauthCallbackRequestObject struct {
}

type UserUpdateSlackOauthCallbackResponseObject interface {
	VisitUserUpdateSlackOauthCallbackResponse(w http.ResponseWriter) error
}

type UserUpdateSlackOauthCallback302ResponseHeaders struct {
	Location string
}

type UserUpdateSlackOauthCallback302Response struct {
	Headers UserUpdateSlackOauthCallback302ResponseHeaders
}

func (response UserUpdateSlackOauthCallback302Response) VisitUserUpdateSlackOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type WorkerGetRequestObject struct {
	Worker openapi_types.UUID `json:"worker"`
}

type WorkerGetResponseObject interface {
	VisitWorkerGetResponse(w http.ResponseWriter) error
}

type WorkerGet200JSONResponse Worker

func (response WorkerGet200JSONResponse) VisitWorkerGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkerGet400JSONResponse APIErrors

func (response WorkerGet400JSONResponse) VisitWorkerGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkerGet403JSONResponse APIErrors

func (response WorkerGet403JSONResponse) VisitWorkerGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowDeleteRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
}

type WorkflowDeleteResponseObject interface {
	VisitWorkflowDeleteResponse(w http.ResponseWriter) error
}

type WorkflowDelete204Response struct {
}

func (response WorkflowDelete204Response) VisitWorkflowDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type WorkflowDelete400JSONResponse APIErrors

func (response WorkflowDelete400JSONResponse) VisitWorkflowDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowDelete403JSONResponse APIErrors

func (response WorkflowDelete403JSONResponse) VisitWorkflowDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowDelete404JSONResponse APIErrors

func (response WorkflowDelete404JSONResponse) VisitWorkflowDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
}

type WorkflowGetResponseObject interface {
	VisitWorkflowGetResponse(w http.ResponseWriter) error
}

type WorkflowGet200JSONResponse Workflow

func (response WorkflowGet200JSONResponse) VisitWorkflowGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGet400JSONResponse APIErrors

func (response WorkflowGet400JSONResponse) VisitWorkflowGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGet403JSONResponse APIErrors

func (response WorkflowGet403JSONResponse) VisitWorkflowGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowUpdateLinkGithubRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
	Body     *WorkflowUpdateLinkGithubJSONRequestBody
}

type WorkflowUpdateLinkGithubResponseObject interface {
	VisitWorkflowUpdateLinkGithubResponse(w http.ResponseWriter) error
}

type WorkflowUpdateLinkGithub200JSONResponse Workflow

func (response WorkflowUpdateLinkGithub200JSONResponse) VisitWorkflowUpdateLinkGithubResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowUpdateLinkGithub400JSONResponse APIErrors

func (response WorkflowUpdateLinkGithub400JSONResponse) VisitWorkflowUpdateLinkGithubResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowUpdateLinkGithub403JSONResponse APIErrors

func (response WorkflowUpdateLinkGithub403JSONResponse) VisitWorkflowUpdateLinkGithubResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowUpdateLinkGithub404JSONResponse APIErrors

func (response WorkflowUpdateLinkGithub404JSONResponse) VisitWorkflowUpdateLinkGithubResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetMetricsRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
	Params   WorkflowGetMetricsParams
}

type WorkflowGetMetricsResponseObject interface {
	VisitWorkflowGetMetricsResponse(w http.ResponseWriter) error
}

type WorkflowGetMetrics200JSONResponse WorkflowMetrics

func (response WorkflowGetMetrics200JSONResponse) VisitWorkflowGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetMetrics400JSONResponse APIErrors

func (response WorkflowGetMetrics400JSONResponse) VisitWorkflowGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetMetrics403JSONResponse APIErrors

func (response WorkflowGetMetrics403JSONResponse) VisitWorkflowGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowGetMetrics404JSONResponse APIErrors

func (response WorkflowGetMetrics404JSONResponse) VisitWorkflowGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCreateRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
	Params   WorkflowRunCreateParams
	Body     *WorkflowRunCreateJSONRequestBody
}

type WorkflowRunCreateResponseObject interface {
	VisitWorkflowRunCreateResponse(w http.ResponseWriter) error
}

type WorkflowRunCreate200JSONResponse WorkflowRun

func (response WorkflowRunCreate200JSONResponse) VisitWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCreate400JSONResponse APIErrors

func (response WorkflowRunCreate400JSONResponse) VisitWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCreate403JSONResponse APIErrors

func (response WorkflowRunCreate403JSONResponse) VisitWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowRunCreate404JSONResponse APIErrors

func (response WorkflowRunCreate404JSONResponse) VisitWorkflowRunCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGetRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
	Params   WorkflowVersionGetParams
}

type WorkflowVersionGetResponseObject interface {
	VisitWorkflowVersionGetResponse(w http.ResponseWriter) error
}

type WorkflowVersionGet200JSONResponse WorkflowVersion

func (response WorkflowVersionGet200JSONResponse) VisitWorkflowVersionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGet400JSONResponse APIErrors

func (response WorkflowVersionGet400JSONResponse) VisitWorkflowVersionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGet403JSONResponse APIErrors

func (response WorkflowVersionGet403JSONResponse) VisitWorkflowVersionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGet404JSONResponse APIErrors

func (response WorkflowVersionGet404JSONResponse) VisitWorkflowVersionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGetDefinitionRequestObject struct {
	Workflow openapi_types.UUID `json:"workflow"`
	Params   WorkflowVersionGetDefinitionParams
}

type WorkflowVersionGetDefinitionResponseObject interface {
	VisitWorkflowVersionGetDefinitionResponse(w http.ResponseWriter) error
}

type WorkflowVersionGetDefinition200JSONResponse WorkflowVersionDefinition

func (response WorkflowVersionGetDefinition200JSONResponse) VisitWorkflowVersionGetDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGetDefinition400JSONResponse APIErrors

func (response WorkflowVersionGetDefinition400JSONResponse) VisitWorkflowVersionGetDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGetDefinition403JSONResponse APIErrors

func (response WorkflowVersionGetDefinition403JSONResponse) VisitWorkflowVersionGetDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WorkflowVersionGetDefinition404JSONResponse APIErrors

func (response WorkflowVersionGetDefinition404JSONResponse) VisitWorkflowVersionGetDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StrictServerInterface interface {
	LivenessGet(ctx echo.Context, request LivenessGetRequestObject) (LivenessGetResponseObject, error)

	ReadinessGet(ctx echo.Context, request ReadinessGetRequestObject) (ReadinessGetResponseObject, error)

	AlertEmailGroupDelete(ctx echo.Context, request AlertEmailGroupDeleteRequestObject) (AlertEmailGroupDeleteResponseObject, error)

	AlertEmailGroupUpdate(ctx echo.Context, request AlertEmailGroupUpdateRequestObject) (AlertEmailGroupUpdateResponseObject, error)

	ApiTokenUpdateRevoke(ctx echo.Context, request ApiTokenUpdateRevokeRequestObject) (ApiTokenUpdateRevokeResponseObject, error)

	EventDataGet(ctx echo.Context, request EventDataGetRequestObject) (EventDataGetResponseObject, error)

	GithubAppListInstallations(ctx echo.Context, request GithubAppListInstallationsRequestObject) (GithubAppListInstallationsResponseObject, error)

	GithubAppListRepos(ctx echo.Context, request GithubAppListReposRequestObject) (GithubAppListReposResponseObject, error)

	GithubAppListBranches(ctx echo.Context, request GithubAppListBranchesRequestObject) (GithubAppListBranchesResponseObject, error)

	GithubUpdateGlobalWebhook(ctx echo.Context, request GithubUpdateGlobalWebhookRequestObject) (GithubUpdateGlobalWebhookResponseObject, error)

	GithubUpdateTenantWebhook(ctx echo.Context, request GithubUpdateTenantWebhookRequestObject) (GithubUpdateTenantWebhookResponseObject, error)

	MetadataGet(ctx echo.Context, request MetadataGetRequestObject) (MetadataGetResponseObject, error)

	MetadataListIntegrations(ctx echo.Context, request MetadataListIntegrationsRequestObject) (MetadataListIntegrationsResponseObject, error)

	SlackWebhookDelete(ctx echo.Context, request SlackWebhookDeleteRequestObject) (SlackWebhookDeleteResponseObject, error)

	SnsDelete(ctx echo.Context, request SnsDeleteRequestObject) (SnsDeleteResponseObject, error)

	SnsUpdate(ctx echo.Context, request SnsUpdateRequestObject) (SnsUpdateResponseObject, error)

	StepRunUpdateCreatePr(ctx echo.Context, request StepRunUpdateCreatePrRequestObject) (StepRunUpdateCreatePrResponseObject, error)

	StepRunGetDiff(ctx echo.Context, request StepRunGetDiffRequestObject) (StepRunGetDiffResponseObject, error)

	StepRunListEvents(ctx echo.Context, request StepRunListEventsRequestObject) (StepRunListEventsResponseObject, error)

	LogLineList(ctx echo.Context, request LogLineListRequestObject) (LogLineListResponseObject, error)

	TenantCreate(ctx echo.Context, request TenantCreateRequestObject) (TenantCreateResponseObject, error)

	TenantUpdate(ctx echo.Context, request TenantUpdateRequestObject) (TenantUpdateResponseObject, error)

	AlertEmailGroupList(ctx echo.Context, request AlertEmailGroupListRequestObject) (AlertEmailGroupListResponseObject, error)

	AlertEmailGroupCreate(ctx echo.Context, request AlertEmailGroupCreateRequestObject) (AlertEmailGroupCreateResponseObject, error)

	TenantAlertingSettingsGet(ctx echo.Context, request TenantAlertingSettingsGetRequestObject) (TenantAlertingSettingsGetResponseObject, error)

	ApiTokenList(ctx echo.Context, request ApiTokenListRequestObject) (ApiTokenListResponseObject, error)

	ApiTokenCreate(ctx echo.Context, request ApiTokenCreateRequestObject) (ApiTokenCreateResponseObject, error)

	EventList(ctx echo.Context, request EventListRequestObject) (EventListResponseObject, error)

	EventKeyList(ctx echo.Context, request EventKeyListRequestObject) (EventKeyListResponseObject, error)

	EventUpdateReplay(ctx echo.Context, request EventUpdateReplayRequestObject) (EventUpdateReplayResponseObject, error)

	TenantInviteList(ctx echo.Context, request TenantInviteListRequestObject) (TenantInviteListResponseObject, error)

	TenantInviteCreate(ctx echo.Context, request TenantInviteCreateRequestObject) (TenantInviteCreateResponseObject, error)

	TenantInviteDelete(ctx echo.Context, request TenantInviteDeleteRequestObject) (TenantInviteDeleteResponseObject, error)

	TenantInviteUpdate(ctx echo.Context, request TenantInviteUpdateRequestObject) (TenantInviteUpdateResponseObject, error)

	TenantMemberList(ctx echo.Context, request TenantMemberListRequestObject) (TenantMemberListResponseObject, error)

	TenantMemberDelete(ctx echo.Context, request TenantMemberDeleteRequestObject) (TenantMemberDeleteResponseObject, error)

	SlackWebhookList(ctx echo.Context, request SlackWebhookListRequestObject) (SlackWebhookListResponseObject, error)

	UserUpdateSlackOauthStart(ctx echo.Context, request UserUpdateSlackOauthStartRequestObject) (UserUpdateSlackOauthStartResponseObject, error)

	SnsList(ctx echo.Context, request SnsListRequestObject) (SnsListResponseObject, error)

	SnsCreate(ctx echo.Context, request SnsCreateRequestObject) (SnsCreateResponseObject, error)

	StepRunGet(ctx echo.Context, request StepRunGetRequestObject) (StepRunGetResponseObject, error)

	StepRunUpdateCancel(ctx echo.Context, request StepRunUpdateCancelRequestObject) (StepRunUpdateCancelResponseObject, error)

	StepRunUpdateRerun(ctx echo.Context, request StepRunUpdateRerunRequestObject) (StepRunUpdateRerunResponseObject, error)

	StepRunGetSchema(ctx echo.Context, request StepRunGetSchemaRequestObject) (StepRunGetSchemaResponseObject, error)

	WorkerList(ctx echo.Context, request WorkerListRequestObject) (WorkerListResponseObject, error)

	WorkflowRunGet(ctx echo.Context, request WorkflowRunGetRequestObject) (WorkflowRunGetResponseObject, error)

	WorkflowRunListPullRequests(ctx echo.Context, request WorkflowRunListPullRequestsRequestObject) (WorkflowRunListPullRequestsResponseObject, error)

	WorkflowList(ctx echo.Context, request WorkflowListRequestObject) (WorkflowListResponseObject, error)

	WorkflowRunCancel(ctx echo.Context, request WorkflowRunCancelRequestObject) (WorkflowRunCancelResponseObject, error)

	WorkflowRunList(ctx echo.Context, request WorkflowRunListRequestObject) (WorkflowRunListResponseObject, error)

	WorkflowRunGetMetrics(ctx echo.Context, request WorkflowRunGetMetricsRequestObject) (WorkflowRunGetMetricsResponseObject, error)

	UserGetCurrent(ctx echo.Context, request UserGetCurrentRequestObject) (UserGetCurrentResponseObject, error)

	UserUpdateGithubAppOauthCallback(ctx echo.Context, request UserUpdateGithubAppOauthCallbackRequestObject) (UserUpdateGithubAppOauthCallbackResponseObject, error)

	UserUpdateGithubAppOauthStart(ctx echo.Context, request UserUpdateGithubAppOauthStartRequestObject) (UserUpdateGithubAppOauthStartResponseObject, error)

	UserUpdateGithubOauthCallback(ctx echo.Context, request UserUpdateGithubOauthCallbackRequestObject) (UserUpdateGithubOauthCallbackResponseObject, error)

	UserUpdateGithubOauthStart(ctx echo.Context, request UserUpdateGithubOauthStartRequestObject) (UserUpdateGithubOauthStartResponseObject, error)

	UserUpdateGoogleOauthCallback(ctx echo.Context, request UserUpdateGoogleOauthCallbackRequestObject) (UserUpdateGoogleOauthCallbackResponseObject, error)

	UserUpdateGoogleOauthStart(ctx echo.Context, request UserUpdateGoogleOauthStartRequestObject) (UserUpdateGoogleOauthStartResponseObject, error)

	UserListTenantInvites(ctx echo.Context, request UserListTenantInvitesRequestObject) (UserListTenantInvitesResponseObject, error)

	TenantInviteAccept(ctx echo.Context, request TenantInviteAcceptRequestObject) (TenantInviteAcceptResponseObject, error)

	TenantInviteReject(ctx echo.Context, request TenantInviteRejectRequestObject) (TenantInviteRejectResponseObject, error)

	UserUpdateLogin(ctx echo.Context, request UserUpdateLoginRequestObject) (UserUpdateLoginResponseObject, error)

	UserUpdateLogout(ctx echo.Context, request UserUpdateLogoutRequestObject) (UserUpdateLogoutResponseObject, error)

	TenantMembershipsList(ctx echo.Context, request TenantMembershipsListRequestObject) (TenantMembershipsListResponseObject, error)

	UserUpdatePassword(ctx echo.Context, request UserUpdatePasswordRequestObject) (UserUpdatePasswordResponseObject, error)

	UserCreate(ctx echo.Context, request UserCreateRequestObject) (UserCreateResponseObject, error)

	UserUpdateSlackOauthCallback(ctx echo.Context, request UserUpdateSlackOauthCallbackRequestObject) (UserUpdateSlackOauthCallbackResponseObject, error)

	WorkerGet(ctx echo.Context, request WorkerGetRequestObject) (WorkerGetResponseObject, error)

	WorkflowDelete(ctx echo.Context, request WorkflowDeleteRequestObject) (WorkflowDeleteResponseObject, error)

	WorkflowGet(ctx echo.Context, request WorkflowGetRequestObject) (WorkflowGetResponseObject, error)

	WorkflowUpdateLinkGithub(ctx echo.Context, request WorkflowUpdateLinkGithubRequestObject) (WorkflowUpdateLinkGithubResponseObject, error)

	WorkflowGetMetrics(ctx echo.Context, request WorkflowGetMetricsRequestObject) (WorkflowGetMetricsResponseObject, error)

	WorkflowRunCreate(ctx echo.Context, request WorkflowRunCreateRequestObject) (WorkflowRunCreateResponseObject, error)

	WorkflowVersionGet(ctx echo.Context, request WorkflowVersionGetRequestObject) (WorkflowVersionGetResponseObject, error)

	WorkflowVersionGetDefinition(ctx echo.Context, request WorkflowVersionGetDefinitionRequestObject) (WorkflowVersionGetDefinitionResponseObject, error)
}
type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)
type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// LivenessGet operation middleware
func (sh *strictHandler) LivenessGet(ctx echo.Context) error {
	var request LivenessGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LivenessGet(ctx, request.(LivenessGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LivenessGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LivenessGetResponseObject); ok {
		return validResponse.VisitLivenessGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ReadinessGet operation middleware
func (sh *strictHandler) ReadinessGet(ctx echo.Context) error {
	var request ReadinessGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadinessGet(ctx, request.(ReadinessGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadinessGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReadinessGetResponseObject); ok {
		return validResponse.VisitReadinessGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AlertEmailGroupDelete operation middleware
func (sh *strictHandler) AlertEmailGroupDelete(ctx echo.Context, alertEmailGroup openapi_types.UUID) error {
	var request AlertEmailGroupDeleteRequestObject

	request.AlertEmailGroup = alertEmailGroup

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlertEmailGroupDelete(ctx, request.(AlertEmailGroupDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlertEmailGroupDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AlertEmailGroupDeleteResponseObject); ok {
		return validResponse.VisitAlertEmailGroupDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AlertEmailGroupUpdate operation middleware
func (sh *strictHandler) AlertEmailGroupUpdate(ctx echo.Context, alertEmailGroup openapi_types.UUID) error {
	var request AlertEmailGroupUpdateRequestObject

	request.AlertEmailGroup = alertEmailGroup

	var body AlertEmailGroupUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlertEmailGroupUpdate(ctx, request.(AlertEmailGroupUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlertEmailGroupUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AlertEmailGroupUpdateResponseObject); ok {
		return validResponse.VisitAlertEmailGroupUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ApiTokenUpdateRevoke operation middleware
func (sh *strictHandler) ApiTokenUpdateRevoke(ctx echo.Context, apiToken openapi_types.UUID) error {
	var request ApiTokenUpdateRevokeRequestObject

	request.ApiToken = apiToken

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApiTokenUpdateRevoke(ctx, request.(ApiTokenUpdateRevokeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApiTokenUpdateRevoke")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApiTokenUpdateRevokeResponseObject); ok {
		return validResponse.VisitApiTokenUpdateRevokeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventDataGet operation middleware
func (sh *strictHandler) EventDataGet(ctx echo.Context, event openapi_types.UUID) error {
	var request EventDataGetRequestObject

	request.Event = event

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventDataGet(ctx, request.(EventDataGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventDataGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventDataGetResponseObject); ok {
		return validResponse.VisitEventDataGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GithubAppListInstallations operation middleware
func (sh *strictHandler) GithubAppListInstallations(ctx echo.Context) error {
	var request GithubAppListInstallationsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GithubAppListInstallations(ctx, request.(GithubAppListInstallationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GithubAppListInstallations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GithubAppListInstallationsResponseObject); ok {
		return validResponse.VisitGithubAppListInstallationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GithubAppListRepos operation middleware
func (sh *strictHandler) GithubAppListRepos(ctx echo.Context, ghInstallation openapi_types.UUID) error {
	var request GithubAppListReposRequestObject

	request.GhInstallation = ghInstallation

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GithubAppListRepos(ctx, request.(GithubAppListReposRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GithubAppListRepos")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GithubAppListReposResponseObject); ok {
		return validResponse.VisitGithubAppListReposResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GithubAppListBranches operation middleware
func (sh *strictHandler) GithubAppListBranches(ctx echo.Context, ghInstallation openapi_types.UUID, ghRepoOwner string, ghRepoName string) error {
	var request GithubAppListBranchesRequestObject

	request.GhInstallation = ghInstallation
	request.GhRepoOwner = ghRepoOwner
	request.GhRepoName = ghRepoName

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GithubAppListBranches(ctx, request.(GithubAppListBranchesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GithubAppListBranches")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GithubAppListBranchesResponseObject); ok {
		return validResponse.VisitGithubAppListBranchesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GithubUpdateGlobalWebhook operation middleware
func (sh *strictHandler) GithubUpdateGlobalWebhook(ctx echo.Context) error {
	var request GithubUpdateGlobalWebhookRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GithubUpdateGlobalWebhook(ctx, request.(GithubUpdateGlobalWebhookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GithubUpdateGlobalWebhook")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GithubUpdateGlobalWebhookResponseObject); ok {
		return validResponse.VisitGithubUpdateGlobalWebhookResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GithubUpdateTenantWebhook operation middleware
func (sh *strictHandler) GithubUpdateTenantWebhook(ctx echo.Context, webhook openapi_types.UUID) error {
	var request GithubUpdateTenantWebhookRequestObject

	request.Webhook = webhook

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GithubUpdateTenantWebhook(ctx, request.(GithubUpdateTenantWebhookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GithubUpdateTenantWebhook")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GithubUpdateTenantWebhookResponseObject); ok {
		return validResponse.VisitGithubUpdateTenantWebhookResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MetadataGet operation middleware
func (sh *strictHandler) MetadataGet(ctx echo.Context) error {
	var request MetadataGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MetadataGet(ctx, request.(MetadataGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MetadataGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MetadataGetResponseObject); ok {
		return validResponse.VisitMetadataGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MetadataListIntegrations operation middleware
func (sh *strictHandler) MetadataListIntegrations(ctx echo.Context) error {
	var request MetadataListIntegrationsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MetadataListIntegrations(ctx, request.(MetadataListIntegrationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MetadataListIntegrations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MetadataListIntegrationsResponseObject); ok {
		return validResponse.VisitMetadataListIntegrationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SlackWebhookDelete operation middleware
func (sh *strictHandler) SlackWebhookDelete(ctx echo.Context, slack openapi_types.UUID) error {
	var request SlackWebhookDeleteRequestObject

	request.Slack = slack

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SlackWebhookDelete(ctx, request.(SlackWebhookDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SlackWebhookDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SlackWebhookDeleteResponseObject); ok {
		return validResponse.VisitSlackWebhookDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SnsDelete operation middleware
func (sh *strictHandler) SnsDelete(ctx echo.Context, sns openapi_types.UUID) error {
	var request SnsDeleteRequestObject

	request.Sns = sns

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SnsDelete(ctx, request.(SnsDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SnsDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SnsDeleteResponseObject); ok {
		return validResponse.VisitSnsDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SnsUpdate operation middleware
func (sh *strictHandler) SnsUpdate(ctx echo.Context, tenant openapi_types.UUID, event string) error {
	var request SnsUpdateRequestObject

	request.Tenant = tenant
	request.Event = event

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SnsUpdate(ctx, request.(SnsUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SnsUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SnsUpdateResponseObject); ok {
		return validResponse.VisitSnsUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunUpdateCreatePr operation middleware
func (sh *strictHandler) StepRunUpdateCreatePr(ctx echo.Context, stepRun openapi_types.UUID) error {
	var request StepRunUpdateCreatePrRequestObject

	request.StepRun = stepRun

	var body StepRunUpdateCreatePrJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunUpdateCreatePr(ctx, request.(StepRunUpdateCreatePrRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunUpdateCreatePr")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunUpdateCreatePrResponseObject); ok {
		return validResponse.VisitStepRunUpdateCreatePrResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunGetDiff operation middleware
func (sh *strictHandler) StepRunGetDiff(ctx echo.Context, stepRun openapi_types.UUID) error {
	var request StepRunGetDiffRequestObject

	request.StepRun = stepRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunGetDiff(ctx, request.(StepRunGetDiffRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunGetDiff")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunGetDiffResponseObject); ok {
		return validResponse.VisitStepRunGetDiffResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunListEvents operation middleware
func (sh *strictHandler) StepRunListEvents(ctx echo.Context, stepRun openapi_types.UUID, params StepRunListEventsParams) error {
	var request StepRunListEventsRequestObject

	request.StepRun = stepRun
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunListEvents(ctx, request.(StepRunListEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunListEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunListEventsResponseObject); ok {
		return validResponse.VisitStepRunListEventsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// LogLineList operation middleware
func (sh *strictHandler) LogLineList(ctx echo.Context, stepRun openapi_types.UUID, params LogLineListParams) error {
	var request LogLineListRequestObject

	request.StepRun = stepRun
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LogLineList(ctx, request.(LogLineListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogLineList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogLineListResponseObject); ok {
		return validResponse.VisitLogLineListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantCreate operation middleware
func (sh *strictHandler) TenantCreate(ctx echo.Context) error {
	var request TenantCreateRequestObject

	var body TenantCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantCreate(ctx, request.(TenantCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantCreateResponseObject); ok {
		return validResponse.VisitTenantCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantUpdate operation middleware
func (sh *strictHandler) TenantUpdate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantUpdateRequestObject

	request.Tenant = tenant

	var body TenantUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantUpdate(ctx, request.(TenantUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantUpdateResponseObject); ok {
		return validResponse.VisitTenantUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AlertEmailGroupList operation middleware
func (sh *strictHandler) AlertEmailGroupList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request AlertEmailGroupListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlertEmailGroupList(ctx, request.(AlertEmailGroupListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlertEmailGroupList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AlertEmailGroupListResponseObject); ok {
		return validResponse.VisitAlertEmailGroupListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AlertEmailGroupCreate operation middleware
func (sh *strictHandler) AlertEmailGroupCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request AlertEmailGroupCreateRequestObject

	request.Tenant = tenant

	var body AlertEmailGroupCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlertEmailGroupCreate(ctx, request.(AlertEmailGroupCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlertEmailGroupCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AlertEmailGroupCreateResponseObject); ok {
		return validResponse.VisitAlertEmailGroupCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantAlertingSettingsGet operation middleware
func (sh *strictHandler) TenantAlertingSettingsGet(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantAlertingSettingsGetRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantAlertingSettingsGet(ctx, request.(TenantAlertingSettingsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantAlertingSettingsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantAlertingSettingsGetResponseObject); ok {
		return validResponse.VisitTenantAlertingSettingsGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ApiTokenList operation middleware
func (sh *strictHandler) ApiTokenList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request ApiTokenListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApiTokenList(ctx, request.(ApiTokenListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApiTokenList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApiTokenListResponseObject); ok {
		return validResponse.VisitApiTokenListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ApiTokenCreate operation middleware
func (sh *strictHandler) ApiTokenCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request ApiTokenCreateRequestObject

	request.Tenant = tenant

	var body ApiTokenCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApiTokenCreate(ctx, request.(ApiTokenCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApiTokenCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApiTokenCreateResponseObject); ok {
		return validResponse.VisitApiTokenCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventList operation middleware
func (sh *strictHandler) EventList(ctx echo.Context, tenant openapi_types.UUID, params EventListParams) error {
	var request EventListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventList(ctx, request.(EventListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventListResponseObject); ok {
		return validResponse.VisitEventListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventKeyList operation middleware
func (sh *strictHandler) EventKeyList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request EventKeyListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventKeyList(ctx, request.(EventKeyListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventKeyList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventKeyListResponseObject); ok {
		return validResponse.VisitEventKeyListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// EventUpdateReplay operation middleware
func (sh *strictHandler) EventUpdateReplay(ctx echo.Context, tenant openapi_types.UUID) error {
	var request EventUpdateReplayRequestObject

	request.Tenant = tenant

	var body EventUpdateReplayJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventUpdateReplay(ctx, request.(EventUpdateReplayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventUpdateReplay")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventUpdateReplayResponseObject); ok {
		return validResponse.VisitEventUpdateReplayResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteList operation middleware
func (sh *strictHandler) TenantInviteList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantInviteListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteList(ctx, request.(TenantInviteListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteListResponseObject); ok {
		return validResponse.VisitTenantInviteListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteCreate operation middleware
func (sh *strictHandler) TenantInviteCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantInviteCreateRequestObject

	request.Tenant = tenant

	var body TenantInviteCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteCreate(ctx, request.(TenantInviteCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteCreateResponseObject); ok {
		return validResponse.VisitTenantInviteCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteDelete operation middleware
func (sh *strictHandler) TenantInviteDelete(ctx echo.Context, tenant openapi_types.UUID, tenantInvite openapi_types.UUID) error {
	var request TenantInviteDeleteRequestObject

	request.Tenant = tenant
	request.TenantInvite = tenantInvite

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteDelete(ctx, request.(TenantInviteDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteDeleteResponseObject); ok {
		return validResponse.VisitTenantInviteDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteUpdate operation middleware
func (sh *strictHandler) TenantInviteUpdate(ctx echo.Context, tenant openapi_types.UUID, tenantInvite openapi_types.UUID) error {
	var request TenantInviteUpdateRequestObject

	request.Tenant = tenant
	request.TenantInvite = tenantInvite

	var body TenantInviteUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteUpdate(ctx, request.(TenantInviteUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteUpdateResponseObject); ok {
		return validResponse.VisitTenantInviteUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantMemberList operation middleware
func (sh *strictHandler) TenantMemberList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request TenantMemberListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantMemberList(ctx, request.(TenantMemberListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantMemberList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantMemberListResponseObject); ok {
		return validResponse.VisitTenantMemberListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantMemberDelete operation middleware
func (sh *strictHandler) TenantMemberDelete(ctx echo.Context, tenant openapi_types.UUID, member openapi_types.UUID) error {
	var request TenantMemberDeleteRequestObject

	request.Tenant = tenant
	request.Member = member

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantMemberDelete(ctx, request.(TenantMemberDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantMemberDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantMemberDeleteResponseObject); ok {
		return validResponse.VisitTenantMemberDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SlackWebhookList operation middleware
func (sh *strictHandler) SlackWebhookList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request SlackWebhookListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SlackWebhookList(ctx, request.(SlackWebhookListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SlackWebhookList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SlackWebhookListResponseObject); ok {
		return validResponse.VisitSlackWebhookListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateSlackOauthStart operation middleware
func (sh *strictHandler) UserUpdateSlackOauthStart(ctx echo.Context, tenant openapi_types.UUID) error {
	var request UserUpdateSlackOauthStartRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateSlackOauthStart(ctx, request.(UserUpdateSlackOauthStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateSlackOauthStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateSlackOauthStartResponseObject); ok {
		return validResponse.VisitUserUpdateSlackOauthStartResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SnsList operation middleware
func (sh *strictHandler) SnsList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request SnsListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SnsList(ctx, request.(SnsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SnsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SnsListResponseObject); ok {
		return validResponse.VisitSnsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SnsCreate operation middleware
func (sh *strictHandler) SnsCreate(ctx echo.Context, tenant openapi_types.UUID) error {
	var request SnsCreateRequestObject

	request.Tenant = tenant

	var body SnsCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SnsCreate(ctx, request.(SnsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SnsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SnsCreateResponseObject); ok {
		return validResponse.VisitSnsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunGet operation middleware
func (sh *strictHandler) StepRunGet(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error {
	var request StepRunGetRequestObject

	request.Tenant = tenant
	request.StepRun = stepRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunGet(ctx, request.(StepRunGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunGetResponseObject); ok {
		return validResponse.VisitStepRunGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunUpdateCancel operation middleware
func (sh *strictHandler) StepRunUpdateCancel(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error {
	var request StepRunUpdateCancelRequestObject

	request.Tenant = tenant
	request.StepRun = stepRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunUpdateCancel(ctx, request.(StepRunUpdateCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunUpdateCancel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunUpdateCancelResponseObject); ok {
		return validResponse.VisitStepRunUpdateCancelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunUpdateRerun operation middleware
func (sh *strictHandler) StepRunUpdateRerun(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error {
	var request StepRunUpdateRerunRequestObject

	request.Tenant = tenant
	request.StepRun = stepRun

	var body StepRunUpdateRerunJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunUpdateRerun(ctx, request.(StepRunUpdateRerunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunUpdateRerun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunUpdateRerunResponseObject); ok {
		return validResponse.VisitStepRunUpdateRerunResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StepRunGetSchema operation middleware
func (sh *strictHandler) StepRunGetSchema(ctx echo.Context, tenant openapi_types.UUID, stepRun openapi_types.UUID) error {
	var request StepRunGetSchemaRequestObject

	request.Tenant = tenant
	request.StepRun = stepRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StepRunGetSchema(ctx, request.(StepRunGetSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StepRunGetSchema")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StepRunGetSchemaResponseObject); ok {
		return validResponse.VisitStepRunGetSchemaResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkerList operation middleware
func (sh *strictHandler) WorkerList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request WorkerListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkerList(ctx, request.(WorkerListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkerList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkerListResponseObject); ok {
		return validResponse.VisitWorkerListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunGet operation middleware
func (sh *strictHandler) WorkflowRunGet(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID) error {
	var request WorkflowRunGetRequestObject

	request.Tenant = tenant
	request.WorkflowRun = workflowRun

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunGet(ctx, request.(WorkflowRunGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunGetResponseObject); ok {
		return validResponse.VisitWorkflowRunGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunListPullRequests operation middleware
func (sh *strictHandler) WorkflowRunListPullRequests(ctx echo.Context, tenant openapi_types.UUID, workflowRun openapi_types.UUID, params WorkflowRunListPullRequestsParams) error {
	var request WorkflowRunListPullRequestsRequestObject

	request.Tenant = tenant
	request.WorkflowRun = workflowRun
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunListPullRequests(ctx, request.(WorkflowRunListPullRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunListPullRequests")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunListPullRequestsResponseObject); ok {
		return validResponse.VisitWorkflowRunListPullRequestsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowList operation middleware
func (sh *strictHandler) WorkflowList(ctx echo.Context, tenant openapi_types.UUID) error {
	var request WorkflowListRequestObject

	request.Tenant = tenant

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowList(ctx, request.(WorkflowListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowListResponseObject); ok {
		return validResponse.VisitWorkflowListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunCancel operation middleware
func (sh *strictHandler) WorkflowRunCancel(ctx echo.Context, tenant openapi_types.UUID) error {
	var request WorkflowRunCancelRequestObject

	request.Tenant = tenant

	var body WorkflowRunCancelJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunCancel(ctx, request.(WorkflowRunCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunCancel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunCancelResponseObject); ok {
		return validResponse.VisitWorkflowRunCancelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunList operation middleware
func (sh *strictHandler) WorkflowRunList(ctx echo.Context, tenant openapi_types.UUID, params WorkflowRunListParams) error {
	var request WorkflowRunListRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunList(ctx, request.(WorkflowRunListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunListResponseObject); ok {
		return validResponse.VisitWorkflowRunListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunGetMetrics operation middleware
func (sh *strictHandler) WorkflowRunGetMetrics(ctx echo.Context, tenant openapi_types.UUID, params WorkflowRunGetMetricsParams) error {
	var request WorkflowRunGetMetricsRequestObject

	request.Tenant = tenant
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunGetMetrics(ctx, request.(WorkflowRunGetMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunGetMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunGetMetricsResponseObject); ok {
		return validResponse.VisitWorkflowRunGetMetricsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserGetCurrent operation middleware
func (sh *strictHandler) UserGetCurrent(ctx echo.Context) error {
	var request UserGetCurrentRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserGetCurrent(ctx, request.(UserGetCurrentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserGetCurrent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserGetCurrentResponseObject); ok {
		return validResponse.VisitUserGetCurrentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateGithubAppOauthCallback operation middleware
func (sh *strictHandler) UserUpdateGithubAppOauthCallback(ctx echo.Context) error {
	var request UserUpdateGithubAppOauthCallbackRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateGithubAppOauthCallback(ctx, request.(UserUpdateGithubAppOauthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateGithubAppOauthCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateGithubAppOauthCallbackResponseObject); ok {
		return validResponse.VisitUserUpdateGithubAppOauthCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateGithubAppOauthStart operation middleware
func (sh *strictHandler) UserUpdateGithubAppOauthStart(ctx echo.Context) error {
	var request UserUpdateGithubAppOauthStartRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateGithubAppOauthStart(ctx, request.(UserUpdateGithubAppOauthStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateGithubAppOauthStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateGithubAppOauthStartResponseObject); ok {
		return validResponse.VisitUserUpdateGithubAppOauthStartResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateGithubOauthCallback operation middleware
func (sh *strictHandler) UserUpdateGithubOauthCallback(ctx echo.Context) error {
	var request UserUpdateGithubOauthCallbackRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateGithubOauthCallback(ctx, request.(UserUpdateGithubOauthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateGithubOauthCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateGithubOauthCallbackResponseObject); ok {
		return validResponse.VisitUserUpdateGithubOauthCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateGithubOauthStart operation middleware
func (sh *strictHandler) UserUpdateGithubOauthStart(ctx echo.Context) error {
	var request UserUpdateGithubOauthStartRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateGithubOauthStart(ctx, request.(UserUpdateGithubOauthStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateGithubOauthStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateGithubOauthStartResponseObject); ok {
		return validResponse.VisitUserUpdateGithubOauthStartResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateGoogleOauthCallback operation middleware
func (sh *strictHandler) UserUpdateGoogleOauthCallback(ctx echo.Context) error {
	var request UserUpdateGoogleOauthCallbackRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateGoogleOauthCallback(ctx, request.(UserUpdateGoogleOauthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateGoogleOauthCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateGoogleOauthCallbackResponseObject); ok {
		return validResponse.VisitUserUpdateGoogleOauthCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateGoogleOauthStart operation middleware
func (sh *strictHandler) UserUpdateGoogleOauthStart(ctx echo.Context) error {
	var request UserUpdateGoogleOauthStartRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateGoogleOauthStart(ctx, request.(UserUpdateGoogleOauthStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateGoogleOauthStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateGoogleOauthStartResponseObject); ok {
		return validResponse.VisitUserUpdateGoogleOauthStartResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserListTenantInvites operation middleware
func (sh *strictHandler) UserListTenantInvites(ctx echo.Context) error {
	var request UserListTenantInvitesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserListTenantInvites(ctx, request.(UserListTenantInvitesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserListTenantInvites")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserListTenantInvitesResponseObject); ok {
		return validResponse.VisitUserListTenantInvitesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteAccept operation middleware
func (sh *strictHandler) TenantInviteAccept(ctx echo.Context) error {
	var request TenantInviteAcceptRequestObject

	var body TenantInviteAcceptJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteAccept(ctx, request.(TenantInviteAcceptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteAccept")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteAcceptResponseObject); ok {
		return validResponse.VisitTenantInviteAcceptResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantInviteReject operation middleware
func (sh *strictHandler) TenantInviteReject(ctx echo.Context) error {
	var request TenantInviteRejectRequestObject

	var body TenantInviteRejectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantInviteReject(ctx, request.(TenantInviteRejectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantInviteReject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantInviteRejectResponseObject); ok {
		return validResponse.VisitTenantInviteRejectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateLogin operation middleware
func (sh *strictHandler) UserUpdateLogin(ctx echo.Context) error {
	var request UserUpdateLoginRequestObject

	var body UserUpdateLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateLogin(ctx, request.(UserUpdateLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateLoginResponseObject); ok {
		return validResponse.VisitUserUpdateLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateLogout operation middleware
func (sh *strictHandler) UserUpdateLogout(ctx echo.Context) error {
	var request UserUpdateLogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateLogout(ctx, request.(UserUpdateLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateLogoutResponseObject); ok {
		return validResponse.VisitUserUpdateLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TenantMembershipsList operation middleware
func (sh *strictHandler) TenantMembershipsList(ctx echo.Context) error {
	var request TenantMembershipsListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TenantMembershipsList(ctx, request.(TenantMembershipsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TenantMembershipsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TenantMembershipsListResponseObject); ok {
		return validResponse.VisitTenantMembershipsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdatePassword operation middleware
func (sh *strictHandler) UserUpdatePassword(ctx echo.Context) error {
	var request UserUpdatePasswordRequestObject

	var body UserUpdatePasswordJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdatePassword(ctx, request.(UserUpdatePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdatePassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdatePasswordResponseObject); ok {
		return validResponse.VisitUserUpdatePasswordResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserCreate operation middleware
func (sh *strictHandler) UserCreate(ctx echo.Context) error {
	var request UserCreateRequestObject

	var body UserCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserCreate(ctx, request.(UserCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserCreateResponseObject); ok {
		return validResponse.VisitUserCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserUpdateSlackOauthCallback operation middleware
func (sh *strictHandler) UserUpdateSlackOauthCallback(ctx echo.Context) error {
	var request UserUpdateSlackOauthCallbackRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserUpdateSlackOauthCallback(ctx, request.(UserUpdateSlackOauthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUpdateSlackOauthCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserUpdateSlackOauthCallbackResponseObject); ok {
		return validResponse.VisitUserUpdateSlackOauthCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkerGet operation middleware
func (sh *strictHandler) WorkerGet(ctx echo.Context, worker openapi_types.UUID) error {
	var request WorkerGetRequestObject

	request.Worker = worker

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkerGet(ctx, request.(WorkerGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkerGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkerGetResponseObject); ok {
		return validResponse.VisitWorkerGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowDelete operation middleware
func (sh *strictHandler) WorkflowDelete(ctx echo.Context, workflow openapi_types.UUID) error {
	var request WorkflowDeleteRequestObject

	request.Workflow = workflow

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowDelete(ctx, request.(WorkflowDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowDeleteResponseObject); ok {
		return validResponse.VisitWorkflowDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowGet operation middleware
func (sh *strictHandler) WorkflowGet(ctx echo.Context, workflow openapi_types.UUID) error {
	var request WorkflowGetRequestObject

	request.Workflow = workflow

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowGet(ctx, request.(WorkflowGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowGetResponseObject); ok {
		return validResponse.VisitWorkflowGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowUpdateLinkGithub operation middleware
func (sh *strictHandler) WorkflowUpdateLinkGithub(ctx echo.Context, workflow openapi_types.UUID) error {
	var request WorkflowUpdateLinkGithubRequestObject

	request.Workflow = workflow

	var body WorkflowUpdateLinkGithubJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowUpdateLinkGithub(ctx, request.(WorkflowUpdateLinkGithubRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowUpdateLinkGithub")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowUpdateLinkGithubResponseObject); ok {
		return validResponse.VisitWorkflowUpdateLinkGithubResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowGetMetrics operation middleware
func (sh *strictHandler) WorkflowGetMetrics(ctx echo.Context, workflow openapi_types.UUID, params WorkflowGetMetricsParams) error {
	var request WorkflowGetMetricsRequestObject

	request.Workflow = workflow
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowGetMetrics(ctx, request.(WorkflowGetMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowGetMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowGetMetricsResponseObject); ok {
		return validResponse.VisitWorkflowGetMetricsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowRunCreate operation middleware
func (sh *strictHandler) WorkflowRunCreate(ctx echo.Context, workflow openapi_types.UUID, params WorkflowRunCreateParams) error {
	var request WorkflowRunCreateRequestObject

	request.Workflow = workflow
	request.Params = params

	var body WorkflowRunCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowRunCreate(ctx, request.(WorkflowRunCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowRunCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowRunCreateResponseObject); ok {
		return validResponse.VisitWorkflowRunCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowVersionGet operation middleware
func (sh *strictHandler) WorkflowVersionGet(ctx echo.Context, workflow openapi_types.UUID, params WorkflowVersionGetParams) error {
	var request WorkflowVersionGetRequestObject

	request.Workflow = workflow
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowVersionGet(ctx, request.(WorkflowVersionGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowVersionGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowVersionGetResponseObject); ok {
		return validResponse.VisitWorkflowVersionGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WorkflowVersionGetDefinition operation middleware
func (sh *strictHandler) WorkflowVersionGetDefinition(ctx echo.Context, workflow openapi_types.UUID, params WorkflowVersionGetDefinitionParams) error {
	var request WorkflowVersionGetDefinitionRequestObject

	request.Workflow = workflow
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WorkflowVersionGetDefinition(ctx, request.(WorkflowVersionGetDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkflowVersionGetDefinition")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WorkflowVersionGetDefinitionResponseObject); ok {
		return validResponse.VisitWorkflowVersionGetDefinitionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ft0CAPdyAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
