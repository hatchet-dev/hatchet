package: gen
output: ./api/v1/server/oas/gen/openapi.gen.go
generate:
  models: true
  echo-server: true
  strict-server: true
  embedded-spec: true
output-options:
  user-templates:
    "strict/strict-interface.tmpl": >-
      {{range .}}
          {{$opid := .OperationId -}}
          type {{$opid | ucFirst}}RequestObject struct {
              {{range .PathParams -}}
                  {{.GoName | ucFirst}} {{.TypeDef}} {{.JsonTag}}
              {{end -}}
              {{if .RequiresParamObject -}}
                  Params {{$opid}}Params
              {{end -}}
              {{if .HasMaskedRequestContentTypes -}}
                  ContentType string
              {{end -}}
              {{$multipleBodies := gt (len .Bodies) 1 -}}
              {{range .Bodies -}}
                  {{if $multipleBodies}}{{.NameTag}}{{end}}Body {{if eq .NameTag "Multipart"}}*multipart.Reader{{else if ne .NameTag ""}}*{{$opid}}{{.NameTag}}RequestBody{{else}}io.Reader{{end}}
              {{end -}}
          }

          type {{$opid | ucFirst}}ResponseObject interface {
              Visit{{$opid}}Response(w http.ResponseWriter) error
          }

          {{range .Responses}}
              {{$statusCode := .StatusCode -}}
              {{$hasHeaders := ne 0 (len .Headers) -}}
              {{$fixedStatusCode := .HasFixedStatusCode -}}
              {{$isRef := .IsRef -}}
              {{$ref := .Ref  | ucFirstWithPkgName -}}
              {{$headers := .Headers -}}

              {{if (and $hasHeaders (not $isRef)) -}}
                  type {{$opid}}{{$statusCode}}ResponseHeaders struct {
                      {{range .Headers -}}
                          {{.GoName}} {{.Schema.TypeDecl}}
                      {{end -}}
                  }
              {{end}}

              {{range .Contents}}
                  {{$receiverTypeName := printf "%s%s%s%s" $opid $statusCode .NameTagOrContentType "Response"}}
                  {{if and $fixedStatusCode $isRef -}}
                      type {{$receiverTypeName}} struct{ {{$ref}}{{.NameTagOrContentType}}Response }
                  {{else if and (not $hasHeaders) ($fixedStatusCode) (.IsSupported) -}}
                      type {{$receiverTypeName}} {{if eq .NameTag "Multipart"}}func(writer *multipart.Writer)error{{else if .IsSupported}}{{if .Schema.IsRef}}={{end}} {{.Schema.TypeDecl}}{{else}}io.Reader{{end}}
                  {{else -}}
                      type {{$receiverTypeName}} struct {
                          Body {{if eq .NameTag "Multipart"}}func(writer *multipart.Writer)error{{else if .IsSupported}}{{.Schema.TypeDecl}}{{else}}io.Reader{{end}}
                          {{if $hasHeaders -}}
                              Headers {{if $isRef}}{{$ref}}{{else}}{{$opid}}{{$statusCode}}{{end}}ResponseHeaders
                          {{end -}}

                          {{if not $fixedStatusCode -}}
                              StatusCode int
                          {{end -}}

                          {{if not .HasFixedContentType -}}
                              ContentType string
                          {{end -}}

                          {{if not .IsSupported -}}
                              ContentLength int64
                          {{end -}}
                      }
                  {{end}}

                  func (response {{$receiverTypeName}}) Visit{{$opid}}Response(w http.ResponseWriter) error {
                      {{range $headers -}}
                          w.Header().Set("{{.Name}}", fmt.Sprint(response.Headers.{{.GoName}}))
                      {{end -}}
                      {{if eq .NameTag "Multipart" -}}
                          writer := multipart.NewWriter(w)
                      {{end -}}
                      w.Header().Set("Content-Type", {{if eq .NameTag "Multipart"}}writer.FormDataContentType(){{else if .HasFixedContentType }}"{{.ContentType}}"{{else}}response.ContentType{{end}})
                      {{if not .IsSupported -}}
                          if response.ContentLength != 0 {
                              w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
                          }
                      {{end -}}
                      w.WriteHeader({{if $fixedStatusCode}}{{$statusCode}}{{else}}response.StatusCode{{end}})
                      {{$hasBodyVar := or ($hasHeaders) (not $fixedStatusCode) (not .IsSupported)}}
                      {{if eq .NameTag "JSON" -}}
                          return json.NewEncoder(w).Encode({{if $hasBodyVar}}response.Body{{else}}response{{end}})
                      {{else if eq .NameTag "Text" -}}
                          _, err := w.Write([]byte({{if $hasBodyVar}}response.Body{{else}}response{{end}}))
                          return err
                      {{else if eq .NameTag "Formdata" -}}
                          if form, err := runtime.MarshalForm({{if $hasBodyVar}}response.Body{{else}}response{{end}}, nil); err != nil {
                              return err
                          } else {
                              _, err := w.Write([]byte(form.Encode()))
                              return err
                          }
                      {{else if eq .NameTag "Multipart" -}}
                          defer writer.Close()
                          return {{if $hasBodyVar}}response.Body{{else}}response{{end}}(writer);
                      {{else -}}
                          if closer, ok := response.Body.(io.ReadCloser); ok {
                              defer closer.Close()
                          }
                          _, err := io.Copy(w, response.Body)
                          return err
                      {{end}}{{/* if eq .NameTag "JSON" */ -}}
                  }
              {{end}}

              {{if eq 0 (len .Contents) -}}
                  {{if and $fixedStatusCode $isRef -}}
                      type {{$opid}}{{$statusCode}}Response = {{$ref}}Response
                  {{else -}}
                      type {{$opid}}{{$statusCode}}Response struct {
                          {{if $hasHeaders -}}
                              Headers {{if $isRef}}{{$ref}}{{else}}{{$opid}}{{$statusCode}}{{end}}ResponseHeaders
                          {{end}}
                          {{if not $fixedStatusCode -}}
                              StatusCode int
                          {{end -}}
                      }
                  {{end -}}
                  func (response {{$opid}}{{$statusCode}}Response) Visit{{$opid}}Response(w http.ResponseWriter) error {
                      {{range $headers -}}
                          w.Header().Set("{{.Name}}", fmt.Sprint(response.Headers.{{.GoName}}))
                      {{end -}}
                      w.WriteHeader({{if $fixedStatusCode}}{{$statusCode}}{{else}}response.StatusCode{{end}})
                      return nil
                  }
              {{end}}
          {{end}}
      {{end}}

      type StrictServerInterface interface {
        {{range .}}
        {{$opid := .OperationId -}}
        {{$opid}}(ctx echo.Context, request {{$opid | ucFirst}}RequestObject) ({{$opid | ucFirst}}ResponseObject, error)
        {{end}}
      }
    "strict/strict-echo.tmpl": >-
      type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

      type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

      func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
          return &strictHandler{ssi: ssi, middlewares: middlewares}
      }

      type strictHandler struct {
          ssi StrictServerInterface
          middlewares []StrictMiddlewareFunc
      }

      {{range .}}
          {{$opid := .OperationId}}
          // {{$opid}} operation middleware
          func (sh *strictHandler) {{.OperationId}}(ctx echo.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}}) error {
              var request {{$opid | ucFirst}}RequestObject

              {{range .PathParams -}}
                  {{$varName := .GoVariableName -}}
                  request.{{$varName | ucFirst}} = {{$varName}}
              {{end -}}

              {{if .RequiresParamObject -}}
                  request.Params = params
              {{end -}}

              {{ if .HasMaskedRequestContentTypes -}}
                  request.ContentType = ctx.Request().Header.Get("Content-Type")
              {{end -}}

              {{$multipleBodies := gt (len .Bodies) 1 -}}
              {{range .Bodies -}}
                  {{if $multipleBodies}}if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "{{.ContentType}}") { {{end}}
                      {{if eq .NameTag "JSON" -}}
                          var body {{$opid}}{{.NameTag}}RequestBody
                          if err := ctx.Bind(&body); err != nil {
                              return err
                          }
                          request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                      {{else if eq .NameTag "Formdata" -}}
                          if form, err := ctx.FormParams(); err == nil {
                              var body {{$opid}}{{.NameTag}}RequestBody
                              if err := runtime.BindForm(&body, form, nil, nil); err != nil {
                                  return err
                              }
                              request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                          } else {
                              return err
                          }
                      {{else if eq .NameTag "Multipart" -}}
                          if reader, err := ctx.Request().MultipartReader(); err != nil {
                              return err
                          } else {
                              request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = reader
                          }
                      {{else if eq .NameTag "Text" -}}
                          data, err := io.ReadAll(ctx.Request().Body)
                          if err != nil {
                              return err
                          }
                          body := {{$opid}}{{.NameTag}}RequestBody(data)
                          request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                      {{else -}}
                          request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = ctx.Request().Body
                      {{end}}{{/* if eq .NameTag "JSON" */ -}}
                  {{if $multipleBodies}}}{{end}}
              {{end}}{{/* range .Bodies */}}

              handler := func(ctx echo.Context, request interface{}) (interface{}, error){
                  return sh.ssi.{{.OperationId}}(ctx, request.({{$opid | ucFirst}}RequestObject))
              }
              for _, middleware := range sh.middlewares {
                  handler = middleware(handler, "{{.OperationId}}")
              }

              response, err := handler(ctx, request)

              if err != nil {
                  return err
              } else if validResponse, ok := response.({{$opid | ucFirst}}ResponseObject); ok {
                  return validResponse.Visit{{$opid}}Response(ctx.Response())
              } else if response != nil {
                  return fmt.Errorf("Unexpected response type: %T", response)
              }
              return nil
          }
      {{end}}
